
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00003684  00003718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007e  0080007e  00003736  2**0
                  ALLOC
  3 .stab         000022f8  00000000  00000000  00003738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f23  00000000  00000000  00005a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006953  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__vector_7>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2159>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e4 e8       	ldi	r30, 0x84	; 132
     16a:	f6 e3       	ldi	r31, 0x36	; 54
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	ae 37       	cpi	r26, 0x7E	; 126
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	ae e7       	ldi	r26, 0x7E	; 126
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a4 38       	cpi	r26, 0x84	; 132
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 42 16 	call	0x2c84	; 0x2c84 <main>
     18c:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <vfprintf>:
     194:	a3 e1       	ldi	r26, 0x13	; 19
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e0 ed       	ldi	r30, 0xD0	; 208
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__>
     1a0:	7c 01       	movw	r14, r24
     1a2:	1b 01       	movw	r2, r22
     1a4:	6a 01       	movw	r12, r20
     1a6:	fc 01       	movw	r30, r24
     1a8:	17 82       	std	Z+7, r1	; 0x07
     1aa:	16 82       	std	Z+6, r1	; 0x06
     1ac:	83 81       	ldd	r24, Z+3	; 0x03
     1ae:	81 ff       	sbrs	r24, 1
     1b0:	66 c3       	rjmp	.+1740   	; 0x87e <__stack+0x1f>
     1b2:	be 01       	movw	r22, r28
     1b4:	6f 5f       	subi	r22, 0xFF	; 255
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	4b 01       	movw	r8, r22
     1ba:	f7 01       	movw	r30, r14
     1bc:	93 81       	ldd	r25, Z+3	; 0x03
     1be:	f1 01       	movw	r30, r2
     1c0:	93 fd       	sbrc	r25, 3
     1c2:	85 91       	lpm	r24, Z+
     1c4:	93 ff       	sbrs	r25, 3
     1c6:	81 91       	ld	r24, Z+
     1c8:	1f 01       	movw	r2, r30
     1ca:	88 23       	and	r24, r24
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <vfprintf+0x3c>
     1ce:	53 c3       	rjmp	.+1702   	; 0x876 <__stack+0x17>
     1d0:	85 32       	cpi	r24, 0x25	; 37
     1d2:	39 f4       	brne	.+14     	; 0x1e2 <vfprintf+0x4e>
     1d4:	93 fd       	sbrc	r25, 3
     1d6:	85 91       	lpm	r24, Z+
     1d8:	93 ff       	sbrs	r25, 3
     1da:	81 91       	ld	r24, Z+
     1dc:	1f 01       	movw	r2, r30
     1de:	85 32       	cpi	r24, 0x25	; 37
     1e0:	39 f4       	brne	.+14     	; 0x1f0 <vfprintf+0x5c>
     1e2:	b7 01       	movw	r22, r14
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     1ea:	56 01       	movw	r10, r12
     1ec:	65 01       	movw	r12, r10
     1ee:	e5 cf       	rjmp	.-54     	; 0x1ba <vfprintf+0x26>
     1f0:	10 e0       	ldi	r17, 0x00	; 0
     1f2:	51 2c       	mov	r5, r1
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	20 32       	cpi	r18, 0x20	; 32
     1f8:	a0 f4       	brcc	.+40     	; 0x222 <vfprintf+0x8e>
     1fa:	8b 32       	cpi	r24, 0x2B	; 43
     1fc:	69 f0       	breq	.+26     	; 0x218 <vfprintf+0x84>
     1fe:	30 f4       	brcc	.+12     	; 0x20c <vfprintf+0x78>
     200:	80 32       	cpi	r24, 0x20	; 32
     202:	59 f0       	breq	.+22     	; 0x21a <vfprintf+0x86>
     204:	83 32       	cpi	r24, 0x23	; 35
     206:	69 f4       	brne	.+26     	; 0x222 <vfprintf+0x8e>
     208:	20 61       	ori	r18, 0x10	; 16
     20a:	2c c0       	rjmp	.+88     	; 0x264 <vfprintf+0xd0>
     20c:	8d 32       	cpi	r24, 0x2D	; 45
     20e:	39 f0       	breq	.+14     	; 0x21e <vfprintf+0x8a>
     210:	80 33       	cpi	r24, 0x30	; 48
     212:	39 f4       	brne	.+14     	; 0x222 <vfprintf+0x8e>
     214:	21 60       	ori	r18, 0x01	; 1
     216:	26 c0       	rjmp	.+76     	; 0x264 <vfprintf+0xd0>
     218:	22 60       	ori	r18, 0x02	; 2
     21a:	24 60       	ori	r18, 0x04	; 4
     21c:	23 c0       	rjmp	.+70     	; 0x264 <vfprintf+0xd0>
     21e:	28 60       	ori	r18, 0x08	; 8
     220:	21 c0       	rjmp	.+66     	; 0x264 <vfprintf+0xd0>
     222:	27 fd       	sbrc	r18, 7
     224:	27 c0       	rjmp	.+78     	; 0x274 <vfprintf+0xe0>
     226:	30 ed       	ldi	r19, 0xD0	; 208
     228:	38 0f       	add	r19, r24
     22a:	3a 30       	cpi	r19, 0x0A	; 10
     22c:	78 f4       	brcc	.+30     	; 0x24c <vfprintf+0xb8>
     22e:	26 ff       	sbrs	r18, 6
     230:	06 c0       	rjmp	.+12     	; 0x23e <vfprintf+0xaa>
     232:	fa e0       	ldi	r31, 0x0A	; 10
     234:	1f 9f       	mul	r17, r31
     236:	30 0d       	add	r19, r0
     238:	11 24       	eor	r1, r1
     23a:	13 2f       	mov	r17, r19
     23c:	13 c0       	rjmp	.+38     	; 0x264 <vfprintf+0xd0>
     23e:	6a e0       	ldi	r22, 0x0A	; 10
     240:	56 9e       	mul	r5, r22
     242:	30 0d       	add	r19, r0
     244:	11 24       	eor	r1, r1
     246:	53 2e       	mov	r5, r19
     248:	20 62       	ori	r18, 0x20	; 32
     24a:	0c c0       	rjmp	.+24     	; 0x264 <vfprintf+0xd0>
     24c:	8e 32       	cpi	r24, 0x2E	; 46
     24e:	21 f4       	brne	.+8      	; 0x258 <vfprintf+0xc4>
     250:	26 fd       	sbrc	r18, 6
     252:	11 c3       	rjmp	.+1570   	; 0x876 <__stack+0x17>
     254:	20 64       	ori	r18, 0x40	; 64
     256:	06 c0       	rjmp	.+12     	; 0x264 <vfprintf+0xd0>
     258:	8c 36       	cpi	r24, 0x6C	; 108
     25a:	11 f4       	brne	.+4      	; 0x260 <vfprintf+0xcc>
     25c:	20 68       	ori	r18, 0x80	; 128
     25e:	02 c0       	rjmp	.+4      	; 0x264 <vfprintf+0xd0>
     260:	88 36       	cpi	r24, 0x68	; 104
     262:	41 f4       	brne	.+16     	; 0x274 <vfprintf+0xe0>
     264:	f1 01       	movw	r30, r2
     266:	93 fd       	sbrc	r25, 3
     268:	85 91       	lpm	r24, Z+
     26a:	93 ff       	sbrs	r25, 3
     26c:	81 91       	ld	r24, Z+
     26e:	1f 01       	movw	r2, r30
     270:	81 11       	cpse	r24, r1
     272:	c1 cf       	rjmp	.-126    	; 0x1f6 <vfprintf+0x62>
     274:	9b eb       	ldi	r25, 0xBB	; 187
     276:	98 0f       	add	r25, r24
     278:	93 30       	cpi	r25, 0x03	; 3
     27a:	18 f4       	brcc	.+6      	; 0x282 <vfprintf+0xee>
     27c:	20 61       	ori	r18, 0x10	; 16
     27e:	80 5e       	subi	r24, 0xE0	; 224
     280:	06 c0       	rjmp	.+12     	; 0x28e <vfprintf+0xfa>
     282:	9b e9       	ldi	r25, 0x9B	; 155
     284:	98 0f       	add	r25, r24
     286:	93 30       	cpi	r25, 0x03	; 3
     288:	08 f0       	brcs	.+2      	; 0x28c <vfprintf+0xf8>
     28a:	aa c1       	rjmp	.+852    	; 0x5e0 <vfprintf+0x44c>
     28c:	2f 7e       	andi	r18, 0xEF	; 239
     28e:	26 ff       	sbrs	r18, 6
     290:	16 e0       	ldi	r17, 0x06	; 6
     292:	2f 73       	andi	r18, 0x3F	; 63
     294:	72 2e       	mov	r7, r18
     296:	85 36       	cpi	r24, 0x65	; 101
     298:	21 f4       	brne	.+8      	; 0x2a2 <vfprintf+0x10e>
     29a:	f2 2f       	mov	r31, r18
     29c:	f0 64       	ori	r31, 0x40	; 64
     29e:	7f 2e       	mov	r7, r31
     2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <vfprintf+0x11e>
     2a2:	86 36       	cpi	r24, 0x66	; 102
     2a4:	21 f4       	brne	.+8      	; 0x2ae <vfprintf+0x11a>
     2a6:	62 2f       	mov	r22, r18
     2a8:	60 68       	ori	r22, 0x80	; 128
     2aa:	76 2e       	mov	r7, r22
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <vfprintf+0x11e>
     2ae:	11 11       	cpse	r17, r1
     2b0:	11 50       	subi	r17, 0x01	; 1
     2b2:	77 fe       	sbrs	r7, 7
     2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <vfprintf+0x130>
     2b6:	1c 33       	cpi	r17, 0x3C	; 60
     2b8:	48 f4       	brcc	.+18     	; 0x2cc <vfprintf+0x138>
     2ba:	44 24       	eor	r4, r4
     2bc:	43 94       	inc	r4
     2be:	41 0e       	add	r4, r17
     2c0:	27 e0       	ldi	r18, 0x07	; 7
     2c2:	0b c0       	rjmp	.+22     	; 0x2da <vfprintf+0x146>
     2c4:	18 30       	cpi	r17, 0x08	; 8
     2c6:	30 f4       	brcc	.+12     	; 0x2d4 <vfprintf+0x140>
     2c8:	21 2f       	mov	r18, r17
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <vfprintf+0x144>
     2cc:	27 e0       	ldi	r18, 0x07	; 7
     2ce:	4c e3       	ldi	r20, 0x3C	; 60
     2d0:	44 2e       	mov	r4, r20
     2d2:	03 c0       	rjmp	.+6      	; 0x2da <vfprintf+0x146>
     2d4:	27 e0       	ldi	r18, 0x07	; 7
     2d6:	17 e0       	ldi	r17, 0x07	; 7
     2d8:	41 2c       	mov	r4, r1
     2da:	56 01       	movw	r10, r12
     2dc:	74 e0       	ldi	r23, 0x04	; 4
     2de:	a7 0e       	add	r10, r23
     2e0:	b1 1c       	adc	r11, r1
     2e2:	f6 01       	movw	r30, r12
     2e4:	60 81       	ld	r22, Z
     2e6:	71 81       	ldd	r23, Z+1	; 0x01
     2e8:	82 81       	ldd	r24, Z+2	; 0x02
     2ea:	93 81       	ldd	r25, Z+3	; 0x03
     2ec:	04 2d       	mov	r16, r4
     2ee:	a4 01       	movw	r20, r8
     2f0:	0e 94 ae 19 	call	0x335c	; 0x335c <__ftoa_engine>
     2f4:	6c 01       	movw	r12, r24
     2f6:	09 81       	ldd	r16, Y+1	; 0x01
     2f8:	00 ff       	sbrs	r16, 0
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <vfprintf+0x16c>
     2fc:	03 ff       	sbrs	r16, 3
     2fe:	06 c0       	rjmp	.+12     	; 0x30c <vfprintf+0x178>
     300:	71 fc       	sbrc	r7, 1
     302:	07 c0       	rjmp	.+14     	; 0x312 <vfprintf+0x17e>
     304:	72 fc       	sbrc	r7, 2
     306:	08 c0       	rjmp	.+16     	; 0x318 <vfprintf+0x184>
     308:	61 2c       	mov	r6, r1
     30a:	08 c0       	rjmp	.+16     	; 0x31c <vfprintf+0x188>
     30c:	3d e2       	ldi	r19, 0x2D	; 45
     30e:	63 2e       	mov	r6, r19
     310:	05 c0       	rjmp	.+10     	; 0x31c <vfprintf+0x188>
     312:	2b e2       	ldi	r18, 0x2B	; 43
     314:	62 2e       	mov	r6, r18
     316:	02 c0       	rjmp	.+4      	; 0x31c <vfprintf+0x188>
     318:	90 e2       	ldi	r25, 0x20	; 32
     31a:	69 2e       	mov	r6, r25
     31c:	80 2f       	mov	r24, r16
     31e:	8c 70       	andi	r24, 0x0C	; 12
     320:	99 f1       	breq	.+102    	; 0x388 <vfprintf+0x1f4>
     322:	66 20       	and	r6, r6
     324:	11 f0       	breq	.+4      	; 0x32a <vfprintf+0x196>
     326:	84 e0       	ldi	r24, 0x04	; 4
     328:	01 c0       	rjmp	.+2      	; 0x32c <vfprintf+0x198>
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	85 15       	cp	r24, r5
     32e:	10 f0       	brcs	.+4      	; 0x334 <vfprintf+0x1a0>
     330:	51 2c       	mov	r5, r1
     332:	0b c0       	rjmp	.+22     	; 0x34a <vfprintf+0x1b6>
     334:	58 1a       	sub	r5, r24
     336:	73 fc       	sbrc	r7, 3
     338:	08 c0       	rjmp	.+16     	; 0x34a <vfprintf+0x1b6>
     33a:	b7 01       	movw	r22, r14
     33c:	80 e2       	ldi	r24, 0x20	; 32
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     344:	5a 94       	dec	r5
     346:	c9 f7       	brne	.-14     	; 0x33a <vfprintf+0x1a6>
     348:	f3 cf       	rjmp	.-26     	; 0x330 <vfprintf+0x19c>
     34a:	66 20       	and	r6, r6
     34c:	29 f0       	breq	.+10     	; 0x358 <vfprintf+0x1c4>
     34e:	b7 01       	movw	r22, r14
     350:	86 2d       	mov	r24, r6
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     358:	03 fd       	sbrc	r16, 3
     35a:	03 c0       	rjmp	.+6      	; 0x362 <vfprintf+0x1ce>
     35c:	08 e5       	ldi	r16, 0x58	; 88
     35e:	10 e0       	ldi	r17, 0x00	; 0
     360:	02 c0       	rjmp	.+4      	; 0x366 <vfprintf+0x1d2>
     362:	04 e5       	ldi	r16, 0x54	; 84
     364:	10 e0       	ldi	r17, 0x00	; 0
     366:	f7 2d       	mov	r31, r7
     368:	f0 71       	andi	r31, 0x10	; 16
     36a:	7f 2e       	mov	r7, r31
     36c:	f8 01       	movw	r30, r16
     36e:	84 91       	lpm	r24, Z
     370:	88 23       	and	r24, r24
     372:	09 f4       	brne	.+2      	; 0x376 <vfprintf+0x1e2>
     374:	76 c2       	rjmp	.+1260   	; 0x862 <__stack+0x3>
     376:	71 10       	cpse	r7, r1
     378:	80 52       	subi	r24, 0x20	; 32
     37a:	b7 01       	movw	r22, r14
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     382:	0f 5f       	subi	r16, 0xFF	; 255
     384:	1f 4f       	sbci	r17, 0xFF	; 255
     386:	f2 cf       	rjmp	.-28     	; 0x36c <vfprintf+0x1d8>
     388:	77 fe       	sbrs	r7, 7
     38a:	0f c0       	rjmp	.+30     	; 0x3aa <vfprintf+0x216>
     38c:	4c 0c       	add	r4, r12
     38e:	04 ff       	sbrs	r16, 4
     390:	04 c0       	rjmp	.+8      	; 0x39a <vfprintf+0x206>
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	81 33       	cpi	r24, 0x31	; 49
     396:	09 f4       	brne	.+2      	; 0x39a <vfprintf+0x206>
     398:	4a 94       	dec	r4
     39a:	14 14       	cp	r1, r4
     39c:	74 f5       	brge	.+92     	; 0x3fa <vfprintf+0x266>
     39e:	f8 e0       	ldi	r31, 0x08	; 8
     3a0:	f4 15       	cp	r31, r4
     3a2:	78 f5       	brcc	.+94     	; 0x402 <vfprintf+0x26e>
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	48 2e       	mov	r4, r24
     3a8:	2c c0       	rjmp	.+88     	; 0x402 <vfprintf+0x26e>
     3aa:	76 fc       	sbrc	r7, 6
     3ac:	2a c0       	rjmp	.+84     	; 0x402 <vfprintf+0x26e>
     3ae:	81 2f       	mov	r24, r17
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	8c 15       	cp	r24, r12
     3b4:	9d 05       	cpc	r25, r13
     3b6:	9c f0       	brlt	.+38     	; 0x3de <vfprintf+0x24a>
     3b8:	6c ef       	ldi	r22, 0xFC	; 252
     3ba:	c6 16       	cp	r12, r22
     3bc:	6f ef       	ldi	r22, 0xFF	; 255
     3be:	d6 06       	cpc	r13, r22
     3c0:	74 f0       	brlt	.+28     	; 0x3de <vfprintf+0x24a>
     3c2:	77 2d       	mov	r23, r7
     3c4:	70 68       	ori	r23, 0x80	; 128
     3c6:	77 2e       	mov	r7, r23
     3c8:	0a c0       	rjmp	.+20     	; 0x3de <vfprintf+0x24a>
     3ca:	e2 e0       	ldi	r30, 0x02	; 2
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ec 0f       	add	r30, r28
     3d0:	fd 1f       	adc	r31, r29
     3d2:	e1 0f       	add	r30, r17
     3d4:	f1 1d       	adc	r31, r1
     3d6:	80 81       	ld	r24, Z
     3d8:	80 33       	cpi	r24, 0x30	; 48
     3da:	19 f4       	brne	.+6      	; 0x3e2 <vfprintf+0x24e>
     3dc:	11 50       	subi	r17, 0x01	; 1
     3de:	11 11       	cpse	r17, r1
     3e0:	f4 cf       	rjmp	.-24     	; 0x3ca <vfprintf+0x236>
     3e2:	77 fe       	sbrs	r7, 7
     3e4:	0e c0       	rjmp	.+28     	; 0x402 <vfprintf+0x26e>
     3e6:	44 24       	eor	r4, r4
     3e8:	43 94       	inc	r4
     3ea:	41 0e       	add	r4, r17
     3ec:	81 2f       	mov	r24, r17
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	c8 16       	cp	r12, r24
     3f2:	d9 06       	cpc	r13, r25
     3f4:	2c f4       	brge	.+10     	; 0x400 <vfprintf+0x26c>
     3f6:	1c 19       	sub	r17, r12
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <vfprintf+0x26e>
     3fa:	44 24       	eor	r4, r4
     3fc:	43 94       	inc	r4
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <vfprintf+0x26e>
     400:	10 e0       	ldi	r17, 0x00	; 0
     402:	77 fe       	sbrs	r7, 7
     404:	07 c0       	rjmp	.+14     	; 0x414 <vfprintf+0x280>
     406:	1c 14       	cp	r1, r12
     408:	1d 04       	cpc	r1, r13
     40a:	3c f4       	brge	.+14     	; 0x41a <vfprintf+0x286>
     40c:	96 01       	movw	r18, r12
     40e:	2f 5f       	subi	r18, 0xFF	; 255
     410:	3f 4f       	sbci	r19, 0xFF	; 255
     412:	05 c0       	rjmp	.+10     	; 0x41e <vfprintf+0x28a>
     414:	25 e0       	ldi	r18, 0x05	; 5
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	02 c0       	rjmp	.+4      	; 0x41e <vfprintf+0x28a>
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	66 20       	and	r6, r6
     420:	11 f0       	breq	.+4      	; 0x426 <vfprintf+0x292>
     422:	2f 5f       	subi	r18, 0xFF	; 255
     424:	3f 4f       	sbci	r19, 0xFF	; 255
     426:	11 23       	and	r17, r17
     428:	31 f0       	breq	.+12     	; 0x436 <vfprintf+0x2a2>
     42a:	41 2f       	mov	r20, r17
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	4f 5f       	subi	r20, 0xFF	; 255
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	24 0f       	add	r18, r20
     434:	35 1f       	adc	r19, r21
     436:	45 2d       	mov	r20, r5
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	24 17       	cp	r18, r20
     43c:	35 07       	cpc	r19, r21
     43e:	14 f4       	brge	.+4      	; 0x444 <vfprintf+0x2b0>
     440:	52 1a       	sub	r5, r18
     442:	01 c0       	rjmp	.+2      	; 0x446 <vfprintf+0x2b2>
     444:	51 2c       	mov	r5, r1
     446:	87 2d       	mov	r24, r7
     448:	89 70       	andi	r24, 0x09	; 9
     44a:	49 f4       	brne	.+18     	; 0x45e <vfprintf+0x2ca>
     44c:	55 20       	and	r5, r5
     44e:	39 f0       	breq	.+14     	; 0x45e <vfprintf+0x2ca>
     450:	b7 01       	movw	r22, r14
     452:	80 e2       	ldi	r24, 0x20	; 32
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     45a:	5a 94       	dec	r5
     45c:	f7 cf       	rjmp	.-18     	; 0x44c <vfprintf+0x2b8>
     45e:	66 20       	and	r6, r6
     460:	29 f0       	breq	.+10     	; 0x46c <vfprintf+0x2d8>
     462:	b7 01       	movw	r22, r14
     464:	86 2d       	mov	r24, r6
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     46c:	73 fc       	sbrc	r7, 3
     46e:	09 c0       	rjmp	.+18     	; 0x482 <vfprintf+0x2ee>
     470:	55 20       	and	r5, r5
     472:	39 f0       	breq	.+14     	; 0x482 <vfprintf+0x2ee>
     474:	b7 01       	movw	r22, r14
     476:	80 e3       	ldi	r24, 0x30	; 48
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     47e:	5a 94       	dec	r5
     480:	f7 cf       	rjmp	.-18     	; 0x470 <vfprintf+0x2dc>
     482:	77 fe       	sbrs	r7, 7
     484:	5f c0       	rjmp	.+190    	; 0x544 <vfprintf+0x3b0>
     486:	9c 2d       	mov	r25, r12
     488:	8d 2d       	mov	r24, r13
     48a:	d7 fe       	sbrs	r13, 7
     48c:	02 c0       	rjmp	.+4      	; 0x492 <vfprintf+0x2fe>
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	69 2e       	mov	r6, r25
     494:	78 2e       	mov	r7, r24
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	c6 01       	movw	r24, r12
     49c:	84 19       	sub	r24, r4
     49e:	91 09       	sbc	r25, r1
     4a0:	9d 87       	std	Y+13, r25	; 0x0d
     4a2:	8c 87       	std	Y+12, r24	; 0x0c
     4a4:	96 01       	movw	r18, r12
     4a6:	26 19       	sub	r18, r6
     4a8:	37 09       	sbc	r19, r7
     4aa:	28 0d       	add	r18, r8
     4ac:	39 1d       	adc	r19, r9
     4ae:	81 2f       	mov	r24, r17
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	ee 27       	eor	r30, r30
     4b4:	ff 27       	eor	r31, r31
     4b6:	e8 1b       	sub	r30, r24
     4b8:	f9 0b       	sbc	r31, r25
     4ba:	ff 87       	std	Y+15, r31	; 0x0f
     4bc:	ee 87       	std	Y+14, r30	; 0x0e
     4be:	ff ef       	ldi	r31, 0xFF	; 255
     4c0:	6f 16       	cp	r6, r31
     4c2:	7f 06       	cpc	r7, r31
     4c4:	69 f4       	brne	.+26     	; 0x4e0 <vfprintf+0x34c>
     4c6:	b7 01       	movw	r22, r14
     4c8:	8e e2       	ldi	r24, 0x2E	; 46
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2b 8b       	std	Y+19, r18	; 0x13
     4ce:	3a 8b       	std	Y+18, r19	; 0x12
     4d0:	48 8b       	std	Y+16, r20	; 0x10
     4d2:	59 8b       	std	Y+17, r21	; 0x11
     4d4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     4d8:	59 89       	ldd	r21, Y+17	; 0x11
     4da:	48 89       	ldd	r20, Y+16	; 0x10
     4dc:	3a 89       	ldd	r19, Y+18	; 0x12
     4de:	2b 89       	ldd	r18, Y+19	; 0x13
     4e0:	c6 14       	cp	r12, r6
     4e2:	d7 04       	cpc	r13, r7
     4e4:	54 f0       	brlt	.+20     	; 0x4fa <vfprintf+0x366>
     4e6:	6c 85       	ldd	r22, Y+12	; 0x0c
     4e8:	7d 85       	ldd	r23, Y+13	; 0x0d
     4ea:	66 15       	cp	r22, r6
     4ec:	77 05       	cpc	r23, r7
     4ee:	2c f4       	brge	.+10     	; 0x4fa <vfprintf+0x366>
     4f0:	f9 01       	movw	r30, r18
     4f2:	e4 0f       	add	r30, r20
     4f4:	f5 1f       	adc	r31, r21
     4f6:	81 81       	ldd	r24, Z+1	; 0x01
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <vfprintf+0x368>
     4fa:	80 e3       	ldi	r24, 0x30	; 48
     4fc:	71 e0       	ldi	r23, 0x01	; 1
     4fe:	67 1a       	sub	r6, r23
     500:	71 08       	sbc	r7, r1
     502:	4f 5f       	subi	r20, 0xFF	; 255
     504:	5f 4f       	sbci	r21, 0xFF	; 255
     506:	ee 85       	ldd	r30, Y+14	; 0x0e
     508:	ff 85       	ldd	r31, Y+15	; 0x0f
     50a:	6e 16       	cp	r6, r30
     50c:	7f 06       	cpc	r7, r31
     50e:	6c f0       	brlt	.+26     	; 0x52a <vfprintf+0x396>
     510:	b7 01       	movw	r22, r14
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	2b 8b       	std	Y+19, r18	; 0x13
     516:	3a 8b       	std	Y+18, r19	; 0x12
     518:	48 8b       	std	Y+16, r20	; 0x10
     51a:	59 8b       	std	Y+17, r21	; 0x11
     51c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     520:	2b 89       	ldd	r18, Y+19	; 0x13
     522:	3a 89       	ldd	r19, Y+18	; 0x12
     524:	48 89       	ldd	r20, Y+16	; 0x10
     526:	59 89       	ldd	r21, Y+17	; 0x11
     528:	ca cf       	rjmp	.-108    	; 0x4be <vfprintf+0x32a>
     52a:	6c 14       	cp	r6, r12
     52c:	7d 04       	cpc	r7, r13
     52e:	39 f4       	brne	.+14     	; 0x53e <vfprintf+0x3aa>
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	96 33       	cpi	r25, 0x36	; 54
     534:	18 f4       	brcc	.+6      	; 0x53c <vfprintf+0x3a8>
     536:	95 33       	cpi	r25, 0x35	; 53
     538:	11 f4       	brne	.+4      	; 0x53e <vfprintf+0x3aa>
     53a:	04 ff       	sbrs	r16, 4
     53c:	81 e3       	ldi	r24, 0x31	; 49
     53e:	b7 01       	movw	r22, r14
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	4b c0       	rjmp	.+150    	; 0x5da <vfprintf+0x446>
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	81 33       	cpi	r24, 0x31	; 49
     548:	09 f0       	breq	.+2      	; 0x54c <vfprintf+0x3b8>
     54a:	0f 7e       	andi	r16, 0xEF	; 239
     54c:	b7 01       	movw	r22, r14
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     554:	11 11       	cpse	r17, r1
     556:	05 c0       	rjmp	.+10     	; 0x562 <vfprintf+0x3ce>
     558:	74 fe       	sbrs	r7, 4
     55a:	18 c0       	rjmp	.+48     	; 0x58c <vfprintf+0x3f8>
     55c:	85 e4       	ldi	r24, 0x45	; 69
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	17 c0       	rjmp	.+46     	; 0x590 <vfprintf+0x3fc>
     562:	b7 01       	movw	r22, r14
     564:	8e e2       	ldi	r24, 0x2E	; 46
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	66 24       	eor	r6, r6
     570:	63 94       	inc	r6
     572:	68 0e       	add	r6, r24
     574:	f4 01       	movw	r30, r8
     576:	e8 0f       	add	r30, r24
     578:	f1 1d       	adc	r31, r1
     57a:	80 81       	ld	r24, Z
     57c:	b7 01       	movw	r22, r14
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     584:	11 50       	subi	r17, 0x01	; 1
     586:	41 f3       	breq	.-48     	; 0x558 <vfprintf+0x3c4>
     588:	86 2d       	mov	r24, r6
     58a:	f1 cf       	rjmp	.-30     	; 0x56e <vfprintf+0x3da>
     58c:	85 e6       	ldi	r24, 0x65	; 101
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	b7 01       	movw	r22, r14
     592:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     596:	d7 fc       	sbrc	r13, 7
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <vfprintf+0x410>
     59a:	c1 14       	cp	r12, r1
     59c:	d1 04       	cpc	r13, r1
     59e:	39 f4       	brne	.+14     	; 0x5ae <vfprintf+0x41a>
     5a0:	04 ff       	sbrs	r16, 4
     5a2:	05 c0       	rjmp	.+10     	; 0x5ae <vfprintf+0x41a>
     5a4:	d1 94       	neg	r13
     5a6:	c1 94       	neg	r12
     5a8:	d1 08       	sbc	r13, r1
     5aa:	8d e2       	ldi	r24, 0x2D	; 45
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <vfprintf+0x41c>
     5ae:	8b e2       	ldi	r24, 0x2B	; 43
     5b0:	b7 01       	movw	r22, r14
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     5b8:	80 e3       	ldi	r24, 0x30	; 48
     5ba:	6a e0       	ldi	r22, 0x0A	; 10
     5bc:	c6 16       	cp	r12, r22
     5be:	d1 04       	cpc	r13, r1
     5c0:	2c f0       	brlt	.+10     	; 0x5cc <vfprintf+0x438>
     5c2:	8f 5f       	subi	r24, 0xFF	; 255
     5c4:	fa e0       	ldi	r31, 0x0A	; 10
     5c6:	cf 1a       	sub	r12, r31
     5c8:	d1 08       	sbc	r13, r1
     5ca:	f7 cf       	rjmp	.-18     	; 0x5ba <vfprintf+0x426>
     5cc:	b7 01       	movw	r22, r14
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     5d4:	b7 01       	movw	r22, r14
     5d6:	c6 01       	movw	r24, r12
     5d8:	c0 96       	adiw	r24, 0x30	; 48
     5da:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     5de:	41 c1       	rjmp	.+642    	; 0x862 <__stack+0x3>
     5e0:	83 36       	cpi	r24, 0x63	; 99
     5e2:	31 f0       	breq	.+12     	; 0x5f0 <vfprintf+0x45c>
     5e4:	83 37       	cpi	r24, 0x73	; 115
     5e6:	79 f0       	breq	.+30     	; 0x606 <vfprintf+0x472>
     5e8:	83 35       	cpi	r24, 0x53	; 83
     5ea:	09 f0       	breq	.+2      	; 0x5ee <vfprintf+0x45a>
     5ec:	58 c0       	rjmp	.+176    	; 0x69e <vfprintf+0x50a>
     5ee:	21 c0       	rjmp	.+66     	; 0x632 <vfprintf+0x49e>
     5f0:	56 01       	movw	r10, r12
     5f2:	72 e0       	ldi	r23, 0x02	; 2
     5f4:	a7 0e       	add	r10, r23
     5f6:	b1 1c       	adc	r11, r1
     5f8:	f6 01       	movw	r30, r12
     5fa:	80 81       	ld	r24, Z
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	01 e0       	ldi	r16, 0x01	; 1
     600:	10 e0       	ldi	r17, 0x00	; 0
     602:	64 01       	movw	r12, r8
     604:	14 c0       	rjmp	.+40     	; 0x62e <vfprintf+0x49a>
     606:	56 01       	movw	r10, r12
     608:	f2 e0       	ldi	r31, 0x02	; 2
     60a:	af 0e       	add	r10, r31
     60c:	b1 1c       	adc	r11, r1
     60e:	f6 01       	movw	r30, r12
     610:	c0 80       	ld	r12, Z
     612:	d1 80       	ldd	r13, Z+1	; 0x01
     614:	26 ff       	sbrs	r18, 6
     616:	03 c0       	rjmp	.+6      	; 0x61e <vfprintf+0x48a>
     618:	61 2f       	mov	r22, r17
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <vfprintf+0x48e>
     61e:	6f ef       	ldi	r22, 0xFF	; 255
     620:	7f ef       	ldi	r23, 0xFF	; 255
     622:	c6 01       	movw	r24, r12
     624:	2b 8b       	std	Y+19, r18	; 0x13
     626:	0e 94 91 1a 	call	0x3522	; 0x3522 <strnlen>
     62a:	8c 01       	movw	r16, r24
     62c:	2b 89       	ldd	r18, Y+19	; 0x13
     62e:	2f 77       	andi	r18, 0x7F	; 127
     630:	15 c0       	rjmp	.+42     	; 0x65c <vfprintf+0x4c8>
     632:	56 01       	movw	r10, r12
     634:	f2 e0       	ldi	r31, 0x02	; 2
     636:	af 0e       	add	r10, r31
     638:	b1 1c       	adc	r11, r1
     63a:	f6 01       	movw	r30, r12
     63c:	c0 80       	ld	r12, Z
     63e:	d1 80       	ldd	r13, Z+1	; 0x01
     640:	26 ff       	sbrs	r18, 6
     642:	03 c0       	rjmp	.+6      	; 0x64a <vfprintf+0x4b6>
     644:	61 2f       	mov	r22, r17
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	02 c0       	rjmp	.+4      	; 0x64e <vfprintf+0x4ba>
     64a:	6f ef       	ldi	r22, 0xFF	; 255
     64c:	7f ef       	ldi	r23, 0xFF	; 255
     64e:	c6 01       	movw	r24, r12
     650:	2b 8b       	std	Y+19, r18	; 0x13
     652:	0e 94 86 1a 	call	0x350c	; 0x350c <strnlen_P>
     656:	8c 01       	movw	r16, r24
     658:	2b 89       	ldd	r18, Y+19	; 0x13
     65a:	20 68       	ori	r18, 0x80	; 128
     65c:	72 2e       	mov	r7, r18
     65e:	23 fd       	sbrc	r18, 3
     660:	1a c0       	rjmp	.+52     	; 0x696 <vfprintf+0x502>
     662:	85 2d       	mov	r24, r5
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	08 17       	cp	r16, r24
     668:	19 07       	cpc	r17, r25
     66a:	a8 f4       	brcc	.+42     	; 0x696 <vfprintf+0x502>
     66c:	b7 01       	movw	r22, r14
     66e:	80 e2       	ldi	r24, 0x20	; 32
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     676:	5a 94       	dec	r5
     678:	f4 cf       	rjmp	.-24     	; 0x662 <vfprintf+0x4ce>
     67a:	f6 01       	movw	r30, r12
     67c:	77 fc       	sbrc	r7, 7
     67e:	85 91       	lpm	r24, Z+
     680:	77 fe       	sbrs	r7, 7
     682:	81 91       	ld	r24, Z+
     684:	6f 01       	movw	r12, r30
     686:	b7 01       	movw	r22, r14
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     68e:	51 10       	cpse	r5, r1
     690:	5a 94       	dec	r5
     692:	01 50       	subi	r16, 0x01	; 1
     694:	11 09       	sbc	r17, r1
     696:	01 15       	cp	r16, r1
     698:	11 05       	cpc	r17, r1
     69a:	79 f7       	brne	.-34     	; 0x67a <vfprintf+0x4e6>
     69c:	e2 c0       	rjmp	.+452    	; 0x862 <__stack+0x3>
     69e:	84 36       	cpi	r24, 0x64	; 100
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <vfprintf+0x512>
     6a2:	89 36       	cpi	r24, 0x69	; 105
     6a4:	51 f5       	brne	.+84     	; 0x6fa <vfprintf+0x566>
     6a6:	56 01       	movw	r10, r12
     6a8:	27 ff       	sbrs	r18, 7
     6aa:	09 c0       	rjmp	.+18     	; 0x6be <vfprintf+0x52a>
     6ac:	f4 e0       	ldi	r31, 0x04	; 4
     6ae:	af 0e       	add	r10, r31
     6b0:	b1 1c       	adc	r11, r1
     6b2:	f6 01       	movw	r30, r12
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <vfprintf+0x53e>
     6be:	f2 e0       	ldi	r31, 0x02	; 2
     6c0:	af 0e       	add	r10, r31
     6c2:	b1 1c       	adc	r11, r1
     6c4:	f6 01       	movw	r30, r12
     6c6:	60 81       	ld	r22, Z
     6c8:	71 81       	ldd	r23, Z+1	; 0x01
     6ca:	88 27       	eor	r24, r24
     6cc:	77 fd       	sbrc	r23, 7
     6ce:	80 95       	com	r24
     6d0:	98 2f       	mov	r25, r24
     6d2:	02 2f       	mov	r16, r18
     6d4:	0f 76       	andi	r16, 0x6F	; 111
     6d6:	97 ff       	sbrs	r25, 7
     6d8:	08 c0       	rjmp	.+16     	; 0x6ea <vfprintf+0x556>
     6da:	90 95       	com	r25
     6dc:	80 95       	com	r24
     6de:	70 95       	com	r23
     6e0:	61 95       	neg	r22
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	8f 4f       	sbci	r24, 0xFF	; 255
     6e6:	9f 4f       	sbci	r25, 0xFF	; 255
     6e8:	00 68       	ori	r16, 0x80	; 128
     6ea:	2a e0       	ldi	r18, 0x0A	; 10
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	a4 01       	movw	r20, r8
     6f0:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__ultoa_invert>
     6f4:	c8 2e       	mov	r12, r24
     6f6:	c8 18       	sub	r12, r8
     6f8:	3e c0       	rjmp	.+124    	; 0x776 <vfprintf+0x5e2>
     6fa:	02 2f       	mov	r16, r18
     6fc:	85 37       	cpi	r24, 0x75	; 117
     6fe:	21 f4       	brne	.+8      	; 0x708 <vfprintf+0x574>
     700:	0f 7e       	andi	r16, 0xEF	; 239
     702:	2a e0       	ldi	r18, 0x0A	; 10
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	1d c0       	rjmp	.+58     	; 0x742 <vfprintf+0x5ae>
     708:	09 7f       	andi	r16, 0xF9	; 249
     70a:	8f 36       	cpi	r24, 0x6F	; 111
     70c:	91 f0       	breq	.+36     	; 0x732 <vfprintf+0x59e>
     70e:	18 f4       	brcc	.+6      	; 0x716 <vfprintf+0x582>
     710:	88 35       	cpi	r24, 0x58	; 88
     712:	59 f0       	breq	.+22     	; 0x72a <vfprintf+0x596>
     714:	b0 c0       	rjmp	.+352    	; 0x876 <__stack+0x17>
     716:	80 37       	cpi	r24, 0x70	; 112
     718:	19 f0       	breq	.+6      	; 0x720 <vfprintf+0x58c>
     71a:	88 37       	cpi	r24, 0x78	; 120
     71c:	11 f0       	breq	.+4      	; 0x722 <vfprintf+0x58e>
     71e:	ab c0       	rjmp	.+342    	; 0x876 <__stack+0x17>
     720:	00 61       	ori	r16, 0x10	; 16
     722:	04 ff       	sbrs	r16, 4
     724:	09 c0       	rjmp	.+18     	; 0x738 <vfprintf+0x5a4>
     726:	04 60       	ori	r16, 0x04	; 4
     728:	07 c0       	rjmp	.+14     	; 0x738 <vfprintf+0x5a4>
     72a:	24 ff       	sbrs	r18, 4
     72c:	08 c0       	rjmp	.+16     	; 0x73e <vfprintf+0x5aa>
     72e:	06 60       	ori	r16, 0x06	; 6
     730:	06 c0       	rjmp	.+12     	; 0x73e <vfprintf+0x5aa>
     732:	28 e0       	ldi	r18, 0x08	; 8
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	05 c0       	rjmp	.+10     	; 0x742 <vfprintf+0x5ae>
     738:	20 e1       	ldi	r18, 0x10	; 16
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	02 c0       	rjmp	.+4      	; 0x742 <vfprintf+0x5ae>
     73e:	20 e1       	ldi	r18, 0x10	; 16
     740:	32 e0       	ldi	r19, 0x02	; 2
     742:	56 01       	movw	r10, r12
     744:	07 ff       	sbrs	r16, 7
     746:	09 c0       	rjmp	.+18     	; 0x75a <vfprintf+0x5c6>
     748:	f4 e0       	ldi	r31, 0x04	; 4
     74a:	af 0e       	add	r10, r31
     74c:	b1 1c       	adc	r11, r1
     74e:	f6 01       	movw	r30, r12
     750:	60 81       	ld	r22, Z
     752:	71 81       	ldd	r23, Z+1	; 0x01
     754:	82 81       	ldd	r24, Z+2	; 0x02
     756:	93 81       	ldd	r25, Z+3	; 0x03
     758:	08 c0       	rjmp	.+16     	; 0x76a <vfprintf+0x5d6>
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	af 0e       	add	r10, r31
     75e:	b1 1c       	adc	r11, r1
     760:	f6 01       	movw	r30, r12
     762:	60 81       	ld	r22, Z
     764:	71 81       	ldd	r23, Z+1	; 0x01
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	a4 01       	movw	r20, r8
     76c:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__ultoa_invert>
     770:	c8 2e       	mov	r12, r24
     772:	c8 18       	sub	r12, r8
     774:	0f 77       	andi	r16, 0x7F	; 127
     776:	06 ff       	sbrs	r16, 6
     778:	0b c0       	rjmp	.+22     	; 0x790 <vfprintf+0x5fc>
     77a:	20 2f       	mov	r18, r16
     77c:	2e 7f       	andi	r18, 0xFE	; 254
     77e:	c1 16       	cp	r12, r17
     780:	50 f4       	brcc	.+20     	; 0x796 <vfprintf+0x602>
     782:	04 ff       	sbrs	r16, 4
     784:	0a c0       	rjmp	.+20     	; 0x79a <vfprintf+0x606>
     786:	02 fd       	sbrc	r16, 2
     788:	08 c0       	rjmp	.+16     	; 0x79a <vfprintf+0x606>
     78a:	20 2f       	mov	r18, r16
     78c:	2e 7e       	andi	r18, 0xEE	; 238
     78e:	05 c0       	rjmp	.+10     	; 0x79a <vfprintf+0x606>
     790:	dc 2c       	mov	r13, r12
     792:	20 2f       	mov	r18, r16
     794:	03 c0       	rjmp	.+6      	; 0x79c <vfprintf+0x608>
     796:	dc 2c       	mov	r13, r12
     798:	01 c0       	rjmp	.+2      	; 0x79c <vfprintf+0x608>
     79a:	d1 2e       	mov	r13, r17
     79c:	24 ff       	sbrs	r18, 4
     79e:	0d c0       	rjmp	.+26     	; 0x7ba <vfprintf+0x626>
     7a0:	fe 01       	movw	r30, r28
     7a2:	ec 0d       	add	r30, r12
     7a4:	f1 1d       	adc	r31, r1
     7a6:	80 81       	ld	r24, Z
     7a8:	80 33       	cpi	r24, 0x30	; 48
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <vfprintf+0x61c>
     7ac:	29 7e       	andi	r18, 0xE9	; 233
     7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <vfprintf+0x62e>
     7b0:	22 ff       	sbrs	r18, 2
     7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <vfprintf+0x62c>
     7b4:	d3 94       	inc	r13
     7b6:	d3 94       	inc	r13
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <vfprintf+0x62e>
     7ba:	82 2f       	mov	r24, r18
     7bc:	86 78       	andi	r24, 0x86	; 134
     7be:	09 f0       	breq	.+2      	; 0x7c2 <vfprintf+0x62e>
     7c0:	d3 94       	inc	r13
     7c2:	23 fd       	sbrc	r18, 3
     7c4:	13 c0       	rjmp	.+38     	; 0x7ec <vfprintf+0x658>
     7c6:	20 ff       	sbrs	r18, 0
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <vfprintf+0x642>
     7ca:	1c 2d       	mov	r17, r12
     7cc:	d5 14       	cp	r13, r5
     7ce:	18 f4       	brcc	.+6      	; 0x7d6 <vfprintf+0x642>
     7d0:	15 0d       	add	r17, r5
     7d2:	1d 19       	sub	r17, r13
     7d4:	d5 2c       	mov	r13, r5
     7d6:	d5 14       	cp	r13, r5
     7d8:	68 f4       	brcc	.+26     	; 0x7f4 <vfprintf+0x660>
     7da:	b7 01       	movw	r22, r14
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	2b 8b       	std	Y+19, r18	; 0x13
     7e2:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     7e6:	d3 94       	inc	r13
     7e8:	2b 89       	ldd	r18, Y+19	; 0x13
     7ea:	f5 cf       	rjmp	.-22     	; 0x7d6 <vfprintf+0x642>
     7ec:	d5 14       	cp	r13, r5
     7ee:	10 f4       	brcc	.+4      	; 0x7f4 <vfprintf+0x660>
     7f0:	5d 18       	sub	r5, r13
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <vfprintf+0x662>
     7f4:	51 2c       	mov	r5, r1
     7f6:	24 ff       	sbrs	r18, 4
     7f8:	12 c0       	rjmp	.+36     	; 0x81e <vfprintf+0x68a>
     7fa:	b7 01       	movw	r22, r14
     7fc:	80 e3       	ldi	r24, 0x30	; 48
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	2b 8b       	std	Y+19, r18	; 0x13
     802:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     806:	2b 89       	ldd	r18, Y+19	; 0x13
     808:	22 ff       	sbrs	r18, 2
     80a:	17 c0       	rjmp	.+46     	; 0x83a <vfprintf+0x6a6>
     80c:	21 ff       	sbrs	r18, 1
     80e:	03 c0       	rjmp	.+6      	; 0x816 <vfprintf+0x682>
     810:	88 e5       	ldi	r24, 0x58	; 88
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	02 c0       	rjmp	.+4      	; 0x81a <vfprintf+0x686>
     816:	88 e7       	ldi	r24, 0x78	; 120
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	b7 01       	movw	r22, r14
     81c:	0c c0       	rjmp	.+24     	; 0x836 <vfprintf+0x6a2>
     81e:	82 2f       	mov	r24, r18
     820:	86 78       	andi	r24, 0x86	; 134
     822:	59 f0       	breq	.+22     	; 0x83a <vfprintf+0x6a6>
     824:	21 fd       	sbrc	r18, 1
     826:	02 c0       	rjmp	.+4      	; 0x82c <vfprintf+0x698>
     828:	80 e2       	ldi	r24, 0x20	; 32
     82a:	01 c0       	rjmp	.+2      	; 0x82e <vfprintf+0x69a>
     82c:	8b e2       	ldi	r24, 0x2B	; 43
     82e:	27 fd       	sbrc	r18, 7
     830:	8d e2       	ldi	r24, 0x2D	; 45
     832:	b7 01       	movw	r22, r14
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     83a:	c1 16       	cp	r12, r17
     83c:	38 f4       	brcc	.+14     	; 0x84c <vfprintf+0x6b8>
     83e:	b7 01       	movw	r22, r14
     840:	80 e3       	ldi	r24, 0x30	; 48
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     848:	11 50       	subi	r17, 0x01	; 1
     84a:	f7 cf       	rjmp	.-18     	; 0x83a <vfprintf+0x6a6>
     84c:	ca 94       	dec	r12
     84e:	f4 01       	movw	r30, r8
     850:	ec 0d       	add	r30, r12
     852:	f1 1d       	adc	r31, r1
     854:	80 81       	ld	r24, Z
     856:	b7 01       	movw	r22, r14
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     85e:	c1 10       	cpse	r12, r1
     860:	f5 cf       	rjmp	.-22     	; 0x84c <vfprintf+0x6b8>
     862:	55 20       	and	r5, r5
     864:	09 f4       	brne	.+2      	; 0x868 <__stack+0x9>
     866:	c2 cc       	rjmp	.-1660   	; 0x1ec <vfprintf+0x58>
     868:	b7 01       	movw	r22, r14
     86a:	80 e2       	ldi	r24, 0x20	; 32
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <fputc>
     872:	5a 94       	dec	r5
     874:	f6 cf       	rjmp	.-20     	; 0x862 <__stack+0x3>
     876:	f7 01       	movw	r30, r14
     878:	86 81       	ldd	r24, Z+6	; 0x06
     87a:	97 81       	ldd	r25, Z+7	; 0x07
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	9f ef       	ldi	r25, 0xFF	; 255
     882:	63 96       	adiw	r28, 0x13	; 19
     884:	e2 e1       	ldi	r30, 0x12	; 18
     886:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__>

0000088a <lcdinit>:
 */

#include "LCD.h"

void lcdinit()
{
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	ce 57       	subi	r28, 0x7E	; 126
     898:	d1 09       	sbc	r29, r1
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;

	LCD_DDR = 0xFF;
     8a4:	8a e3       	ldi	r24, 0x3A	; 58
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	2f ef       	ldi	r18, 0xFF	; 255
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
	LCD_PORT = 0;
     8ae:	8b e3       	ldi	r24, 0x3B	; 59
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	fc 01       	movw	r30, r24
     8b4:	10 82       	st	Z, r1
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	a8 e4       	ldi	r26, 0x48	; 72
     8bc:	b2 e4       	ldi	r27, 0x42	; 66
     8be:	8a 83       	std	Y+2, r24	; 0x02
     8c0:	9b 83       	std	Y+3, r25	; 0x03
     8c2:	ac 83       	std	Y+4, r26	; 0x04
     8c4:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8c6:	2d ec       	ldi	r18, 0xCD	; 205
     8c8:	3c ec       	ldi	r19, 0xCC	; 204
     8ca:	4c e2       	ldi	r20, 0x2C	; 44
     8cc:	55 e4       	ldi	r21, 0x45	; 69
     8ce:	6a 81       	ldd	r22, Y+2	; 0x02
     8d0:	7b 81       	ldd	r23, Y+3	; 0x03
     8d2:	8c 81       	ldd	r24, Y+4	; 0x04
     8d4:	9d 81       	ldd	r25, Y+5	; 0x05
     8d6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	8e 83       	std	Y+6, r24	; 0x06
     8e0:	9f 83       	std	Y+7, r25	; 0x07
     8e2:	a8 87       	std	Y+8, r26	; 0x08
     8e4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e8       	ldi	r20, 0x80	; 128
     8ec:	5f e3       	ldi	r21, 0x3F	; 63
     8ee:	6e 81       	ldd	r22, Y+6	; 0x06
     8f0:	7f 81       	ldd	r23, Y+7	; 0x07
     8f2:	88 85       	ldd	r24, Y+8	; 0x08
     8f4:	99 85       	ldd	r25, Y+9	; 0x09
     8f6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
     8fa:	88 23       	and	r24, r24
     8fc:	2c f4       	brge	.+10     	; 0x908 <lcdinit+0x7e>
		__ticks = 1;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	9b 87       	std	Y+11, r25	; 0x0b
     904:	8a 87       	std	Y+10, r24	; 0x0a
     906:	3f c0       	rjmp	.+126    	; 0x986 <lcdinit+0xfc>
	else if (__tmp > 65535)
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	3f ef       	ldi	r19, 0xFF	; 255
     90c:	4f e7       	ldi	r20, 0x7F	; 127
     90e:	57 e4       	ldi	r21, 0x47	; 71
     910:	6e 81       	ldd	r22, Y+6	; 0x06
     912:	7f 81       	ldd	r23, Y+7	; 0x07
     914:	88 85       	ldd	r24, Y+8	; 0x08
     916:	99 85       	ldd	r25, Y+9	; 0x09
     918:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
     91c:	18 16       	cp	r1, r24
     91e:	4c f5       	brge	.+82     	; 0x972 <lcdinit+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e2       	ldi	r20, 0x20	; 32
     926:	51 e4       	ldi	r21, 0x41	; 65
     928:	6a 81       	ldd	r22, Y+2	; 0x02
     92a:	7b 81       	ldd	r23, Y+3	; 0x03
     92c:	8c 81       	ldd	r24, Y+4	; 0x04
     92e:	9d 81       	ldd	r25, Y+5	; 0x05
     930:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     934:	dc 01       	movw	r26, r24
     936:	cb 01       	movw	r24, r22
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	9b 87       	std	Y+11, r25	; 0x0b
     946:	8a 87       	std	Y+10, r24	; 0x0a
     948:	0f c0       	rjmp	.+30     	; 0x968 <lcdinit+0xde>
     94a:	84 e1       	ldi	r24, 0x14	; 20
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	9d 87       	std	Y+13, r25	; 0x0d
     950:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     952:	8c 85       	ldd	r24, Y+12	; 0x0c
     954:	9d 85       	ldd	r25, Y+13	; 0x0d
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	f1 f7       	brne	.-4      	; 0x956 <lcdinit+0xcc>
     95a:	9d 87       	std	Y+13, r25	; 0x0d
     95c:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95e:	8a 85       	ldd	r24, Y+10	; 0x0a
     960:	9b 85       	ldd	r25, Y+11	; 0x0b
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	9b 87       	std	Y+11, r25	; 0x0b
     966:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     968:	8a 85       	ldd	r24, Y+10	; 0x0a
     96a:	9b 85       	ldd	r25, Y+11	; 0x0b
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	69 f7       	brne	.-38     	; 0x94a <lcdinit+0xc0>
     970:	14 c0       	rjmp	.+40     	; 0x99a <lcdinit+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     972:	6e 81       	ldd	r22, Y+6	; 0x06
     974:	7f 81       	ldd	r23, Y+7	; 0x07
     976:	88 85       	ldd	r24, Y+8	; 0x08
     978:	99 85       	ldd	r25, Y+9	; 0x09
     97a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	9b 87       	std	Y+11, r25	; 0x0b
     984:	8a 87       	std	Y+10, r24	; 0x0a
     986:	8a 85       	ldd	r24, Y+10	; 0x0a
     988:	9b 85       	ldd	r25, Y+11	; 0x0b
     98a:	9f 87       	std	Y+15, r25	; 0x0f
     98c:	8e 87       	std	Y+14, r24	; 0x0e
     98e:	8e 85       	ldd	r24, Y+14	; 0x0e
     990:	9f 85       	ldd	r25, Y+15	; 0x0f
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <lcdinit+0x108>
     996:	9f 87       	std	Y+15, r25	; 0x0f
     998:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(50);
	LCD_PORT &= ~(1<<LCD_RS);
     99a:	8b e3       	ldi	r24, 0x3B	; 59
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	2b e3       	ldi	r18, 0x3B	; 59
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	f9 01       	movw	r30, r18
     9a4:	20 81       	ld	r18, Z
     9a6:	2b 7f       	andi	r18, 0xFB	; 251
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
	for(i=0; i<3; i++)
     9ac:	19 82       	std	Y+1, r1	; 0x01
     9ae:	84 c1       	rjmp	.+776    	; 0xcb8 <lcdinit+0x42e>
	{
		LCD_PORT |= (1<<LCD_E);
     9b0:	8b e3       	ldi	r24, 0x3B	; 59
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	2b e3       	ldi	r18, 0x3B	; 59
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	f9 01       	movw	r30, r18
     9ba:	20 81       	ld	r18, Z
     9bc:	28 60       	ori	r18, 0x08	; 8
     9be:	fc 01       	movw	r30, r24
     9c0:	20 83       	st	Z, r18
		LCD_PORT = (LCD_PORT & 0b00001111) | 0b00110000;
     9c2:	8b e3       	ldi	r24, 0x3B	; 59
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	2b e3       	ldi	r18, 0x3B	; 59
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	f9 01       	movw	r30, r18
     9cc:	20 81       	ld	r18, Z
     9ce:	2f 70       	andi	r18, 0x0F	; 15
     9d0:	20 63       	ori	r18, 0x30	; 48
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e8       	ldi	r26, 0x80	; 128
     9dc:	bf e3       	ldi	r27, 0x3F	; 63
     9de:	88 8b       	std	Y+16, r24	; 0x10
     9e0:	99 8b       	std	Y+17, r25	; 0x11
     9e2:	aa 8b       	std	Y+18, r26	; 0x12
     9e4:	bb 8b       	std	Y+19, r27	; 0x13
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     9e6:	2a ef       	ldi	r18, 0xFA	; 250
     9e8:	3d ee       	ldi	r19, 0xED	; 237
     9ea:	4b e6       	ldi	r20, 0x6B	; 107
     9ec:	50 e4       	ldi	r21, 0x40	; 64
     9ee:	68 89       	ldd	r22, Y+16	; 0x10
     9f0:	79 89       	ldd	r23, Y+17	; 0x11
     9f2:	8a 89       	ldd	r24, Y+18	; 0x12
     9f4:	9b 89       	ldd	r25, Y+19	; 0x13
     9f6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	8c 8b       	std	Y+20, r24	; 0x14
     a00:	9d 8b       	std	Y+21, r25	; 0x15
     a02:	ae 8b       	std	Y+22, r26	; 0x16
     a04:	bf 8b       	std	Y+23, r27	; 0x17
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a06:	2c e7       	ldi	r18, 0x7C	; 124
     a08:	32 ef       	ldi	r19, 0xF2	; 242
     a0a:	40 e3       	ldi	r20, 0x30	; 48
     a0c:	50 e4       	ldi	r21, 0x40	; 64
     a0e:	68 89       	ldd	r22, Y+16	; 0x10
     a10:	79 89       	ldd	r23, Y+17	; 0x11
     a12:	8a 89       	ldd	r24, Y+18	; 0x12
     a14:	9b 89       	ldd	r25, Y+19	; 0x13
     a16:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	88 8f       	std	Y+24, r24	; 0x18
     a20:	99 8f       	std	Y+25, r25	; 0x19
     a22:	aa 8f       	std	Y+26, r26	; 0x1a
     a24:	bb 8f       	std	Y+27, r27	; 0x1b
	if (__tmp < 1.0)
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e8       	ldi	r20, 0x80	; 128
     a2c:	5f e3       	ldi	r21, 0x3F	; 63
     a2e:	6c 89       	ldd	r22, Y+20	; 0x14
     a30:	7d 89       	ldd	r23, Y+21	; 0x15
     a32:	8e 89       	ldd	r24, Y+22	; 0x16
     a34:	9f 89       	ldd	r25, Y+23	; 0x17
     a36:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
     a3a:	88 23       	and	r24, r24
     a3c:	1c f4       	brge	.+6      	; 0xa44 <lcdinit+0x1ba>
		__ticks = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	8c 8f       	std	Y+28, r24	; 0x1c
     a42:	b6 c0       	rjmp	.+364    	; 0xbb0 <lcdinit+0x326>
	else if (__tmp2 > 65535)
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	3f ef       	ldi	r19, 0xFF	; 255
     a48:	4f e7       	ldi	r20, 0x7F	; 127
     a4a:	57 e4       	ldi	r21, 0x47	; 71
     a4c:	68 8d       	ldd	r22, Y+24	; 0x18
     a4e:	79 8d       	ldd	r23, Y+25	; 0x19
     a50:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a52:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a54:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
     a58:	18 16       	cp	r1, r24
     a5a:	0c f0       	brlt	.+2      	; 0xa5e <lcdinit+0x1d4>
     a5c:	7f c0       	rjmp	.+254    	; 0xb5c <lcdinit+0x2d2>
	{
		_delay_ms(__us / 1000.0);
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	4a e7       	ldi	r20, 0x7A	; 122
     a64:	54 e4       	ldi	r21, 0x44	; 68
     a66:	68 89       	ldd	r22, Y+16	; 0x10
     a68:	79 89       	ldd	r23, Y+17	; 0x11
     a6a:	8a 89       	ldd	r24, Y+18	; 0x12
     a6c:	9b 89       	ldd	r25, Y+19	; 0x13
     a6e:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	8d 8f       	std	Y+29, r24	; 0x1d
     a78:	9e 8f       	std	Y+30, r25	; 0x1e
     a7a:	af 8f       	std	Y+31, r26	; 0x1f
     a7c:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a7e:	2d ec       	ldi	r18, 0xCD	; 205
     a80:	3c ec       	ldi	r19, 0xCC	; 204
     a82:	4c e2       	ldi	r20, 0x2C	; 44
     a84:	55 e4       	ldi	r21, 0x45	; 69
     a86:	6d 8d       	ldd	r22, Y+29	; 0x1d
     a88:	7e 8d       	ldd	r23, Y+30	; 0x1e
     a8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a8c:	98 a1       	ldd	r25, Y+32	; 0x20
     a8e:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	89 a3       	std	Y+33, r24	; 0x21
     a98:	9a a3       	std	Y+34, r25	; 0x22
     a9a:	ab a3       	std	Y+35, r26	; 0x23
     a9c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e8       	ldi	r20, 0x80	; 128
     aa4:	5f e3       	ldi	r21, 0x3F	; 63
     aa6:	69 a1       	ldd	r22, Y+33	; 0x21
     aa8:	7a a1       	ldd	r23, Y+34	; 0x22
     aaa:	8b a1       	ldd	r24, Y+35	; 0x23
     aac:	9c a1       	ldd	r25, Y+36	; 0x24
     aae:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
     ab2:	88 23       	and	r24, r24
     ab4:	2c f4       	brge	.+10     	; 0xac0 <lcdinit+0x236>
		__ticks = 1;
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	9e a3       	std	Y+38, r25	; 0x26
     abc:	8d a3       	std	Y+37, r24	; 0x25
     abe:	41 c0       	rjmp	.+130    	; 0xb42 <lcdinit+0x2b8>
	else if (__tmp > 65535)
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	3f ef       	ldi	r19, 0xFF	; 255
     ac4:	4f e7       	ldi	r20, 0x7F	; 127
     ac6:	57 e4       	ldi	r21, 0x47	; 71
     ac8:	69 a1       	ldd	r22, Y+33	; 0x21
     aca:	7a a1       	ldd	r23, Y+34	; 0x22
     acc:	8b a1       	ldd	r24, Y+35	; 0x23
     ace:	9c a1       	ldd	r25, Y+36	; 0x24
     ad0:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
     ad4:	18 16       	cp	r1, r24
     ad6:	5c f5       	brge	.+86     	; 0xb2e <lcdinit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e2       	ldi	r20, 0x20	; 32
     ade:	51 e4       	ldi	r21, 0x41	; 65
     ae0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ae2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ae6:	98 a1       	ldd	r25, Y+32	; 0x20
     ae8:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	bc 01       	movw	r22, r24
     af2:	cd 01       	movw	r24, r26
     af4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	9e a3       	std	Y+38, r25	; 0x26
     afe:	8d a3       	std	Y+37, r24	; 0x25
     b00:	0f c0       	rjmp	.+30     	; 0xb20 <lcdinit+0x296>
     b02:	84 e1       	ldi	r24, 0x14	; 20
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	98 a7       	std	Y+40, r25	; 0x28
     b08:	8f a3       	std	Y+39, r24	; 0x27
     b0a:	8f a1       	ldd	r24, Y+39	; 0x27
     b0c:	98 a5       	ldd	r25, Y+40	; 0x28
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <lcdinit+0x284>
     b12:	98 a7       	std	Y+40, r25	; 0x28
     b14:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b16:	8d a1       	ldd	r24, Y+37	; 0x25
     b18:	9e a1       	ldd	r25, Y+38	; 0x26
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	9e a3       	std	Y+38, r25	; 0x26
     b1e:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b20:	8d a1       	ldd	r24, Y+37	; 0x25
     b22:	9e a1       	ldd	r25, Y+38	; 0x26
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	69 f7       	brne	.-38     	; 0xb02 <lcdinit+0x278>
     b28:	88 a9       	ldd	r24, Y+48	; 0x30
     b2a:	8c 8f       	std	Y+28, r24	; 0x1c
     b2c:	41 c0       	rjmp	.+130    	; 0xbb0 <lcdinit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b2e:	69 a1       	ldd	r22, Y+33	; 0x21
     b30:	7a a1       	ldd	r23, Y+34	; 0x22
     b32:	8b a1       	ldd	r24, Y+35	; 0x23
     b34:	9c a1       	ldd	r25, Y+36	; 0x24
     b36:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	9e a3       	std	Y+38, r25	; 0x26
     b40:	8d a3       	std	Y+37, r24	; 0x25
     b42:	8d a1       	ldd	r24, Y+37	; 0x25
     b44:	9e a1       	ldd	r25, Y+38	; 0x26
     b46:	9a a7       	std	Y+42, r25	; 0x2a
     b48:	89 a7       	std	Y+41, r24	; 0x29
     b4a:	89 a5       	ldd	r24, Y+41	; 0x29
     b4c:	9a a5       	ldd	r25, Y+42	; 0x2a
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <lcdinit+0x2c4>
     b52:	9a a7       	std	Y+42, r25	; 0x2a
     b54:	89 a7       	std	Y+41, r24	; 0x29
     b56:	88 a9       	ldd	r24, Y+48	; 0x30
     b58:	8c 8f       	std	Y+28, r24	; 0x1c
     b5a:	2a c0       	rjmp	.+84     	; 0xbb0 <lcdinit+0x326>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	4f e7       	ldi	r20, 0x7F	; 127
     b62:	53 e4       	ldi	r21, 0x43	; 67
     b64:	6c 89       	ldd	r22, Y+20	; 0x14
     b66:	7d 89       	ldd	r23, Y+21	; 0x15
     b68:	8e 89       	ldd	r24, Y+22	; 0x16
     b6a:	9f 89       	ldd	r25, Y+23	; 0x17
     b6c:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
     b70:	18 16       	cp	r1, r24
     b72:	ac f4       	brge	.+42     	; 0xb9e <lcdinit+0x314>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b74:	68 8d       	ldd	r22, Y+24	; 0x18
     b76:	79 8d       	ldd	r23, Y+25	; 0x19
     b78:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b7a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b7c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	9c a7       	std	Y+44, r25	; 0x2c
     b86:	8b a7       	std	Y+43, r24	; 0x2b
     b88:	8b a5       	ldd	r24, Y+43	; 0x2b
     b8a:	9c a5       	ldd	r25, Y+44	; 0x2c
     b8c:	9e a7       	std	Y+46, r25	; 0x2e
     b8e:	8d a7       	std	Y+45, r24	; 0x2d
     b90:	8d a5       	ldd	r24, Y+45	; 0x2d
     b92:	9e a5       	ldd	r25, Y+46	; 0x2e
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <lcdinit+0x30a>
     b98:	9e a7       	std	Y+46, r25	; 0x2e
     b9a:	8d a7       	std	Y+45, r24	; 0x2d
     b9c:	0f c0       	rjmp	.+30     	; 0xbbc <lcdinit+0x332>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b9e:	6c 89       	ldd	r22, Y+20	; 0x14
     ba0:	7d 89       	ldd	r23, Y+21	; 0x15
     ba2:	8e 89       	ldd	r24, Y+22	; 0x16
     ba4:	9f 89       	ldd	r25, Y+23	; 0x17
     ba6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8c 8f       	std	Y+28, r24	; 0x1c
     bb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bb2:	8f a7       	std	Y+47, r24	; 0x2f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bb4:	8f a5       	ldd	r24, Y+47	; 0x2f
     bb6:	8a 95       	dec	r24
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <lcdinit+0x32c>
     bba:	8f a7       	std	Y+47, r24	; 0x2f
		_delay_us(1);
		LCD_PORT &= ~(1<<LCD_E);
     bbc:	8b e3       	ldi	r24, 0x3B	; 59
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	2b e3       	ldi	r18, 0x3B	; 59
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	f9 01       	movw	r30, r18
     bc6:	20 81       	ld	r18, Z
     bc8:	27 7f       	andi	r18, 0xF7	; 247
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a0 ea       	ldi	r26, 0xA0	; 160
     bd4:	b0 e4       	ldi	r27, 0x40	; 64
     bd6:	89 ab       	std	Y+49, r24	; 0x31
     bd8:	9a ab       	std	Y+50, r25	; 0x32
     bda:	ab ab       	std	Y+51, r26	; 0x33
     bdc:	bc ab       	std	Y+52, r27	; 0x34

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bde:	2d ec       	ldi	r18, 0xCD	; 205
     be0:	3c ec       	ldi	r19, 0xCC	; 204
     be2:	4c e2       	ldi	r20, 0x2C	; 44
     be4:	55 e4       	ldi	r21, 0x45	; 69
     be6:	69 a9       	ldd	r22, Y+49	; 0x31
     be8:	7a a9       	ldd	r23, Y+50	; 0x32
     bea:	8b a9       	ldd	r24, Y+51	; 0x33
     bec:	9c a9       	ldd	r25, Y+52	; 0x34
     bee:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	8d ab       	std	Y+53, r24	; 0x35
     bf8:	9e ab       	std	Y+54, r25	; 0x36
     bfa:	af ab       	std	Y+55, r26	; 0x37
     bfc:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e8       	ldi	r20, 0x80	; 128
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	6d a9       	ldd	r22, Y+53	; 0x35
     c08:	7e a9       	ldd	r23, Y+54	; 0x36
     c0a:	8f a9       	ldd	r24, Y+55	; 0x37
     c0c:	98 ad       	ldd	r25, Y+56	; 0x38
     c0e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
     c12:	88 23       	and	r24, r24
     c14:	2c f4       	brge	.+10     	; 0xc20 <lcdinit+0x396>
		__ticks = 1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9a af       	std	Y+58, r25	; 0x3a
     c1c:	89 af       	std	Y+57, r24	; 0x39
     c1e:	3f c0       	rjmp	.+126    	; 0xc9e <lcdinit+0x414>
	else if (__tmp > 65535)
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	57 e4       	ldi	r21, 0x47	; 71
     c28:	6d a9       	ldd	r22, Y+53	; 0x35
     c2a:	7e a9       	ldd	r23, Y+54	; 0x36
     c2c:	8f a9       	ldd	r24, Y+55	; 0x37
     c2e:	98 ad       	ldd	r25, Y+56	; 0x38
     c30:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
     c34:	18 16       	cp	r1, r24
     c36:	4c f5       	brge	.+82     	; 0xc8a <lcdinit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e2       	ldi	r20, 0x20	; 32
     c3e:	51 e4       	ldi	r21, 0x41	; 65
     c40:	69 a9       	ldd	r22, Y+49	; 0x31
     c42:	7a a9       	ldd	r23, Y+50	; 0x32
     c44:	8b a9       	ldd	r24, Y+51	; 0x33
     c46:	9c a9       	ldd	r25, Y+52	; 0x34
     c48:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9a af       	std	Y+58, r25	; 0x3a
     c5e:	89 af       	std	Y+57, r24	; 0x39
     c60:	0f c0       	rjmp	.+30     	; 0xc80 <lcdinit+0x3f6>
     c62:	84 e1       	ldi	r24, 0x14	; 20
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	9c af       	std	Y+60, r25	; 0x3c
     c68:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c6a:	8b ad       	ldd	r24, Y+59	; 0x3b
     c6c:	9c ad       	ldd	r25, Y+60	; 0x3c
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <lcdinit+0x3e4>
     c72:	9c af       	std	Y+60, r25	; 0x3c
     c74:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c76:	89 ad       	ldd	r24, Y+57	; 0x39
     c78:	9a ad       	ldd	r25, Y+58	; 0x3a
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	9a af       	std	Y+58, r25	; 0x3a
     c7e:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c80:	89 ad       	ldd	r24, Y+57	; 0x39
     c82:	9a ad       	ldd	r25, Y+58	; 0x3a
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	69 f7       	brne	.-38     	; 0xc62 <lcdinit+0x3d8>
     c88:	14 c0       	rjmp	.+40     	; 0xcb2 <lcdinit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8a:	6d a9       	ldd	r22, Y+53	; 0x35
     c8c:	7e a9       	ldd	r23, Y+54	; 0x36
     c8e:	8f a9       	ldd	r24, Y+55	; 0x37
     c90:	98 ad       	ldd	r25, Y+56	; 0x38
     c92:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9a af       	std	Y+58, r25	; 0x3a
     c9c:	89 af       	std	Y+57, r24	; 0x39
     c9e:	89 ad       	ldd	r24, Y+57	; 0x39
     ca0:	9a ad       	ldd	r25, Y+58	; 0x3a
     ca2:	9e af       	std	Y+62, r25	; 0x3e
     ca4:	8d af       	std	Y+61, r24	; 0x3d
     ca6:	8d ad       	ldd	r24, Y+61	; 0x3d
     ca8:	9e ad       	ldd	r25, Y+62	; 0x3e
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <lcdinit+0x420>
     cae:	9e af       	std	Y+62, r25	; 0x3e
     cb0:	8d af       	std	Y+61, r24	; 0x3d

	LCD_DDR = 0xFF;
	LCD_PORT = 0;
	_delay_ms(50);
	LCD_PORT &= ~(1<<LCD_RS);
	for(i=0; i<3; i++)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	89 83       	std	Y+1, r24	; 0x01
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	08 f4       	brcc	.+2      	; 0xcc0 <lcdinit+0x436>
     cbe:	78 ce       	rjmp	.-784    	; 0x9b0 <lcdinit+0x126>
		LCD_PORT = (LCD_PORT & 0b00001111) | 0b00110000;
		_delay_us(1);
		LCD_PORT &= ~(1<<LCD_E);
		_delay_ms(5);
	}
	LCD_PORT |= (1<<LCD_E);
     cc0:	8b e3       	ldi	r24, 0x3B	; 59
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	2b e3       	ldi	r18, 0x3B	; 59
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	f9 01       	movw	r30, r18
     cca:	20 81       	ld	r18, Z
     ccc:	28 60       	ori	r18, 0x08	; 8
     cce:	fc 01       	movw	r30, r24
     cd0:	20 83       	st	Z, r18
	LCD_PORT = (LCD_PORT & 0b00001111) | 0b00100000;
     cd2:	8b e3       	ldi	r24, 0x3B	; 59
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	2b e3       	ldi	r18, 0x3B	; 59
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	f9 01       	movw	r30, r18
     cdc:	20 81       	ld	r18, Z
     cde:	2f 70       	andi	r18, 0x0F	; 15
     ce0:	20 62       	ori	r18, 0x20	; 32
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
     ce6:	9e 01       	movw	r18, r28
     ce8:	21 5c       	subi	r18, 0xC1	; 193
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	a0 e8       	ldi	r26, 0x80	; 128
     cf2:	bf e3       	ldi	r27, 0x3F	; 63
     cf4:	f9 01       	movw	r30, r18
     cf6:	80 83       	st	Z, r24
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	a2 83       	std	Z+2, r26	; 0x02
     cfc:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     cfe:	8e 01       	movw	r16, r28
     d00:	0d 5b       	subi	r16, 0xBD	; 189
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	ce 01       	movw	r24, r28
     d06:	cf 96       	adiw	r24, 0x3f	; 63
     d08:	2a ef       	ldi	r18, 0xFA	; 250
     d0a:	3d ee       	ldi	r19, 0xED	; 237
     d0c:	4b e6       	ldi	r20, 0x6B	; 107
     d0e:	50 e4       	ldi	r21, 0x40	; 64
     d10:	fc 01       	movw	r30, r24
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	f8 01       	movw	r30, r16
     d24:	80 83       	st	Z, r24
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	a2 83       	std	Z+2, r26	; 0x02
     d2a:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d2c:	8e 01       	movw	r16, r28
     d2e:	09 5b       	subi	r16, 0xB9	; 185
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	ce 01       	movw	r24, r28
     d34:	cf 96       	adiw	r24, 0x3f	; 63
     d36:	2c e7       	ldi	r18, 0x7C	; 124
     d38:	32 ef       	ldi	r19, 0xF2	; 242
     d3a:	40 e3       	ldi	r20, 0x30	; 48
     d3c:	50 e4       	ldi	r21, 0x40	; 64
     d3e:	fc 01       	movw	r30, r24
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	f8 01       	movw	r30, r16
     d52:	80 83       	st	Z, r24
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	a2 83       	std	Z+2, r26	; 0x02
     d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d5a:	ce 01       	movw	r24, r28
     d5c:	8d 5b       	subi	r24, 0xBD	; 189
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	fc 01       	movw	r30, r24
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	93 81       	ldd	r25, Z+3	; 0x03
     d72:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
     d76:	88 23       	and	r24, r24
     d78:	3c f4       	brge	.+14     	; 0xd88 <lcdinit+0x4fe>
		__ticks = 1;
     d7a:	ce 01       	movw	r24, r28
     d7c:	85 5b       	subi	r24, 0xB5	; 181
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	fc 01       	movw	r30, r24
     d84:	20 83       	st	Z, r18
     d86:	2f c1       	rjmp	.+606    	; 0xfe6 <lcdinit+0x75c>
	else if (__tmp2 > 65535)
     d88:	ce 01       	movw	r24, r28
     d8a:	89 5b       	subi	r24, 0xB9	; 185
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	fc 01       	movw	r30, r24
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
     da4:	18 16       	cp	r1, r24
     da6:	0c f0       	brlt	.+2      	; 0xdaa <lcdinit+0x520>
     da8:	d0 c0       	rjmp	.+416    	; 0xf4a <lcdinit+0x6c0>
	{
		_delay_ms(__us / 1000.0);
     daa:	ce 01       	movw	r24, r28
     dac:	cf 96       	adiw	r24, 0x3f	; 63
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	4a e7       	ldi	r20, 0x7A	; 122
     db4:	54 e4       	ldi	r21, 0x44	; 68
     db6:	fc 01       	movw	r30, r24
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9e 01       	movw	r18, r28
     dca:	24 5b       	subi	r18, 0xB4	; 180
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	f9 01       	movw	r30, r18
     dd0:	80 83       	st	Z, r24
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	a2 83       	std	Z+2, r26	; 0x02
     dd6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	8e 01       	movw	r16, r28
     dda:	00 5b       	subi	r16, 0xB0	; 176
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	ce 01       	movw	r24, r28
     de0:	84 5b       	subi	r24, 0xB4	; 180
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	2d ec       	ldi	r18, 0xCD	; 205
     de6:	3c ec       	ldi	r19, 0xCC	; 204
     de8:	4c e2       	ldi	r20, 0x2C	; 44
     dea:	55 e4       	ldi	r21, 0x45	; 69
     dec:	fc 01       	movw	r30, r24
     dee:	60 81       	ld	r22, Z
     df0:	71 81       	ldd	r23, Z+1	; 0x01
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	f8 01       	movw	r30, r16
     e00:	80 83       	st	Z, r24
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	a2 83       	std	Z+2, r26	; 0x02
     e06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e08:	ce 01       	movw	r24, r28
     e0a:	80 5b       	subi	r24, 0xB0	; 176
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	5f e3       	ldi	r21, 0x3F	; 63
     e16:	fc 01       	movw	r30, r24
     e18:	60 81       	ld	r22, Z
     e1a:	71 81       	ldd	r23, Z+1	; 0x01
     e1c:	82 81       	ldd	r24, Z+2	; 0x02
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
     e24:	88 23       	and	r24, r24
     e26:	4c f4       	brge	.+18     	; 0xe3a <lcdinit+0x5b0>
		__ticks = 1;
     e28:	ce 01       	movw	r24, r28
     e2a:	8c 5a       	subi	r24, 0xAC	; 172
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	21 e0       	ldi	r18, 0x01	; 1
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	fc 01       	movw	r30, r24
     e34:	31 83       	std	Z+1, r19	; 0x01
     e36:	20 83       	st	Z, r18
     e38:	6d c0       	rjmp	.+218    	; 0xf14 <lcdinit+0x68a>
	else if (__tmp > 65535)
     e3a:	ce 01       	movw	r24, r28
     e3c:	80 5b       	subi	r24, 0xB0	; 176
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	3f ef       	ldi	r19, 0xFF	; 255
     e44:	4f e7       	ldi	r20, 0x7F	; 127
     e46:	57 e4       	ldi	r21, 0x47	; 71
     e48:	fc 01       	movw	r30, r24
     e4a:	60 81       	ld	r22, Z
     e4c:	71 81       	ldd	r23, Z+1	; 0x01
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
     e56:	18 16       	cp	r1, r24
     e58:	0c f0       	brlt	.+2      	; 0xe5c <lcdinit+0x5d2>
     e5a:	4a c0       	rjmp	.+148    	; 0xef0 <lcdinit+0x666>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e5c:	ce 01       	movw	r24, r28
     e5e:	84 5b       	subi	r24, 0xB4	; 180
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e2       	ldi	r20, 0x20	; 32
     e68:	51 e4       	ldi	r21, 0x41	; 65
     e6a:	fc 01       	movw	r30, r24
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	8e 01       	movw	r16, r28
     e7e:	0c 5a       	subi	r16, 0xAC	; 172
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	f8 01       	movw	r30, r16
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
     e94:	24 c0       	rjmp	.+72     	; 0xede <lcdinit+0x654>
     e96:	ce 01       	movw	r24, r28
     e98:	8a 5a       	subi	r24, 0xAA	; 170
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	24 e1       	ldi	r18, 0x14	; 20
     e9e:	31 e0       	ldi	r19, 0x01	; 1
     ea0:	fc 01       	movw	r30, r24
     ea2:	31 83       	std	Z+1, r19	; 0x01
     ea4:	20 83       	st	Z, r18
     ea6:	ce 01       	movw	r24, r28
     ea8:	8a 5a       	subi	r24, 0xAA	; 170
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <lcdinit+0x628>
     eb6:	9e 01       	movw	r18, r28
     eb8:	2a 5a       	subi	r18, 0xAA	; 170
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	f9 01       	movw	r30, r18
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec2:	ce 01       	movw	r24, r28
     ec4:	8c 5a       	subi	r24, 0xAC	; 172
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	9e 01       	movw	r18, r28
     eca:	2c 5a       	subi	r18, 0xAC	; 172
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	f9 01       	movw	r30, r18
     ed0:	20 81       	ld	r18, Z
     ed2:	31 81       	ldd	r19, Z+1	; 0x01
     ed4:	21 50       	subi	r18, 0x01	; 1
     ed6:	31 09       	sbc	r19, r1
     ed8:	fc 01       	movw	r30, r24
     eda:	31 83       	std	Z+1, r19	; 0x01
     edc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ede:	ce 01       	movw	r24, r28
     ee0:	8c 5a       	subi	r24, 0xAC	; 172
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	fc 01       	movw	r30, r24
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	a1 f6       	brne	.-88     	; 0xe96 <lcdinit+0x60c>
     eee:	7b c0       	rjmp	.+246    	; 0xfe6 <lcdinit+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef0:	8e 01       	movw	r16, r28
     ef2:	0c 5a       	subi	r16, 0xAC	; 172
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	ce 01       	movw	r24, r28
     ef8:	80 5b       	subi	r24, 0xB0	; 176
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	fc 01       	movw	r30, r24
     efe:	60 81       	ld	r22, Z
     f00:	71 81       	ldd	r23, Z+1	; 0x01
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	93 81       	ldd	r25, Z+3	; 0x03
     f06:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	f8 01       	movw	r30, r16
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
     f14:	ce 01       	movw	r24, r28
     f16:	88 5a       	subi	r24, 0xA8	; 168
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	9e 01       	movw	r18, r28
     f1c:	2c 5a       	subi	r18, 0xAC	; 172
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	f9 01       	movw	r30, r18
     f22:	20 81       	ld	r18, Z
     f24:	31 81       	ldd	r19, Z+1	; 0x01
     f26:	fc 01       	movw	r30, r24
     f28:	31 83       	std	Z+1, r19	; 0x01
     f2a:	20 83       	st	Z, r18
     f2c:	ce 01       	movw	r24, r28
     f2e:	88 5a       	subi	r24, 0xA8	; 168
     f30:	9f 4f       	sbci	r25, 0xFF	; 255
     f32:	fc 01       	movw	r30, r24
     f34:	80 81       	ld	r24, Z
     f36:	91 81       	ldd	r25, Z+1	; 0x01
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <lcdinit+0x6ae>
     f3c:	9e 01       	movw	r18, r28
     f3e:	28 5a       	subi	r18, 0xA8	; 168
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	f9 01       	movw	r30, r18
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24
     f48:	4e c0       	rjmp	.+156    	; 0xfe6 <lcdinit+0x75c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f4a:	ce 01       	movw	r24, r28
     f4c:	8d 5b       	subi	r24, 0xBD	; 189
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	53 e4       	ldi	r21, 0x43	; 67
     f58:	fc 01       	movw	r30, r24
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
     f66:	18 16       	cp	r1, r24
     f68:	6c f5       	brge	.+90     	; 0xfc4 <lcdinit+0x73a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     f6a:	8e 01       	movw	r16, r28
     f6c:	06 5a       	subi	r16, 0xA6	; 166
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	ce 01       	movw	r24, r28
     f72:	89 5b       	subi	r24, 0xB9	; 185
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	fc 01       	movw	r30, r24
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	f8 01       	movw	r30, r16
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
     f8e:	ce 01       	movw	r24, r28
     f90:	84 5a       	subi	r24, 0xA4	; 164
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	9e 01       	movw	r18, r28
     f96:	26 5a       	subi	r18, 0xA6	; 166
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	f9 01       	movw	r30, r18
     f9c:	20 81       	ld	r18, Z
     f9e:	31 81       	ldd	r19, Z+1	; 0x01
     fa0:	fc 01       	movw	r30, r24
     fa2:	31 83       	std	Z+1, r19	; 0x01
     fa4:	20 83       	st	Z, r18
     fa6:	ce 01       	movw	r24, r28
     fa8:	84 5a       	subi	r24, 0xA4	; 164
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <lcdinit+0x728>
     fb6:	9e 01       	movw	r18, r28
     fb8:	24 5a       	subi	r18, 0xA4	; 164
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	f9 01       	movw	r30, r18
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24
     fc2:	28 c0       	rjmp	.+80     	; 0x1014 <lcdinit+0x78a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fc4:	8e 01       	movw	r16, r28
     fc6:	05 5b       	subi	r16, 0xB5	; 181
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
     fca:	ce 01       	movw	r24, r28
     fcc:	8d 5b       	subi	r24, 0xBD	; 189
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	fc 01       	movw	r30, r24
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	f8 01       	movw	r30, r16
     fe4:	80 83       	st	Z, r24
     fe6:	ce 01       	movw	r24, r28
     fe8:	82 5a       	subi	r24, 0xA2	; 162
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	9e 01       	movw	r18, r28
     fee:	25 5b       	subi	r18, 0xB5	; 181
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	f9 01       	movw	r30, r18
     ff4:	20 81       	ld	r18, Z
     ff6:	fc 01       	movw	r30, r24
     ff8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ffa:	ce 01       	movw	r24, r28
     ffc:	82 5a       	subi	r24, 0xA2	; 162
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	fc 01       	movw	r30, r24
    1002:	80 81       	ld	r24, Z
    1004:	28 2f       	mov	r18, r24
    1006:	2a 95       	dec	r18
    1008:	f1 f7       	brne	.-4      	; 0x1006 <lcdinit+0x77c>
    100a:	ce 01       	movw	r24, r28
    100c:	82 5a       	subi	r24, 0xA2	; 162
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
    1014:	8b e3       	ldi	r24, 0x3B	; 59
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	2b e3       	ldi	r18, 0x3B	; 59
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	f9 01       	movw	r30, r18
    101e:	20 81       	ld	r18, Z
    1020:	27 7f       	andi	r18, 0xF7	; 247
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
    1026:	9e 01       	movw	r18, r28
    1028:	21 5a       	subi	r18, 0xA1	; 161
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a8 ec       	ldi	r26, 0xC8	; 200
    1032:	b2 e4       	ldi	r27, 0x42	; 66
    1034:	f9 01       	movw	r30, r18
    1036:	80 83       	st	Z, r24
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	a2 83       	std	Z+2, r26	; 0x02
    103c:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    103e:	8e 01       	movw	r16, r28
    1040:	0d 59       	subi	r16, 0x9D	; 157
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	ce 01       	movw	r24, r28
    1046:	81 5a       	subi	r24, 0xA1	; 161
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	2a ef       	ldi	r18, 0xFA	; 250
    104c:	3d ee       	ldi	r19, 0xED	; 237
    104e:	4b e6       	ldi	r20, 0x6B	; 107
    1050:	50 e4       	ldi	r21, 0x40	; 64
    1052:	fc 01       	movw	r30, r24
    1054:	60 81       	ld	r22, Z
    1056:	71 81       	ldd	r23, Z+1	; 0x01
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	f8 01       	movw	r30, r16
    1066:	80 83       	st	Z, r24
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	a2 83       	std	Z+2, r26	; 0x02
    106c:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    106e:	8e 01       	movw	r16, r28
    1070:	09 59       	subi	r16, 0x99	; 153
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	ce 01       	movw	r24, r28
    1076:	81 5a       	subi	r24, 0xA1	; 161
    1078:	9f 4f       	sbci	r25, 0xFF	; 255
    107a:	2c e7       	ldi	r18, 0x7C	; 124
    107c:	32 ef       	ldi	r19, 0xF2	; 242
    107e:	40 e3       	ldi	r20, 0x30	; 48
    1080:	50 e4       	ldi	r21, 0x40	; 64
    1082:	fc 01       	movw	r30, r24
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	f8 01       	movw	r30, r16
    1096:	80 83       	st	Z, r24
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	a2 83       	std	Z+2, r26	; 0x02
    109c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    109e:	ce 01       	movw	r24, r28
    10a0:	8d 59       	subi	r24, 0x9D	; 157
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	fc 01       	movw	r30, r24
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    10ba:	88 23       	and	r24, r24
    10bc:	3c f4       	brge	.+14     	; 0x10cc <lcdinit+0x842>
		__ticks = 1;
    10be:	ce 01       	movw	r24, r28
    10c0:	85 59       	subi	r24, 0x95	; 149
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	21 e0       	ldi	r18, 0x01	; 1
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
    10ca:	30 c1       	rjmp	.+608    	; 0x132c <lcdinit+0xaa2>
	else if (__tmp2 > 65535)
    10cc:	ce 01       	movw	r24, r28
    10ce:	89 59       	subi	r24, 0x99	; 153
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	3f ef       	ldi	r19, 0xFF	; 255
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	57 e4       	ldi	r21, 0x47	; 71
    10da:	fc 01       	movw	r30, r24
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    10e8:	18 16       	cp	r1, r24
    10ea:	0c f0       	brlt	.+2      	; 0x10ee <lcdinit+0x864>
    10ec:	d1 c0       	rjmp	.+418    	; 0x1290 <lcdinit+0xa06>
	{
		_delay_ms(__us / 1000.0);
    10ee:	ce 01       	movw	r24, r28
    10f0:	81 5a       	subi	r24, 0xA1	; 161
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a e7       	ldi	r20, 0x7A	; 122
    10fa:	54 e4       	ldi	r21, 0x44	; 68
    10fc:	fc 01       	movw	r30, r24
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	9e 01       	movw	r18, r28
    1110:	24 59       	subi	r18, 0x94	; 148
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	f9 01       	movw	r30, r18
    1116:	80 83       	st	Z, r24
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	a2 83       	std	Z+2, r26	; 0x02
    111c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    111e:	8e 01       	movw	r16, r28
    1120:	00 59       	subi	r16, 0x90	; 144
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	ce 01       	movw	r24, r28
    1126:	84 59       	subi	r24, 0x94	; 148
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	2d ec       	ldi	r18, 0xCD	; 205
    112c:	3c ec       	ldi	r19, 0xCC	; 204
    112e:	4c e2       	ldi	r20, 0x2C	; 44
    1130:	55 e4       	ldi	r21, 0x45	; 69
    1132:	fc 01       	movw	r30, r24
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	f8 01       	movw	r30, r16
    1146:	80 83       	st	Z, r24
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	a2 83       	std	Z+2, r26	; 0x02
    114c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    114e:	ce 01       	movw	r24, r28
    1150:	80 59       	subi	r24, 0x90	; 144
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	fc 01       	movw	r30, r24
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    116a:	88 23       	and	r24, r24
    116c:	4c f4       	brge	.+18     	; 0x1180 <lcdinit+0x8f6>
		__ticks = 1;
    116e:	ce 01       	movw	r24, r28
    1170:	8c 58       	subi	r24, 0x8C	; 140
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	21 e0       	ldi	r18, 0x01	; 1
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	fc 01       	movw	r30, r24
    117a:	31 83       	std	Z+1, r19	; 0x01
    117c:	20 83       	st	Z, r18
    117e:	6d c0       	rjmp	.+218    	; 0x125a <lcdinit+0x9d0>
	else if (__tmp > 65535)
    1180:	ce 01       	movw	r24, r28
    1182:	80 59       	subi	r24, 0x90	; 144
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	3f ef       	ldi	r19, 0xFF	; 255
    118a:	4f e7       	ldi	r20, 0x7F	; 127
    118c:	57 e4       	ldi	r21, 0x47	; 71
    118e:	fc 01       	movw	r30, r24
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    119c:	18 16       	cp	r1, r24
    119e:	0c f0       	brlt	.+2      	; 0x11a2 <lcdinit+0x918>
    11a0:	4a c0       	rjmp	.+148    	; 0x1236 <lcdinit+0x9ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a2:	ce 01       	movw	r24, r28
    11a4:	84 59       	subi	r24, 0x94	; 148
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	fc 01       	movw	r30, r24
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	8e 01       	movw	r16, r28
    11c4:	0c 58       	subi	r16, 0x8C	; 140
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	f8 01       	movw	r30, r16
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	80 83       	st	Z, r24
    11da:	24 c0       	rjmp	.+72     	; 0x1224 <lcdinit+0x99a>
    11dc:	ce 01       	movw	r24, r28
    11de:	8a 58       	subi	r24, 0x8A	; 138
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	24 e1       	ldi	r18, 0x14	; 20
    11e4:	31 e0       	ldi	r19, 0x01	; 1
    11e6:	fc 01       	movw	r30, r24
    11e8:	31 83       	std	Z+1, r19	; 0x01
    11ea:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11ec:	ce 01       	movw	r24, r28
    11ee:	8a 58       	subi	r24, 0x8A	; 138
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	fc 01       	movw	r30, r24
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <lcdinit+0x96e>
    11fc:	9e 01       	movw	r18, r28
    11fe:	2a 58       	subi	r18, 0x8A	; 138
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	f9 01       	movw	r30, r18
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1208:	ce 01       	movw	r24, r28
    120a:	8c 58       	subi	r24, 0x8C	; 140
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	9e 01       	movw	r18, r28
    1210:	2c 58       	subi	r18, 0x8C	; 140
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	f9 01       	movw	r30, r18
    1216:	20 81       	ld	r18, Z
    1218:	31 81       	ldd	r19, Z+1	; 0x01
    121a:	21 50       	subi	r18, 0x01	; 1
    121c:	31 09       	sbc	r19, r1
    121e:	fc 01       	movw	r30, r24
    1220:	31 83       	std	Z+1, r19	; 0x01
    1222:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	ce 01       	movw	r24, r28
    1226:	8c 58       	subi	r24, 0x8C	; 140
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	fc 01       	movw	r30, r24
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	a1 f6       	brne	.-88     	; 0x11dc <lcdinit+0x952>
    1234:	7b c0       	rjmp	.+246    	; 0x132c <lcdinit+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1236:	8e 01       	movw	r16, r28
    1238:	0c 58       	subi	r16, 0x8C	; 140
    123a:	1f 4f       	sbci	r17, 0xFF	; 255
    123c:	ce 01       	movw	r24, r28
    123e:	80 59       	subi	r24, 0x90	; 144
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	fc 01       	movw	r30, r24
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	f8 01       	movw	r30, r16
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	ce 01       	movw	r24, r28
    125c:	88 58       	subi	r24, 0x88	; 136
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	9e 01       	movw	r18, r28
    1262:	2c 58       	subi	r18, 0x8C	; 140
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	f9 01       	movw	r30, r18
    1268:	20 81       	ld	r18, Z
    126a:	31 81       	ldd	r19, Z+1	; 0x01
    126c:	fc 01       	movw	r30, r24
    126e:	31 83       	std	Z+1, r19	; 0x01
    1270:	20 83       	st	Z, r18
    1272:	ce 01       	movw	r24, r28
    1274:	88 58       	subi	r24, 0x88	; 136
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	fc 01       	movw	r30, r24
    127a:	80 81       	ld	r24, Z
    127c:	91 81       	ldd	r25, Z+1	; 0x01
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <lcdinit+0x9f4>
    1282:	9e 01       	movw	r18, r28
    1284:	28 58       	subi	r18, 0x88	; 136
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	f9 01       	movw	r30, r18
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	4e c0       	rjmp	.+156    	; 0x132c <lcdinit+0xaa2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1290:	ce 01       	movw	r24, r28
    1292:	8d 59       	subi	r24, 0x9D	; 157
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4f e7       	ldi	r20, 0x7F	; 127
    129c:	53 e4       	ldi	r21, 0x43	; 67
    129e:	fc 01       	movw	r30, r24
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    12ac:	18 16       	cp	r1, r24
    12ae:	6c f5       	brge	.+90     	; 0x130a <lcdinit+0xa80>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    12b0:	8e 01       	movw	r16, r28
    12b2:	06 58       	subi	r16, 0x86	; 134
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	ce 01       	movw	r24, r28
    12b8:	89 59       	subi	r24, 0x99	; 153
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	fc 01       	movw	r30, r24
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	f8 01       	movw	r30, r16
    12d0:	91 83       	std	Z+1, r25	; 0x01
    12d2:	80 83       	st	Z, r24
    12d4:	ce 01       	movw	r24, r28
    12d6:	84 58       	subi	r24, 0x84	; 132
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	9e 01       	movw	r18, r28
    12dc:	26 58       	subi	r18, 0x86	; 134
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	f9 01       	movw	r30, r18
    12e2:	20 81       	ld	r18, Z
    12e4:	31 81       	ldd	r19, Z+1	; 0x01
    12e6:	fc 01       	movw	r30, r24
    12e8:	31 83       	std	Z+1, r19	; 0x01
    12ea:	20 83       	st	Z, r18
    12ec:	ce 01       	movw	r24, r28
    12ee:	84 58       	subi	r24, 0x84	; 132
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	fc 01       	movw	r30, r24
    12f4:	80 81       	ld	r24, Z
    12f6:	91 81       	ldd	r25, Z+1	; 0x01
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <lcdinit+0xa6e>
    12fc:	9e 01       	movw	r18, r28
    12fe:	24 58       	subi	r18, 0x84	; 132
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	f9 01       	movw	r30, r18
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24
    1308:	28 c0       	rjmp	.+80     	; 0x135a <lcdinit+0xad0>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    130a:	8e 01       	movw	r16, r28
    130c:	05 59       	subi	r16, 0x95	; 149
    130e:	1f 4f       	sbci	r17, 0xFF	; 255
    1310:	ce 01       	movw	r24, r28
    1312:	8d 59       	subi	r24, 0x9D	; 157
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	fc 01       	movw	r30, r24
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	f8 01       	movw	r30, r16
    132a:	80 83       	st	Z, r24
    132c:	ce 01       	movw	r24, r28
    132e:	82 58       	subi	r24, 0x82	; 130
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	9e 01       	movw	r18, r28
    1334:	25 59       	subi	r18, 0x95	; 149
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1340:	ce 01       	movw	r24, r28
    1342:	82 58       	subi	r24, 0x82	; 130
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	2a 95       	dec	r18
    134e:	f1 f7       	brne	.-4      	; 0x134c <lcdinit+0xac2>
    1350:	ce 01       	movw	r24, r28
    1352:	82 58       	subi	r24, 0x82	; 130
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	fc 01       	movw	r30, r24
    1358:	20 83       	st	Z, r18
	_delay_us(100);

	lcd_write_instr(0b00101000);
    135a:	88 e2       	ldi	r24, 0x28	; 40
    135c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <lcd_write_instr>
	lcd_write_instr(0b00001100);
    1360:	8c e0       	ldi	r24, 0x0C	; 12
    1362:	0e 94 4c 0a 	call	0x1498	; 0x1498 <lcd_write_instr>
	lcd_write_instr(0b00000110);
    1366:	86 e0       	ldi	r24, 0x06	; 6
    1368:	0e 94 4c 0a 	call	0x1498	; 0x1498 <lcd_write_instr>
	lcd_clear();
    136c:	0e 94 c4 09 	call	0x1388	; 0x1388 <lcd_clear>
}
    1370:	c2 58       	subi	r28, 0x82	; 130
    1372:	df 4f       	sbci	r29, 0xFF	; 255
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <lcd_clear>:

void lcd_clear()
{
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	2e 97       	sbiw	r28, 0x0e	; 14
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
	lcd_write_instr(1);
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <lcd_write_instr>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e4       	ldi	r27, 0x40	; 64
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	ab 83       	std	Y+3, r26	; 0x03
    13b0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13b2:	2d ec       	ldi	r18, 0xCD	; 205
    13b4:	3c ec       	ldi	r19, 0xCC	; 204
    13b6:	4c e2       	ldi	r20, 0x2C	; 44
    13b8:	55 e4       	ldi	r21, 0x45	; 69
    13ba:	69 81       	ldd	r22, Y+1	; 0x01
    13bc:	7a 81       	ldd	r23, Y+2	; 0x02
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	8d 83       	std	Y+5, r24	; 0x05
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	af 83       	std	Y+7, r26	; 0x07
    13d0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	6d 81       	ldd	r22, Y+5	; 0x05
    13dc:	7e 81       	ldd	r23, Y+6	; 0x06
    13de:	8f 81       	ldd	r24, Y+7	; 0x07
    13e0:	98 85       	ldd	r25, Y+8	; 0x08
    13e2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    13e6:	88 23       	and	r24, r24
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <lcd_clear+0x6c>
		__ticks = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9a 87       	std	Y+10, r25	; 0x0a
    13f0:	89 87       	std	Y+9, r24	; 0x09
    13f2:	3f c0       	rjmp	.+126    	; 0x1472 <lcd_clear+0xea>
	else if (__tmp > 65535)
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	6d 81       	ldd	r22, Y+5	; 0x05
    13fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1400:	8f 81       	ldd	r24, Y+7	; 0x07
    1402:	98 85       	ldd	r25, Y+8	; 0x08
    1404:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1408:	18 16       	cp	r1, r24
    140a:	4c f5       	brge	.+82     	; 0x145e <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	69 81       	ldd	r22, Y+1	; 0x01
    1416:	7a 81       	ldd	r23, Y+2	; 0x02
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	9a 87       	std	Y+10, r25	; 0x0a
    1432:	89 87       	std	Y+9, r24	; 0x09
    1434:	0f c0       	rjmp	.+30     	; 0x1454 <lcd_clear+0xcc>
    1436:	84 e1       	ldi	r24, 0x14	; 20
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	9c 87       	std	Y+12, r25	; 0x0c
    143c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    143e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1440:	9c 85       	ldd	r25, Y+12	; 0x0c
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <lcd_clear+0xba>
    1446:	9c 87       	std	Y+12, r25	; 0x0c
    1448:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	9a 87       	std	Y+10, r25	; 0x0a
    1452:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1454:	89 85       	ldd	r24, Y+9	; 0x09
    1456:	9a 85       	ldd	r25, Y+10	; 0x0a
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	69 f7       	brne	.-38     	; 0x1436 <lcd_clear+0xae>
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145e:	6d 81       	ldd	r22, Y+5	; 0x05
    1460:	7e 81       	ldd	r23, Y+6	; 0x06
    1462:	8f 81       	ldd	r24, Y+7	; 0x07
    1464:	98 85       	ldd	r25, Y+8	; 0x08
    1466:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	9a 87       	std	Y+10, r25	; 0x0a
    1470:	89 87       	std	Y+9, r24	; 0x09
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	9e 87       	std	Y+14, r25	; 0x0e
    1478:	8d 87       	std	Y+13, r24	; 0x0d
    147a:	8d 85       	ldd	r24, Y+13	; 0x0d
    147c:	9e 85       	ldd	r25, Y+14	; 0x0e
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <lcd_clear+0xf6>
    1482:	9e 87       	std	Y+14, r25	; 0x0e
    1484:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
}
    1486:	2e 96       	adiw	r28, 0x0e	; 14
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <lcd_write_instr>:

void lcd_write_instr(uint8_t data)
{
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	c1 58       	subi	r28, 0x81	; 129
    14a6:	d1 09       	sbc	r29, r1
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	9e 01       	movw	r18, r28
    14b4:	2f 57       	subi	r18, 0x7F	; 127
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	f9 01       	movw	r30, r18
    14ba:	80 83       	st	Z, r24
	LCD_PORT &= ~(1<<LCD_RS);
    14bc:	8b e3       	ldi	r24, 0x3B	; 59
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	2b e3       	ldi	r18, 0x3B	; 59
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	f9 01       	movw	r30, r18
    14c6:	20 81       	ld	r18, Z
    14c8:	2b 7f       	andi	r18, 0xFB	; 251
    14ca:	fc 01       	movw	r30, r24
    14cc:	20 83       	st	Z, r18
	LCD_PORT |= (1<<LCD_E);
    14ce:	8b e3       	ldi	r24, 0x3B	; 59
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	2b e3       	ldi	r18, 0x3B	; 59
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	f9 01       	movw	r30, r18
    14d8:	20 81       	ld	r18, Z
    14da:	28 60       	ori	r18, 0x08	; 8
    14dc:	fc 01       	movw	r30, r24
    14de:	20 83       	st	Z, r18
	LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
    14e0:	8b e3       	ldi	r24, 0x3B	; 59
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	2b e3       	ldi	r18, 0x3B	; 59
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	f9 01       	movw	r30, r18
    14ea:	20 81       	ld	r18, Z
    14ec:	42 2f       	mov	r20, r18
    14ee:	4f 70       	andi	r20, 0x0F	; 15
    14f0:	9e 01       	movw	r18, r28
    14f2:	2f 57       	subi	r18, 0x7F	; 127
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	f9 01       	movw	r30, r18
    14f8:	20 81       	ld	r18, Z
    14fa:	20 7f       	andi	r18, 0xF0	; 240
    14fc:	24 2b       	or	r18, r20
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e8       	ldi	r26, 0x80	; 128
    1508:	bf e3       	ldi	r27, 0x3F	; 63
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	ab 83       	std	Y+3, r26	; 0x03
    1510:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1512:	2a ef       	ldi	r18, 0xFA	; 250
    1514:	3d ee       	ldi	r19, 0xED	; 237
    1516:	4b e6       	ldi	r20, 0x6B	; 107
    1518:	50 e4       	ldi	r21, 0x40	; 64
    151a:	69 81       	ldd	r22, Y+1	; 0x01
    151c:	7a 81       	ldd	r23, Y+2	; 0x02
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	af 83       	std	Y+7, r26	; 0x07
    1530:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1532:	2c e7       	ldi	r18, 0x7C	; 124
    1534:	32 ef       	ldi	r19, 0xF2	; 242
    1536:	40 e3       	ldi	r20, 0x30	; 48
    1538:	50 e4       	ldi	r21, 0x40	; 64
    153a:	69 81       	ldd	r22, Y+1	; 0x01
    153c:	7a 81       	ldd	r23, Y+2	; 0x02
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	89 87       	std	Y+9, r24	; 0x09
    154c:	9a 87       	std	Y+10, r25	; 0x0a
    154e:	ab 87       	std	Y+11, r26	; 0x0b
    1550:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e8       	ldi	r20, 0x80	; 128
    1558:	5f e3       	ldi	r21, 0x3F	; 63
    155a:	6d 81       	ldd	r22, Y+5	; 0x05
    155c:	7e 81       	ldd	r23, Y+6	; 0x06
    155e:	8f 81       	ldd	r24, Y+7	; 0x07
    1560:	98 85       	ldd	r25, Y+8	; 0x08
    1562:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    1566:	88 23       	and	r24, r24
    1568:	1c f4       	brge	.+6      	; 0x1570 <lcd_write_instr+0xd8>
		__ticks = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	8d 87       	std	Y+13, r24	; 0x0d
    156e:	b2 c0       	rjmp	.+356    	; 0x16d4 <lcd_write_instr+0x23c>
	else if (__tmp2 > 65535)
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	69 85       	ldd	r22, Y+9	; 0x09
    157a:	7a 85       	ldd	r23, Y+10	; 0x0a
    157c:	8b 85       	ldd	r24, Y+11	; 0x0b
    157e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1580:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1584:	18 16       	cp	r1, r24
    1586:	0c f0       	brlt	.+2      	; 0x158a <lcd_write_instr+0xf2>
    1588:	7b c0       	rjmp	.+246    	; 0x1680 <lcd_write_instr+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4a e7       	ldi	r20, 0x7A	; 122
    1590:	54 e4       	ldi	r21, 0x44	; 68
    1592:	69 81       	ldd	r22, Y+1	; 0x01
    1594:	7a 81       	ldd	r23, Y+2	; 0x02
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8e 87       	std	Y+14, r24	; 0x0e
    15a4:	9f 87       	std	Y+15, r25	; 0x0f
    15a6:	a8 8b       	std	Y+16, r26	; 0x10
    15a8:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15aa:	2d ec       	ldi	r18, 0xCD	; 205
    15ac:	3c ec       	ldi	r19, 0xCC	; 204
    15ae:	4c e2       	ldi	r20, 0x2C	; 44
    15b0:	55 e4       	ldi	r21, 0x45	; 69
    15b2:	6e 85       	ldd	r22, Y+14	; 0x0e
    15b4:	7f 85       	ldd	r23, Y+15	; 0x0f
    15b6:	88 89       	ldd	r24, Y+16	; 0x10
    15b8:	99 89       	ldd	r25, Y+17	; 0x11
    15ba:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	8a 8b       	std	Y+18, r24	; 0x12
    15c4:	9b 8b       	std	Y+19, r25	; 0x13
    15c6:	ac 8b       	std	Y+20, r26	; 0x14
    15c8:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	6a 89       	ldd	r22, Y+18	; 0x12
    15d4:	7b 89       	ldd	r23, Y+19	; 0x13
    15d6:	8c 89       	ldd	r24, Y+20	; 0x14
    15d8:	9d 89       	ldd	r25, Y+21	; 0x15
    15da:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    15de:	88 23       	and	r24, r24
    15e0:	2c f4       	brge	.+10     	; 0x15ec <lcd_write_instr+0x154>
		__ticks = 1;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9f 8b       	std	Y+23, r25	; 0x17
    15e8:	8e 8b       	std	Y+22, r24	; 0x16
    15ea:	3f c0       	rjmp	.+126    	; 0x166a <lcd_write_instr+0x1d2>
	else if (__tmp > 65535)
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	6a 89       	ldd	r22, Y+18	; 0x12
    15f6:	7b 89       	ldd	r23, Y+19	; 0x13
    15f8:	8c 89       	ldd	r24, Y+20	; 0x14
    15fa:	9d 89       	ldd	r25, Y+21	; 0x15
    15fc:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1600:	18 16       	cp	r1, r24
    1602:	4c f5       	brge	.+82     	; 0x1656 <lcd_write_instr+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	6e 85       	ldd	r22, Y+14	; 0x0e
    160e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1610:	88 89       	ldd	r24, Y+16	; 0x10
    1612:	99 89       	ldd	r25, Y+17	; 0x11
    1614:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	bc 01       	movw	r22, r24
    161e:	cd 01       	movw	r24, r26
    1620:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	9f 8b       	std	Y+23, r25	; 0x17
    162a:	8e 8b       	std	Y+22, r24	; 0x16
    162c:	0f c0       	rjmp	.+30     	; 0x164c <lcd_write_instr+0x1b4>
    162e:	84 e1       	ldi	r24, 0x14	; 20
    1630:	91 e0       	ldi	r25, 0x01	; 1
    1632:	99 8f       	std	Y+25, r25	; 0x19
    1634:	88 8f       	std	Y+24, r24	; 0x18
    1636:	88 8d       	ldd	r24, Y+24	; 0x18
    1638:	99 8d       	ldd	r25, Y+25	; 0x19
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <lcd_write_instr+0x1a2>
    163e:	99 8f       	std	Y+25, r25	; 0x19
    1640:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1642:	8e 89       	ldd	r24, Y+22	; 0x16
    1644:	9f 89       	ldd	r25, Y+23	; 0x17
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	9f 8b       	std	Y+23, r25	; 0x17
    164a:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164c:	8e 89       	ldd	r24, Y+22	; 0x16
    164e:	9f 89       	ldd	r25, Y+23	; 0x17
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	69 f7       	brne	.-38     	; 0x162e <lcd_write_instr+0x196>
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <lcd_write_instr+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1656:	6a 89       	ldd	r22, Y+18	; 0x12
    1658:	7b 89       	ldd	r23, Y+19	; 0x13
    165a:	8c 89       	ldd	r24, Y+20	; 0x14
    165c:	9d 89       	ldd	r25, Y+21	; 0x15
    165e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	9f 8b       	std	Y+23, r25	; 0x17
    1668:	8e 8b       	std	Y+22, r24	; 0x16
    166a:	8e 89       	ldd	r24, Y+22	; 0x16
    166c:	9f 89       	ldd	r25, Y+23	; 0x17
    166e:	9b 8f       	std	Y+27, r25	; 0x1b
    1670:	8a 8f       	std	Y+26, r24	; 0x1a
    1672:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1674:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <lcd_write_instr+0x1de>
    167a:	9b 8f       	std	Y+27, r25	; 0x1b
    167c:	8a 8f       	std	Y+26, r24	; 0x1a
    167e:	2a c0       	rjmp	.+84     	; 0x16d4 <lcd_write_instr+0x23c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4f e7       	ldi	r20, 0x7F	; 127
    1686:	53 e4       	ldi	r21, 0x43	; 67
    1688:	6d 81       	ldd	r22, Y+5	; 0x05
    168a:	7e 81       	ldd	r23, Y+6	; 0x06
    168c:	8f 81       	ldd	r24, Y+7	; 0x07
    168e:	98 85       	ldd	r25, Y+8	; 0x08
    1690:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1694:	18 16       	cp	r1, r24
    1696:	ac f4       	brge	.+42     	; 0x16c2 <lcd_write_instr+0x22a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1698:	69 85       	ldd	r22, Y+9	; 0x09
    169a:	7a 85       	ldd	r23, Y+10	; 0x0a
    169c:	8b 85       	ldd	r24, Y+11	; 0x0b
    169e:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9d 8f       	std	Y+29, r25	; 0x1d
    16aa:	8c 8f       	std	Y+28, r24	; 0x1c
    16ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16b0:	9f 8f       	std	Y+31, r25	; 0x1f
    16b2:	8e 8f       	std	Y+30, r24	; 0x1e
    16b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <lcd_write_instr+0x220>
    16bc:	9f 8f       	std	Y+31, r25	; 0x1f
    16be:	8e 8f       	std	Y+30, r24	; 0x1e
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <lcd_write_instr+0x248>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16c2:	6d 81       	ldd	r22, Y+5	; 0x05
    16c4:	7e 81       	ldd	r23, Y+6	; 0x06
    16c6:	8f 81       	ldd	r24, Y+7	; 0x07
    16c8:	98 85       	ldd	r25, Y+8	; 0x08
    16ca:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8d 87       	std	Y+13, r24	; 0x0d
    16d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d6:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16d8:	88 a1       	ldd	r24, Y+32	; 0x20
    16da:	8a 95       	dec	r24
    16dc:	f1 f7       	brne	.-4      	; 0x16da <lcd_write_instr+0x242>
    16de:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
    16e0:	8b e3       	ldi	r24, 0x3B	; 59
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	2b e3       	ldi	r18, 0x3B	; 59
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	f9 01       	movw	r30, r18
    16ea:	20 81       	ld	r18, Z
    16ec:	27 7f       	andi	r18, 0xF7	; 247
    16ee:	fc 01       	movw	r30, r24
    16f0:	20 83       	st	Z, r18
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a8 ec       	ldi	r26, 0xC8	; 200
    16f8:	b2 e4       	ldi	r27, 0x42	; 66
    16fa:	89 a3       	std	Y+33, r24	; 0x21
    16fc:	9a a3       	std	Y+34, r25	; 0x22
    16fe:	ab a3       	std	Y+35, r26	; 0x23
    1700:	bc a3       	std	Y+36, r27	; 0x24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1702:	2a ef       	ldi	r18, 0xFA	; 250
    1704:	3d ee       	ldi	r19, 0xED	; 237
    1706:	4b e6       	ldi	r20, 0x6B	; 107
    1708:	50 e4       	ldi	r21, 0x40	; 64
    170a:	69 a1       	ldd	r22, Y+33	; 0x21
    170c:	7a a1       	ldd	r23, Y+34	; 0x22
    170e:	8b a1       	ldd	r24, Y+35	; 0x23
    1710:	9c a1       	ldd	r25, Y+36	; 0x24
    1712:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8d a3       	std	Y+37, r24	; 0x25
    171c:	9e a3       	std	Y+38, r25	; 0x26
    171e:	af a3       	std	Y+39, r26	; 0x27
    1720:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1722:	2c e7       	ldi	r18, 0x7C	; 124
    1724:	32 ef       	ldi	r19, 0xF2	; 242
    1726:	40 e3       	ldi	r20, 0x30	; 48
    1728:	50 e4       	ldi	r21, 0x40	; 64
    172a:	69 a1       	ldd	r22, Y+33	; 0x21
    172c:	7a a1       	ldd	r23, Y+34	; 0x22
    172e:	8b a1       	ldd	r24, Y+35	; 0x23
    1730:	9c a1       	ldd	r25, Y+36	; 0x24
    1732:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	89 a7       	std	Y+41, r24	; 0x29
    173c:	9a a7       	std	Y+42, r25	; 0x2a
    173e:	ab a7       	std	Y+43, r26	; 0x2b
    1740:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e8       	ldi	r20, 0x80	; 128
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	6d a1       	ldd	r22, Y+37	; 0x25
    174c:	7e a1       	ldd	r23, Y+38	; 0x26
    174e:	8f a1       	ldd	r24, Y+39	; 0x27
    1750:	98 a5       	ldd	r25, Y+40	; 0x28
    1752:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    1756:	88 23       	and	r24, r24
    1758:	1c f4       	brge	.+6      	; 0x1760 <lcd_write_instr+0x2c8>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	8d a7       	std	Y+45, r24	; 0x2d
    175e:	b2 c0       	rjmp	.+356    	; 0x18c4 <lcd_write_instr+0x42c>
	else if (__tmp2 > 65535)
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	3f ef       	ldi	r19, 0xFF	; 255
    1764:	4f e7       	ldi	r20, 0x7F	; 127
    1766:	57 e4       	ldi	r21, 0x47	; 71
    1768:	69 a5       	ldd	r22, Y+41	; 0x29
    176a:	7a a5       	ldd	r23, Y+42	; 0x2a
    176c:	8b a5       	ldd	r24, Y+43	; 0x2b
    176e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1770:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1774:	18 16       	cp	r1, r24
    1776:	0c f0       	brlt	.+2      	; 0x177a <lcd_write_instr+0x2e2>
    1778:	7b c0       	rjmp	.+246    	; 0x1870 <lcd_write_instr+0x3d8>
	{
		_delay_ms(__us / 1000.0);
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a e7       	ldi	r20, 0x7A	; 122
    1780:	54 e4       	ldi	r21, 0x44	; 68
    1782:	69 a1       	ldd	r22, Y+33	; 0x21
    1784:	7a a1       	ldd	r23, Y+34	; 0x22
    1786:	8b a1       	ldd	r24, Y+35	; 0x23
    1788:	9c a1       	ldd	r25, Y+36	; 0x24
    178a:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	8e a7       	std	Y+46, r24	; 0x2e
    1794:	9f a7       	std	Y+47, r25	; 0x2f
    1796:	a8 ab       	std	Y+48, r26	; 0x30
    1798:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    179a:	2d ec       	ldi	r18, 0xCD	; 205
    179c:	3c ec       	ldi	r19, 0xCC	; 204
    179e:	4c e2       	ldi	r20, 0x2C	; 44
    17a0:	55 e4       	ldi	r21, 0x45	; 69
    17a2:	6e a5       	ldd	r22, Y+46	; 0x2e
    17a4:	7f a5       	ldd	r23, Y+47	; 0x2f
    17a6:	88 a9       	ldd	r24, Y+48	; 0x30
    17a8:	99 a9       	ldd	r25, Y+49	; 0x31
    17aa:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	8a ab       	std	Y+50, r24	; 0x32
    17b4:	9b ab       	std	Y+51, r25	; 0x33
    17b6:	ac ab       	std	Y+52, r26	; 0x34
    17b8:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	6a a9       	ldd	r22, Y+50	; 0x32
    17c4:	7b a9       	ldd	r23, Y+51	; 0x33
    17c6:	8c a9       	ldd	r24, Y+52	; 0x34
    17c8:	9d a9       	ldd	r25, Y+53	; 0x35
    17ca:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	2c f4       	brge	.+10     	; 0x17dc <lcd_write_instr+0x344>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9f ab       	std	Y+55, r25	; 0x37
    17d8:	8e ab       	std	Y+54, r24	; 0x36
    17da:	3f c0       	rjmp	.+126    	; 0x185a <lcd_write_instr+0x3c2>
	else if (__tmp > 65535)
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	6a a9       	ldd	r22, Y+50	; 0x32
    17e6:	7b a9       	ldd	r23, Y+51	; 0x33
    17e8:	8c a9       	ldd	r24, Y+52	; 0x34
    17ea:	9d a9       	ldd	r25, Y+53	; 0x35
    17ec:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	4c f5       	brge	.+82     	; 0x1846 <lcd_write_instr+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	6e a5       	ldd	r22, Y+46	; 0x2e
    17fe:	7f a5       	ldd	r23, Y+47	; 0x2f
    1800:	88 a9       	ldd	r24, Y+48	; 0x30
    1802:	99 a9       	ldd	r25, Y+49	; 0x31
    1804:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9f ab       	std	Y+55, r25	; 0x37
    181a:	8e ab       	std	Y+54, r24	; 0x36
    181c:	0f c0       	rjmp	.+30     	; 0x183c <lcd_write_instr+0x3a4>
    181e:	84 e1       	ldi	r24, 0x14	; 20
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	99 af       	std	Y+57, r25	; 0x39
    1824:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1826:	88 ad       	ldd	r24, Y+56	; 0x38
    1828:	99 ad       	ldd	r25, Y+57	; 0x39
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <lcd_write_instr+0x392>
    182e:	99 af       	std	Y+57, r25	; 0x39
    1830:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	8e a9       	ldd	r24, Y+54	; 0x36
    1834:	9f a9       	ldd	r25, Y+55	; 0x37
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	9f ab       	std	Y+55, r25	; 0x37
    183a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	8e a9       	ldd	r24, Y+54	; 0x36
    183e:	9f a9       	ldd	r25, Y+55	; 0x37
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <lcd_write_instr+0x386>
    1844:	3f c0       	rjmp	.+126    	; 0x18c4 <lcd_write_instr+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	6a a9       	ldd	r22, Y+50	; 0x32
    1848:	7b a9       	ldd	r23, Y+51	; 0x33
    184a:	8c a9       	ldd	r24, Y+52	; 0x34
    184c:	9d a9       	ldd	r25, Y+53	; 0x35
    184e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9f ab       	std	Y+55, r25	; 0x37
    1858:	8e ab       	std	Y+54, r24	; 0x36
    185a:	8e a9       	ldd	r24, Y+54	; 0x36
    185c:	9f a9       	ldd	r25, Y+55	; 0x37
    185e:	9b af       	std	Y+59, r25	; 0x3b
    1860:	8a af       	std	Y+58, r24	; 0x3a
    1862:	8a ad       	ldd	r24, Y+58	; 0x3a
    1864:	9b ad       	ldd	r25, Y+59	; 0x3b
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <lcd_write_instr+0x3ce>
    186a:	9b af       	std	Y+59, r25	; 0x3b
    186c:	8a af       	std	Y+58, r24	; 0x3a
    186e:	2a c0       	rjmp	.+84     	; 0x18c4 <lcd_write_instr+0x42c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	53 e4       	ldi	r21, 0x43	; 67
    1878:	6d a1       	ldd	r22, Y+37	; 0x25
    187a:	7e a1       	ldd	r23, Y+38	; 0x26
    187c:	8f a1       	ldd	r24, Y+39	; 0x27
    187e:	98 a5       	ldd	r25, Y+40	; 0x28
    1880:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1884:	18 16       	cp	r1, r24
    1886:	ac f4       	brge	.+42     	; 0x18b2 <lcd_write_instr+0x41a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1888:	69 a5       	ldd	r22, Y+41	; 0x29
    188a:	7a a5       	ldd	r23, Y+42	; 0x2a
    188c:	8b a5       	ldd	r24, Y+43	; 0x2b
    188e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1890:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9d af       	std	Y+61, r25	; 0x3d
    189a:	8c af       	std	Y+60, r24	; 0x3c
    189c:	8c ad       	ldd	r24, Y+60	; 0x3c
    189e:	9d ad       	ldd	r25, Y+61	; 0x3d
    18a0:	9f af       	std	Y+63, r25	; 0x3f
    18a2:	8e af       	std	Y+62, r24	; 0x3e
    18a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    18a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <lcd_write_instr+0x410>
    18ac:	9f af       	std	Y+63, r25	; 0x3f
    18ae:	8e af       	std	Y+62, r24	; 0x3e
    18b0:	1c c0       	rjmp	.+56     	; 0x18ea <lcd_write_instr+0x452>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18b2:	6d a1       	ldd	r22, Y+37	; 0x25
    18b4:	7e a1       	ldd	r23, Y+38	; 0x26
    18b6:	8f a1       	ldd	r24, Y+39	; 0x27
    18b8:	98 a5       	ldd	r25, Y+40	; 0x28
    18ba:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	8d a7       	std	Y+45, r24	; 0x2d
    18c4:	2d a5       	ldd	r18, Y+45	; 0x2d
    18c6:	ce 01       	movw	r24, r28
    18c8:	80 5c       	subi	r24, 0xC0	; 192
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	fc 01       	movw	r30, r24
    18ce:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18d0:	ce 01       	movw	r24, r28
    18d2:	80 5c       	subi	r24, 0xC0	; 192
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	fc 01       	movw	r30, r24
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	2a 95       	dec	r18
    18de:	f1 f7       	brne	.-4      	; 0x18dc <lcd_write_instr+0x444>
    18e0:	ce 01       	movw	r24, r28
    18e2:	80 5c       	subi	r24, 0xC0	; 192
    18e4:	9f 4f       	sbci	r25, 0xFF	; 255
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 83       	st	Z, r18
	_delay_us(100);
	LCD_PORT |= (1<<LCD_E);
    18ea:	8b e3       	ldi	r24, 0x3B	; 59
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	2b e3       	ldi	r18, 0x3B	; 59
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	f9 01       	movw	r30, r18
    18f4:	20 81       	ld	r18, Z
    18f6:	28 60       	ori	r18, 0x08	; 8
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 83       	st	Z, r18
	LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f) << 4);
    18fc:	8b e3       	ldi	r24, 0x3B	; 59
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	2b e3       	ldi	r18, 0x3B	; 59
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	f9 01       	movw	r30, r18
    1906:	20 81       	ld	r18, Z
    1908:	42 2f       	mov	r20, r18
    190a:	4f 70       	andi	r20, 0x0F	; 15
    190c:	9e 01       	movw	r18, r28
    190e:	2f 57       	subi	r18, 0x7F	; 127
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	f9 01       	movw	r30, r18
    1914:	20 81       	ld	r18, Z
    1916:	22 2f       	mov	r18, r18
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	22 95       	swap	r18
    191c:	32 95       	swap	r19
    191e:	30 7f       	andi	r19, 0xF0	; 240
    1920:	32 27       	eor	r19, r18
    1922:	20 7f       	andi	r18, 0xF0	; 240
    1924:	32 27       	eor	r19, r18
    1926:	24 2b       	or	r18, r20
    1928:	fc 01       	movw	r30, r24
    192a:	20 83       	st	Z, r18
    192c:	9e 01       	movw	r18, r28
    192e:	2f 5b       	subi	r18, 0xBF	; 191
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e8       	ldi	r26, 0x80	; 128
    1938:	bf e3       	ldi	r27, 0x3F	; 63
    193a:	f9 01       	movw	r30, r18
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	a2 83       	std	Z+2, r26	; 0x02
    1942:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1944:	8e 01       	movw	r16, r28
    1946:	0b 5b       	subi	r16, 0xBB	; 187
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
    194a:	ce 01       	movw	r24, r28
    194c:	8f 5b       	subi	r24, 0xBF	; 191
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	2a ef       	ldi	r18, 0xFA	; 250
    1952:	3d ee       	ldi	r19, 0xED	; 237
    1954:	4b e6       	ldi	r20, 0x6B	; 107
    1956:	50 e4       	ldi	r21, 0x40	; 64
    1958:	fc 01       	movw	r30, r24
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	f8 01       	movw	r30, r16
    196c:	80 83       	st	Z, r24
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	a2 83       	std	Z+2, r26	; 0x02
    1972:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1974:	8e 01       	movw	r16, r28
    1976:	07 5b       	subi	r16, 0xB7	; 183
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	ce 01       	movw	r24, r28
    197c:	8f 5b       	subi	r24, 0xBF	; 191
    197e:	9f 4f       	sbci	r25, 0xFF	; 255
    1980:	2c e7       	ldi	r18, 0x7C	; 124
    1982:	32 ef       	ldi	r19, 0xF2	; 242
    1984:	40 e3       	ldi	r20, 0x30	; 48
    1986:	50 e4       	ldi	r21, 0x40	; 64
    1988:	fc 01       	movw	r30, r24
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	f8 01       	movw	r30, r16
    199c:	80 83       	st	Z, r24
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	a2 83       	std	Z+2, r26	; 0x02
    19a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a4:	ce 01       	movw	r24, r28
    19a6:	8b 5b       	subi	r24, 0xBB	; 187
    19a8:	9f 4f       	sbci	r25, 0xFF	; 255
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e8       	ldi	r20, 0x80	; 128
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	fc 01       	movw	r30, r24
    19b4:	60 81       	ld	r22, Z
    19b6:	71 81       	ldd	r23, Z+1	; 0x01
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	3c f4       	brge	.+14     	; 0x19d2 <lcd_write_instr+0x53a>
		__ticks = 1;
    19c4:	ce 01       	movw	r24, r28
    19c6:	83 5b       	subi	r24, 0xB3	; 179
    19c8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ca:	21 e0       	ldi	r18, 0x01	; 1
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18
    19d0:	30 c1       	rjmp	.+608    	; 0x1c32 <lcd_write_instr+0x79a>
	else if (__tmp2 > 65535)
    19d2:	ce 01       	movw	r24, r28
    19d4:	87 5b       	subi	r24, 0xB7	; 183
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	fc 01       	movw	r30, r24
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	0c f0       	brlt	.+2      	; 0x19f4 <lcd_write_instr+0x55c>
    19f2:	d1 c0       	rjmp	.+418    	; 0x1b96 <lcd_write_instr+0x6fe>
	{
		_delay_ms(__us / 1000.0);
    19f4:	ce 01       	movw	r24, r28
    19f6:	8f 5b       	subi	r24, 0xBF	; 191
    19f8:	9f 4f       	sbci	r25, 0xFF	; 255
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	fc 01       	movw	r30, r24
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9e 01       	movw	r18, r28
    1a16:	22 5b       	subi	r18, 0xB2	; 178
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	f9 01       	movw	r30, r18
    1a1c:	80 83       	st	Z, r24
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	a2 83       	std	Z+2, r26	; 0x02
    1a22:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a24:	8e 01       	movw	r16, r28
    1a26:	0e 5a       	subi	r16, 0xAE	; 174
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	82 5b       	subi	r24, 0xB2	; 178
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	2d ec       	ldi	r18, 0xCD	; 205
    1a32:	3c ec       	ldi	r19, 0xCC	; 204
    1a34:	4c e2       	ldi	r20, 0x2C	; 44
    1a36:	55 e4       	ldi	r21, 0x45	; 69
    1a38:	fc 01       	movw	r30, r24
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	80 83       	st	Z, r24
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	a2 83       	std	Z+2, r26	; 0x02
    1a52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a54:	ce 01       	movw	r24, r28
    1a56:	8e 5a       	subi	r24, 0xAE	; 174
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	fc 01       	movw	r30, r24
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	4c f4       	brge	.+18     	; 0x1a86 <lcd_write_instr+0x5ee>
		__ticks = 1;
    1a74:	ce 01       	movw	r24, r28
    1a76:	8a 5a       	subi	r24, 0xAA	; 170
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	21 e0       	ldi	r18, 0x01	; 1
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	fc 01       	movw	r30, r24
    1a80:	31 83       	std	Z+1, r19	; 0x01
    1a82:	20 83       	st	Z, r18
    1a84:	6d c0       	rjmp	.+218    	; 0x1b60 <lcd_write_instr+0x6c8>
	else if (__tmp > 65535)
    1a86:	ce 01       	movw	r24, r28
    1a88:	8e 5a       	subi	r24, 0xAE	; 174
    1a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	fc 01       	movw	r30, r24
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	0c f0       	brlt	.+2      	; 0x1aa8 <lcd_write_instr+0x610>
    1aa6:	4a c0       	rjmp	.+148    	; 0x1b3c <lcd_write_instr+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	82 5b       	subi	r24, 0xB2	; 178
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e2       	ldi	r20, 0x20	; 32
    1ab4:	51 e4       	ldi	r21, 0x41	; 65
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8e 01       	movw	r16, r28
    1aca:	0a 5a       	subi	r16, 0xAA	; 170
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	f8 01       	movw	r30, r16
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
    1ae0:	24 c0       	rjmp	.+72     	; 0x1b2a <lcd_write_instr+0x692>
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	88 5a       	subi	r24, 0xA8	; 168
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	24 e1       	ldi	r18, 0x14	; 20
    1aea:	31 e0       	ldi	r19, 0x01	; 1
    1aec:	fc 01       	movw	r30, r24
    1aee:	31 83       	std	Z+1, r19	; 0x01
    1af0:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af2:	ce 01       	movw	r24, r28
    1af4:	88 5a       	subi	r24, 0xA8	; 168
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	fc 01       	movw	r30, r24
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <lcd_write_instr+0x666>
    1b02:	9e 01       	movw	r18, r28
    1b04:	28 5a       	subi	r18, 0xA8	; 168
    1b06:	3f 4f       	sbci	r19, 0xFF	; 255
    1b08:	f9 01       	movw	r30, r18
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	ce 01       	movw	r24, r28
    1b10:	8a 5a       	subi	r24, 0xAA	; 170
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	9e 01       	movw	r18, r28
    1b16:	2a 5a       	subi	r18, 0xAA	; 170
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	20 81       	ld	r18, Z
    1b1e:	31 81       	ldd	r19, Z+1	; 0x01
    1b20:	21 50       	subi	r18, 0x01	; 1
    1b22:	31 09       	sbc	r19, r1
    1b24:	fc 01       	movw	r30, r24
    1b26:	31 83       	std	Z+1, r19	; 0x01
    1b28:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	8a 5a       	subi	r24, 0xAA	; 170
    1b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b30:	fc 01       	movw	r30, r24
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	a1 f6       	brne	.-88     	; 0x1ae2 <lcd_write_instr+0x64a>
    1b3a:	7b c0       	rjmp	.+246    	; 0x1c32 <lcd_write_instr+0x79a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	8e 01       	movw	r16, r28
    1b3e:	0a 5a       	subi	r16, 0xAA	; 170
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	ce 01       	movw	r24, r28
    1b44:	8e 5a       	subi	r24, 0xAE	; 174
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	fc 01       	movw	r30, r24
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
    1b60:	ce 01       	movw	r24, r28
    1b62:	86 5a       	subi	r24, 0xA6	; 166
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	9e 01       	movw	r18, r28
    1b68:	2a 5a       	subi	r18, 0xAA	; 170
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	f9 01       	movw	r30, r18
    1b6e:	20 81       	ld	r18, Z
    1b70:	31 81       	ldd	r19, Z+1	; 0x01
    1b72:	fc 01       	movw	r30, r24
    1b74:	31 83       	std	Z+1, r19	; 0x01
    1b76:	20 83       	st	Z, r18
    1b78:	ce 01       	movw	r24, r28
    1b7a:	86 5a       	subi	r24, 0xA6	; 166
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	fc 01       	movw	r30, r24
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <lcd_write_instr+0x6ec>
    1b88:	9e 01       	movw	r18, r28
    1b8a:	26 5a       	subi	r18, 0xA6	; 166
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8e:	f9 01       	movw	r30, r18
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
    1b94:	4e c0       	rjmp	.+156    	; 0x1c32 <lcd_write_instr+0x79a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b96:	ce 01       	movw	r24, r28
    1b98:	8b 5b       	subi	r24, 0xBB	; 187
    1b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	53 e4       	ldi	r21, 0x43	; 67
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	6c f5       	brge	.+90     	; 0x1c10 <lcd_write_instr+0x778>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	04 5a       	subi	r16, 0xA4	; 164
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	87 5b       	subi	r24, 0xB7	; 183
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    1bda:	ce 01       	movw	r24, r28
    1bdc:	82 5a       	subi	r24, 0xA2	; 162
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	9e 01       	movw	r18, r28
    1be2:	24 5a       	subi	r18, 0xA4	; 164
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	f9 01       	movw	r30, r18
    1be8:	20 81       	ld	r18, Z
    1bea:	31 81       	ldd	r19, Z+1	; 0x01
    1bec:	fc 01       	movw	r30, r24
    1bee:	31 83       	std	Z+1, r19	; 0x01
    1bf0:	20 83       	st	Z, r18
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	82 5a       	subi	r24, 0xA2	; 162
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <lcd_write_instr+0x766>
    1c02:	9e 01       	movw	r18, r28
    1c04:	22 5a       	subi	r18, 0xA2	; 162
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	f9 01       	movw	r30, r18
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	80 83       	st	Z, r24
    1c0e:	28 c0       	rjmp	.+80     	; 0x1c60 <lcd_write_instr+0x7c8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c10:	8e 01       	movw	r16, r28
    1c12:	03 5b       	subi	r16, 0xB3	; 179
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	ce 01       	movw	r24, r28
    1c18:	8b 5b       	subi	r24, 0xBB	; 187
    1c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	80 83       	st	Z, r24
    1c32:	ce 01       	movw	r24, r28
    1c34:	80 5a       	subi	r24, 0xA0	; 160
    1c36:	9f 4f       	sbci	r25, 0xFF	; 255
    1c38:	9e 01       	movw	r18, r28
    1c3a:	23 5b       	subi	r18, 0xB3	; 179
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	f9 01       	movw	r30, r18
    1c40:	20 81       	ld	r18, Z
    1c42:	fc 01       	movw	r30, r24
    1c44:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c46:	ce 01       	movw	r24, r28
    1c48:	80 5a       	subi	r24, 0xA0	; 160
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	80 81       	ld	r24, Z
    1c50:	28 2f       	mov	r18, r24
    1c52:	2a 95       	dec	r18
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <lcd_write_instr+0x7ba>
    1c56:	ce 01       	movw	r24, r28
    1c58:	80 5a       	subi	r24, 0xA0	; 160
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	20 83       	st	Z, r18
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
    1c60:	8b e3       	ldi	r24, 0x3B	; 59
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	2b e3       	ldi	r18, 0x3B	; 59
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	f9 01       	movw	r30, r18
    1c6a:	20 81       	ld	r18, Z
    1c6c:	27 7f       	andi	r18, 0xF7	; 247
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
    1c72:	9e 01       	movw	r18, r28
    1c74:	2f 59       	subi	r18, 0x9F	; 159
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a8 ec       	ldi	r26, 0xC8	; 200
    1c7e:	b2 e4       	ldi	r27, 0x42	; 66
    1c80:	f9 01       	movw	r30, r18
    1c82:	80 83       	st	Z, r24
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	a2 83       	std	Z+2, r26	; 0x02
    1c88:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1c8a:	8e 01       	movw	r16, r28
    1c8c:	0b 59       	subi	r16, 0x9B	; 155
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	ce 01       	movw	r24, r28
    1c92:	8f 59       	subi	r24, 0x9F	; 159
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	2a ef       	ldi	r18, 0xFA	; 250
    1c98:	3d ee       	ldi	r19, 0xED	; 237
    1c9a:	4b e6       	ldi	r20, 0x6B	; 107
    1c9c:	50 e4       	ldi	r21, 0x40	; 64
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	80 83       	st	Z, r24
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	a2 83       	std	Z+2, r26	; 0x02
    1cb8:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1cba:	8e 01       	movw	r16, r28
    1cbc:	07 59       	subi	r16, 0x97	; 151
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	8f 59       	subi	r24, 0x9F	; 159
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	2c e7       	ldi	r18, 0x7C	; 124
    1cc8:	32 ef       	ldi	r19, 0xF2	; 242
    1cca:	40 e3       	ldi	r20, 0x30	; 48
    1ccc:	50 e4       	ldi	r21, 0x40	; 64
    1cce:	fc 01       	movw	r30, r24
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	80 83       	st	Z, r24
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	a2 83       	std	Z+2, r26	; 0x02
    1ce8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cea:	ce 01       	movw	r24, r28
    1cec:	8b 59       	subi	r24, 0x9B	; 155
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	3c f4       	brge	.+14     	; 0x1d18 <lcd_write_instr+0x880>
		__ticks = 1;
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	83 59       	subi	r24, 0x93	; 147
    1d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d10:	21 e0       	ldi	r18, 0x01	; 1
    1d12:	fc 01       	movw	r30, r24
    1d14:	20 83       	st	Z, r18
    1d16:	30 c1       	rjmp	.+608    	; 0x1f78 <lcd_write_instr+0xae0>
	else if (__tmp2 > 65535)
    1d18:	ce 01       	movw	r24, r28
    1d1a:	87 59       	subi	r24, 0x97	; 151
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	fc 01       	movw	r30, r24
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	0c f0       	brlt	.+2      	; 0x1d3a <lcd_write_instr+0x8a2>
    1d38:	d1 c0       	rjmp	.+418    	; 0x1edc <lcd_write_instr+0xa44>
	{
		_delay_ms(__us / 1000.0);
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	8f 59       	subi	r24, 0x9F	; 159
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4a e7       	ldi	r20, 0x7A	; 122
    1d46:	54 e4       	ldi	r21, 0x44	; 68
    1d48:	fc 01       	movw	r30, r24
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9e 01       	movw	r18, r28
    1d5c:	22 59       	subi	r18, 0x92	; 146
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	f9 01       	movw	r30, r18
    1d62:	80 83       	st	Z, r24
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	a2 83       	std	Z+2, r26	; 0x02
    1d68:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d6a:	8e 01       	movw	r16, r28
    1d6c:	0e 58       	subi	r16, 0x8E	; 142
    1d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d70:	ce 01       	movw	r24, r28
    1d72:	82 59       	subi	r24, 0x92	; 146
    1d74:	9f 4f       	sbci	r25, 0xFF	; 255
    1d76:	2d ec       	ldi	r18, 0xCD	; 205
    1d78:	3c ec       	ldi	r19, 0xCC	; 204
    1d7a:	4c e2       	ldi	r20, 0x2C	; 44
    1d7c:	55 e4       	ldi	r21, 0x45	; 69
    1d7e:	fc 01       	movw	r30, r24
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	93 81       	ldd	r25, Z+3	; 0x03
    1d88:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	f8 01       	movw	r30, r16
    1d92:	80 83       	st	Z, r24
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	a2 83       	std	Z+2, r26	; 0x02
    1d98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	8e 58       	subi	r24, 0x8E	; 142
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	fc 01       	movw	r30, r24
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	4c f4       	brge	.+18     	; 0x1dcc <lcd_write_instr+0x934>
		__ticks = 1;
    1dba:	ce 01       	movw	r24, r28
    1dbc:	8a 58       	subi	r24, 0x8A	; 138
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	21 e0       	ldi	r18, 0x01	; 1
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	31 83       	std	Z+1, r19	; 0x01
    1dc8:	20 83       	st	Z, r18
    1dca:	6d c0       	rjmp	.+218    	; 0x1ea6 <lcd_write_instr+0xa0e>
	else if (__tmp > 65535)
    1dcc:	ce 01       	movw	r24, r28
    1dce:	8e 58       	subi	r24, 0x8E	; 142
    1dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	fc 01       	movw	r30, r24
    1ddc:	60 81       	ld	r22, Z
    1dde:	71 81       	ldd	r23, Z+1	; 0x01
    1de0:	82 81       	ldd	r24, Z+2	; 0x02
    1de2:	93 81       	ldd	r25, Z+3	; 0x03
    1de4:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	0c f0       	brlt	.+2      	; 0x1dee <lcd_write_instr+0x956>
    1dec:	4a c0       	rjmp	.+148    	; 0x1e82 <lcd_write_instr+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	ce 01       	movw	r24, r28
    1df0:	82 59       	subi	r24, 0x92	; 146
    1df2:	9f 4f       	sbci	r25, 0xFF	; 255
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8e 01       	movw	r16, r28
    1e10:	0a 58       	subi	r16, 0x8A	; 138
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
    1e26:	24 c0       	rjmp	.+72     	; 0x1e70 <lcd_write_instr+0x9d8>
    1e28:	ce 01       	movw	r24, r28
    1e2a:	88 58       	subi	r24, 0x88	; 136
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	24 e1       	ldi	r18, 0x14	; 20
    1e30:	31 e0       	ldi	r19, 0x01	; 1
    1e32:	fc 01       	movw	r30, r24
    1e34:	31 83       	std	Z+1, r19	; 0x01
    1e36:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e38:	ce 01       	movw	r24, r28
    1e3a:	88 58       	subi	r24, 0x88	; 136
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	fc 01       	movw	r30, r24
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <lcd_write_instr+0x9ac>
    1e48:	9e 01       	movw	r18, r28
    1e4a:	28 58       	subi	r18, 0x88	; 136
    1e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4e:	f9 01       	movw	r30, r18
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	ce 01       	movw	r24, r28
    1e56:	8a 58       	subi	r24, 0x8A	; 138
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	9e 01       	movw	r18, r28
    1e5c:	2a 58       	subi	r18, 0x8A	; 138
    1e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e60:	f9 01       	movw	r30, r18
    1e62:	20 81       	ld	r18, Z
    1e64:	31 81       	ldd	r19, Z+1	; 0x01
    1e66:	21 50       	subi	r18, 0x01	; 1
    1e68:	31 09       	sbc	r19, r1
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	31 83       	std	Z+1, r19	; 0x01
    1e6e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	ce 01       	movw	r24, r28
    1e72:	8a 58       	subi	r24, 0x8A	; 138
    1e74:	9f 4f       	sbci	r25, 0xFF	; 255
    1e76:	fc 01       	movw	r30, r24
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	a1 f6       	brne	.-88     	; 0x1e28 <lcd_write_instr+0x990>
    1e80:	7b c0       	rjmp	.+246    	; 0x1f78 <lcd_write_instr+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	8e 01       	movw	r16, r28
    1e84:	0a 58       	subi	r16, 0x8A	; 138
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	ce 01       	movw	r24, r28
    1e8a:	8e 58       	subi	r24, 0x8E	; 142
    1e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8e:	fc 01       	movw	r30, r24
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	86 58       	subi	r24, 0x86	; 134
    1eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1eac:	9e 01       	movw	r18, r28
    1eae:	2a 58       	subi	r18, 0x8A	; 138
    1eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb2:	f9 01       	movw	r30, r18
    1eb4:	20 81       	ld	r18, Z
    1eb6:	31 81       	ldd	r19, Z+1	; 0x01
    1eb8:	fc 01       	movw	r30, r24
    1eba:	31 83       	std	Z+1, r19	; 0x01
    1ebc:	20 83       	st	Z, r18
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	86 58       	subi	r24, 0x86	; 134
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <lcd_write_instr+0xa32>
    1ece:	9e 01       	movw	r18, r28
    1ed0:	26 58       	subi	r18, 0x86	; 134
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	4e c0       	rjmp	.+156    	; 0x1f78 <lcd_write_instr+0xae0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1edc:	ce 01       	movw	r24, r28
    1ede:	8b 59       	subi	r24, 0x9B	; 155
    1ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	4f e7       	ldi	r20, 0x7F	; 127
    1ee8:	53 e4       	ldi	r21, 0x43	; 67
    1eea:	fc 01       	movw	r30, r24
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	6c f5       	brge	.+90     	; 0x1f56 <lcd_write_instr+0xabe>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1efc:	8e 01       	movw	r16, r28
    1efe:	04 58       	subi	r16, 0x84	; 132
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	ce 01       	movw	r24, r28
    1f04:	87 59       	subi	r24, 0x97	; 151
    1f06:	9f 4f       	sbci	r25, 0xFF	; 255
    1f08:	fc 01       	movw	r30, r24
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	ce 01       	movw	r24, r28
    1f22:	82 58       	subi	r24, 0x82	; 130
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	9e 01       	movw	r18, r28
    1f28:	24 58       	subi	r18, 0x84	; 132
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	20 81       	ld	r18, Z
    1f30:	31 81       	ldd	r19, Z+1	; 0x01
    1f32:	fc 01       	movw	r30, r24
    1f34:	31 83       	std	Z+1, r19	; 0x01
    1f36:	20 83       	st	Z, r18
    1f38:	ce 01       	movw	r24, r28
    1f3a:	82 58       	subi	r24, 0x82	; 130
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	fc 01       	movw	r30, r24
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <lcd_write_instr+0xaac>
    1f48:	9e 01       	movw	r18, r28
    1f4a:	22 58       	subi	r18, 0x82	; 130
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	f9 01       	movw	r30, r18
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
    1f54:	28 c0       	rjmp	.+80     	; 0x1fa6 <lcd_write_instr+0xb0e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f56:	8e 01       	movw	r16, r28
    1f58:	03 59       	subi	r16, 0x93	; 147
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	8b 59       	subi	r24, 0x9B	; 155
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	fc 01       	movw	r30, r24
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	f8 01       	movw	r30, r16
    1f76:	80 83       	st	Z, r24
    1f78:	ce 01       	movw	r24, r28
    1f7a:	80 58       	subi	r24, 0x80	; 128
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	9e 01       	movw	r18, r28
    1f80:	23 59       	subi	r18, 0x93	; 147
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	f9 01       	movw	r30, r18
    1f86:	20 81       	ld	r18, Z
    1f88:	fc 01       	movw	r30, r24
    1f8a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	80 58       	subi	r24, 0x80	; 128
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	fc 01       	movw	r30, r24
    1f94:	80 81       	ld	r24, Z
    1f96:	28 2f       	mov	r18, r24
    1f98:	2a 95       	dec	r18
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <lcd_write_instr+0xb00>
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	80 58       	subi	r24, 0x80	; 128
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	20 83       	st	Z, r18
	_delay_us(100);
}
    1fa6:	cf 57       	subi	r28, 0x7F	; 127
    1fa8:	df 4f       	sbci	r29, 0xFF	; 255
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	08 95       	ret

00001fbe <lcd_write_data>:

void lcd_write_data(uint8_t data)
{
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	c1 58       	subi	r28, 0x81	; 129
    1fcc:	d1 09       	sbc	r29, r1
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	9e 01       	movw	r18, r28
    1fda:	2f 57       	subi	r18, 0x7F	; 127
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	f9 01       	movw	r30, r18
    1fe0:	80 83       	st	Z, r24
	LCD_PORT |= (1<<LCD_RS);
    1fe2:	8b e3       	ldi	r24, 0x3B	; 59
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	2b e3       	ldi	r18, 0x3B	; 59
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	f9 01       	movw	r30, r18
    1fec:	20 81       	ld	r18, Z
    1fee:	24 60       	ori	r18, 0x04	; 4
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	20 83       	st	Z, r18
	LCD_PORT |= (1<<LCD_E);
    1ff4:	8b e3       	ldi	r24, 0x3B	; 59
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	2b e3       	ldi	r18, 0x3B	; 59
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	f9 01       	movw	r30, r18
    1ffe:	20 81       	ld	r18, Z
    2000:	28 60       	ori	r18, 0x08	; 8
    2002:	fc 01       	movw	r30, r24
    2004:	20 83       	st	Z, r18
	LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
    2006:	8b e3       	ldi	r24, 0x3B	; 59
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	2b e3       	ldi	r18, 0x3B	; 59
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	f9 01       	movw	r30, r18
    2010:	20 81       	ld	r18, Z
    2012:	42 2f       	mov	r20, r18
    2014:	4f 70       	andi	r20, 0x0F	; 15
    2016:	9e 01       	movw	r18, r28
    2018:	2f 57       	subi	r18, 0x7F	; 127
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	f9 01       	movw	r30, r18
    201e:	20 81       	ld	r18, Z
    2020:	20 7f       	andi	r18, 0xF0	; 240
    2022:	24 2b       	or	r18, r20
    2024:	fc 01       	movw	r30, r24
    2026:	20 83       	st	Z, r18
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 e8       	ldi	r26, 0x80	; 128
    202e:	bf e3       	ldi	r27, 0x3F	; 63
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	ab 83       	std	Y+3, r26	; 0x03
    2036:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    2038:	2a ef       	ldi	r18, 0xFA	; 250
    203a:	3d ee       	ldi	r19, 0xED	; 237
    203c:	4b e6       	ldi	r20, 0x6B	; 107
    203e:	50 e4       	ldi	r21, 0x40	; 64
    2040:	69 81       	ldd	r22, Y+1	; 0x01
    2042:	7a 81       	ldd	r23, Y+2	; 0x02
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	af 83       	std	Y+7, r26	; 0x07
    2056:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2058:	2c e7       	ldi	r18, 0x7C	; 124
    205a:	32 ef       	ldi	r19, 0xF2	; 242
    205c:	40 e3       	ldi	r20, 0x30	; 48
    205e:	50 e4       	ldi	r21, 0x40	; 64
    2060:	69 81       	ldd	r22, Y+1	; 0x01
    2062:	7a 81       	ldd	r23, Y+2	; 0x02
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	89 87       	std	Y+9, r24	; 0x09
    2072:	9a 87       	std	Y+10, r25	; 0x0a
    2074:	ab 87       	std	Y+11, r26	; 0x0b
    2076:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	6d 81       	ldd	r22, Y+5	; 0x05
    2082:	7e 81       	ldd	r23, Y+6	; 0x06
    2084:	8f 81       	ldd	r24, Y+7	; 0x07
    2086:	98 85       	ldd	r25, Y+8	; 0x08
    2088:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    208c:	88 23       	and	r24, r24
    208e:	1c f4       	brge	.+6      	; 0x2096 <lcd_write_data+0xd8>
		__ticks = 1;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	8d 87       	std	Y+13, r24	; 0x0d
    2094:	b2 c0       	rjmp	.+356    	; 0x21fa <lcd_write_data+0x23c>
	else if (__tmp2 > 65535)
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	69 85       	ldd	r22, Y+9	; 0x09
    20a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    20a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    20a6:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	0c f0       	brlt	.+2      	; 0x20b0 <lcd_write_data+0xf2>
    20ae:	7b c0       	rjmp	.+246    	; 0x21a6 <lcd_write_data+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4a e7       	ldi	r20, 0x7A	; 122
    20b6:	54 e4       	ldi	r21, 0x44	; 68
    20b8:	69 81       	ldd	r22, Y+1	; 0x01
    20ba:	7a 81       	ldd	r23, Y+2	; 0x02
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8e 87       	std	Y+14, r24	; 0x0e
    20ca:	9f 87       	std	Y+15, r25	; 0x0f
    20cc:	a8 8b       	std	Y+16, r26	; 0x10
    20ce:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20d0:	2d ec       	ldi	r18, 0xCD	; 205
    20d2:	3c ec       	ldi	r19, 0xCC	; 204
    20d4:	4c e2       	ldi	r20, 0x2C	; 44
    20d6:	55 e4       	ldi	r21, 0x45	; 69
    20d8:	6e 85       	ldd	r22, Y+14	; 0x0e
    20da:	7f 85       	ldd	r23, Y+15	; 0x0f
    20dc:	88 89       	ldd	r24, Y+16	; 0x10
    20de:	99 89       	ldd	r25, Y+17	; 0x11
    20e0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	8a 8b       	std	Y+18, r24	; 0x12
    20ea:	9b 8b       	std	Y+19, r25	; 0x13
    20ec:	ac 8b       	std	Y+20, r26	; 0x14
    20ee:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	6a 89       	ldd	r22, Y+18	; 0x12
    20fa:	7b 89       	ldd	r23, Y+19	; 0x13
    20fc:	8c 89       	ldd	r24, Y+20	; 0x14
    20fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2100:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    2104:	88 23       	and	r24, r24
    2106:	2c f4       	brge	.+10     	; 0x2112 <lcd_write_data+0x154>
		__ticks = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9f 8b       	std	Y+23, r25	; 0x17
    210e:	8e 8b       	std	Y+22, r24	; 0x16
    2110:	3f c0       	rjmp	.+126    	; 0x2190 <lcd_write_data+0x1d2>
	else if (__tmp > 65535)
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	6a 89       	ldd	r22, Y+18	; 0x12
    211c:	7b 89       	ldd	r23, Y+19	; 0x13
    211e:	8c 89       	ldd	r24, Y+20	; 0x14
    2120:	9d 89       	ldd	r25, Y+21	; 0x15
    2122:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    2126:	18 16       	cp	r1, r24
    2128:	4c f5       	brge	.+82     	; 0x217c <lcd_write_data+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	6e 85       	ldd	r22, Y+14	; 0x0e
    2134:	7f 85       	ldd	r23, Y+15	; 0x0f
    2136:	88 89       	ldd	r24, Y+16	; 0x10
    2138:	99 89       	ldd	r25, Y+17	; 0x11
    213a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9f 8b       	std	Y+23, r25	; 0x17
    2150:	8e 8b       	std	Y+22, r24	; 0x16
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <lcd_write_data+0x1b4>
    2154:	84 e1       	ldi	r24, 0x14	; 20
    2156:	91 e0       	ldi	r25, 0x01	; 1
    2158:	99 8f       	std	Y+25, r25	; 0x19
    215a:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    215c:	88 8d       	ldd	r24, Y+24	; 0x18
    215e:	99 8d       	ldd	r25, Y+25	; 0x19
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <lcd_write_data+0x1a2>
    2164:	99 8f       	std	Y+25, r25	; 0x19
    2166:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	8e 89       	ldd	r24, Y+22	; 0x16
    216a:	9f 89       	ldd	r25, Y+23	; 0x17
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	9f 8b       	std	Y+23, r25	; 0x17
    2170:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	8e 89       	ldd	r24, Y+22	; 0x16
    2174:	9f 89       	ldd	r25, Y+23	; 0x17
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	69 f7       	brne	.-38     	; 0x2154 <lcd_write_data+0x196>
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <lcd_write_data+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217c:	6a 89       	ldd	r22, Y+18	; 0x12
    217e:	7b 89       	ldd	r23, Y+19	; 0x13
    2180:	8c 89       	ldd	r24, Y+20	; 0x14
    2182:	9d 89       	ldd	r25, Y+21	; 0x15
    2184:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9f 8b       	std	Y+23, r25	; 0x17
    218e:	8e 8b       	std	Y+22, r24	; 0x16
    2190:	8e 89       	ldd	r24, Y+22	; 0x16
    2192:	9f 89       	ldd	r25, Y+23	; 0x17
    2194:	9b 8f       	std	Y+27, r25	; 0x1b
    2196:	8a 8f       	std	Y+26, r24	; 0x1a
    2198:	8a 8d       	ldd	r24, Y+26	; 0x1a
    219a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <lcd_write_data+0x1de>
    21a0:	9b 8f       	std	Y+27, r25	; 0x1b
    21a2:	8a 8f       	std	Y+26, r24	; 0x1a
    21a4:	2a c0       	rjmp	.+84     	; 0x21fa <lcd_write_data+0x23c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	53 e4       	ldi	r21, 0x43	; 67
    21ae:	6d 81       	ldd	r22, Y+5	; 0x05
    21b0:	7e 81       	ldd	r23, Y+6	; 0x06
    21b2:	8f 81       	ldd	r24, Y+7	; 0x07
    21b4:	98 85       	ldd	r25, Y+8	; 0x08
    21b6:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	ac f4       	brge	.+42     	; 0x21e8 <lcd_write_data+0x22a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    21be:	69 85       	ldd	r22, Y+9	; 0x09
    21c0:	7a 85       	ldd	r23, Y+10	; 0x0a
    21c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    21c6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9d 8f       	std	Y+29, r25	; 0x1d
    21d0:	8c 8f       	std	Y+28, r24	; 0x1c
    21d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21d6:	9f 8f       	std	Y+31, r25	; 0x1f
    21d8:	8e 8f       	std	Y+30, r24	; 0x1e
    21da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <lcd_write_data+0x220>
    21e2:	9f 8f       	std	Y+31, r25	; 0x1f
    21e4:	8e 8f       	std	Y+30, r24	; 0x1e
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <lcd_write_data+0x248>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21e8:	6d 81       	ldd	r22, Y+5	; 0x05
    21ea:	7e 81       	ldd	r23, Y+6	; 0x06
    21ec:	8f 81       	ldd	r24, Y+7	; 0x07
    21ee:	98 85       	ldd	r25, Y+8	; 0x08
    21f0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8d 87       	std	Y+13, r24	; 0x0d
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21fe:	88 a1       	ldd	r24, Y+32	; 0x20
    2200:	8a 95       	dec	r24
    2202:	f1 f7       	brne	.-4      	; 0x2200 <lcd_write_data+0x242>
    2204:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
    2206:	8b e3       	ldi	r24, 0x3B	; 59
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	2b e3       	ldi	r18, 0x3B	; 59
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	f9 01       	movw	r30, r18
    2210:	20 81       	ld	r18, Z
    2212:	27 7f       	andi	r18, 0xF7	; 247
    2214:	fc 01       	movw	r30, r24
    2216:	20 83       	st	Z, r18
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a8 ec       	ldi	r26, 0xC8	; 200
    221e:	b2 e4       	ldi	r27, 0x42	; 66
    2220:	89 a3       	std	Y+33, r24	; 0x21
    2222:	9a a3       	std	Y+34, r25	; 0x22
    2224:	ab a3       	std	Y+35, r26	; 0x23
    2226:	bc a3       	std	Y+36, r27	; 0x24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    2228:	2a ef       	ldi	r18, 0xFA	; 250
    222a:	3d ee       	ldi	r19, 0xED	; 237
    222c:	4b e6       	ldi	r20, 0x6B	; 107
    222e:	50 e4       	ldi	r21, 0x40	; 64
    2230:	69 a1       	ldd	r22, Y+33	; 0x21
    2232:	7a a1       	ldd	r23, Y+34	; 0x22
    2234:	8b a1       	ldd	r24, Y+35	; 0x23
    2236:	9c a1       	ldd	r25, Y+36	; 0x24
    2238:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8d a3       	std	Y+37, r24	; 0x25
    2242:	9e a3       	std	Y+38, r25	; 0x26
    2244:	af a3       	std	Y+39, r26	; 0x27
    2246:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2248:	2c e7       	ldi	r18, 0x7C	; 124
    224a:	32 ef       	ldi	r19, 0xF2	; 242
    224c:	40 e3       	ldi	r20, 0x30	; 48
    224e:	50 e4       	ldi	r21, 0x40	; 64
    2250:	69 a1       	ldd	r22, Y+33	; 0x21
    2252:	7a a1       	ldd	r23, Y+34	; 0x22
    2254:	8b a1       	ldd	r24, Y+35	; 0x23
    2256:	9c a1       	ldd	r25, Y+36	; 0x24
    2258:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	89 a7       	std	Y+41, r24	; 0x29
    2262:	9a a7       	std	Y+42, r25	; 0x2a
    2264:	ab a7       	std	Y+43, r26	; 0x2b
    2266:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e8       	ldi	r20, 0x80	; 128
    226e:	5f e3       	ldi	r21, 0x3F	; 63
    2270:	6d a1       	ldd	r22, Y+37	; 0x25
    2272:	7e a1       	ldd	r23, Y+38	; 0x26
    2274:	8f a1       	ldd	r24, Y+39	; 0x27
    2276:	98 a5       	ldd	r25, Y+40	; 0x28
    2278:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    227c:	88 23       	and	r24, r24
    227e:	1c f4       	brge	.+6      	; 0x2286 <lcd_write_data+0x2c8>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	8d a7       	std	Y+45, r24	; 0x2d
    2284:	b2 c0       	rjmp	.+356    	; 0x23ea <lcd_write_data+0x42c>
	else if (__tmp2 > 65535)
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	69 a5       	ldd	r22, Y+41	; 0x29
    2290:	7a a5       	ldd	r23, Y+42	; 0x2a
    2292:	8b a5       	ldd	r24, Y+43	; 0x2b
    2294:	9c a5       	ldd	r25, Y+44	; 0x2c
    2296:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    229a:	18 16       	cp	r1, r24
    229c:	0c f0       	brlt	.+2      	; 0x22a0 <lcd_write_data+0x2e2>
    229e:	7b c0       	rjmp	.+246    	; 0x2396 <lcd_write_data+0x3d8>
	{
		_delay_ms(__us / 1000.0);
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	69 a1       	ldd	r22, Y+33	; 0x21
    22aa:	7a a1       	ldd	r23, Y+34	; 0x22
    22ac:	8b a1       	ldd	r24, Y+35	; 0x23
    22ae:	9c a1       	ldd	r25, Y+36	; 0x24
    22b0:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8e a7       	std	Y+46, r24	; 0x2e
    22ba:	9f a7       	std	Y+47, r25	; 0x2f
    22bc:	a8 ab       	std	Y+48, r26	; 0x30
    22be:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	2d ec       	ldi	r18, 0xCD	; 205
    22c2:	3c ec       	ldi	r19, 0xCC	; 204
    22c4:	4c e2       	ldi	r20, 0x2C	; 44
    22c6:	55 e4       	ldi	r21, 0x45	; 69
    22c8:	6e a5       	ldd	r22, Y+46	; 0x2e
    22ca:	7f a5       	ldd	r23, Y+47	; 0x2f
    22cc:	88 a9       	ldd	r24, Y+48	; 0x30
    22ce:	99 a9       	ldd	r25, Y+49	; 0x31
    22d0:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8a ab       	std	Y+50, r24	; 0x32
    22da:	9b ab       	std	Y+51, r25	; 0x33
    22dc:	ac ab       	std	Y+52, r26	; 0x34
    22de:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	6a a9       	ldd	r22, Y+50	; 0x32
    22ea:	7b a9       	ldd	r23, Y+51	; 0x33
    22ec:	8c a9       	ldd	r24, Y+52	; 0x34
    22ee:	9d a9       	ldd	r25, Y+53	; 0x35
    22f0:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <lcd_write_data+0x344>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9f ab       	std	Y+55, r25	; 0x37
    22fe:	8e ab       	std	Y+54, r24	; 0x36
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <lcd_write_data+0x3c2>
	else if (__tmp > 65535)
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	6a a9       	ldd	r22, Y+50	; 0x32
    230c:	7b a9       	ldd	r23, Y+51	; 0x33
    230e:	8c a9       	ldd	r24, Y+52	; 0x34
    2310:	9d a9       	ldd	r25, Y+53	; 0x35
    2312:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <lcd_write_data+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e2       	ldi	r20, 0x20	; 32
    2320:	51 e4       	ldi	r21, 0x41	; 65
    2322:	6e a5       	ldd	r22, Y+46	; 0x2e
    2324:	7f a5       	ldd	r23, Y+47	; 0x2f
    2326:	88 a9       	ldd	r24, Y+48	; 0x30
    2328:	99 a9       	ldd	r25, Y+49	; 0x31
    232a:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9f ab       	std	Y+55, r25	; 0x37
    2340:	8e ab       	std	Y+54, r24	; 0x36
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <lcd_write_data+0x3a4>
    2344:	84 e1       	ldi	r24, 0x14	; 20
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	99 af       	std	Y+57, r25	; 0x39
    234a:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234c:	88 ad       	ldd	r24, Y+56	; 0x38
    234e:	99 ad       	ldd	r25, Y+57	; 0x39
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <lcd_write_data+0x392>
    2354:	99 af       	std	Y+57, r25	; 0x39
    2356:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8e a9       	ldd	r24, Y+54	; 0x36
    235a:	9f a9       	ldd	r25, Y+55	; 0x37
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9f ab       	std	Y+55, r25	; 0x37
    2360:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8e a9       	ldd	r24, Y+54	; 0x36
    2364:	9f a9       	ldd	r25, Y+55	; 0x37
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <lcd_write_data+0x386>
    236a:	3f c0       	rjmp	.+126    	; 0x23ea <lcd_write_data+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6a a9       	ldd	r22, Y+50	; 0x32
    236e:	7b a9       	ldd	r23, Y+51	; 0x33
    2370:	8c a9       	ldd	r24, Y+52	; 0x34
    2372:	9d a9       	ldd	r25, Y+53	; 0x35
    2374:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9f ab       	std	Y+55, r25	; 0x37
    237e:	8e ab       	std	Y+54, r24	; 0x36
    2380:	8e a9       	ldd	r24, Y+54	; 0x36
    2382:	9f a9       	ldd	r25, Y+55	; 0x37
    2384:	9b af       	std	Y+59, r25	; 0x3b
    2386:	8a af       	std	Y+58, r24	; 0x3a
    2388:	8a ad       	ldd	r24, Y+58	; 0x3a
    238a:	9b ad       	ldd	r25, Y+59	; 0x3b
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <lcd_write_data+0x3ce>
    2390:	9b af       	std	Y+59, r25	; 0x3b
    2392:	8a af       	std	Y+58, r24	; 0x3a
    2394:	2a c0       	rjmp	.+84     	; 0x23ea <lcd_write_data+0x42c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4f e7       	ldi	r20, 0x7F	; 127
    239c:	53 e4       	ldi	r21, 0x43	; 67
    239e:	6d a1       	ldd	r22, Y+37	; 0x25
    23a0:	7e a1       	ldd	r23, Y+38	; 0x26
    23a2:	8f a1       	ldd	r24, Y+39	; 0x27
    23a4:	98 a5       	ldd	r25, Y+40	; 0x28
    23a6:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	ac f4       	brge	.+42     	; 0x23d8 <lcd_write_data+0x41a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    23ae:	69 a5       	ldd	r22, Y+41	; 0x29
    23b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    23b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9d af       	std	Y+61, r25	; 0x3d
    23c0:	8c af       	std	Y+60, r24	; 0x3c
    23c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    23c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    23c6:	9f af       	std	Y+63, r25	; 0x3f
    23c8:	8e af       	std	Y+62, r24	; 0x3e
    23ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    23cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <lcd_write_data+0x410>
    23d2:	9f af       	std	Y+63, r25	; 0x3f
    23d4:	8e af       	std	Y+62, r24	; 0x3e
    23d6:	1c c0       	rjmp	.+56     	; 0x2410 <lcd_write_data+0x452>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23d8:	6d a1       	ldd	r22, Y+37	; 0x25
    23da:	7e a1       	ldd	r23, Y+38	; 0x26
    23dc:	8f a1       	ldd	r24, Y+39	; 0x27
    23de:	98 a5       	ldd	r25, Y+40	; 0x28
    23e0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	8d a7       	std	Y+45, r24	; 0x2d
    23ea:	2d a5       	ldd	r18, Y+45	; 0x2d
    23ec:	ce 01       	movw	r24, r28
    23ee:	80 5c       	subi	r24, 0xC0	; 192
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	fc 01       	movw	r30, r24
    23f4:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f6:	ce 01       	movw	r24, r28
    23f8:	80 5c       	subi	r24, 0xC0	; 192
    23fa:	9f 4f       	sbci	r25, 0xFF	; 255
    23fc:	fc 01       	movw	r30, r24
    23fe:	80 81       	ld	r24, Z
    2400:	28 2f       	mov	r18, r24
    2402:	2a 95       	dec	r18
    2404:	f1 f7       	brne	.-4      	; 0x2402 <lcd_write_data+0x444>
    2406:	ce 01       	movw	r24, r28
    2408:	80 5c       	subi	r24, 0xC0	; 192
    240a:	9f 4f       	sbci	r25, 0xFF	; 255
    240c:	fc 01       	movw	r30, r24
    240e:	20 83       	st	Z, r18
	_delay_us(100);
	LCD_PORT |= (1<<LCD_E);
    2410:	8b e3       	ldi	r24, 0x3B	; 59
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	2b e3       	ldi	r18, 0x3B	; 59
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	f9 01       	movw	r30, r18
    241a:	20 81       	ld	r18, Z
    241c:	28 60       	ori	r18, 0x08	; 8
    241e:	fc 01       	movw	r30, r24
    2420:	20 83       	st	Z, r18
	LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f) << 4);
    2422:	8b e3       	ldi	r24, 0x3B	; 59
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	2b e3       	ldi	r18, 0x3B	; 59
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	f9 01       	movw	r30, r18
    242c:	20 81       	ld	r18, Z
    242e:	42 2f       	mov	r20, r18
    2430:	4f 70       	andi	r20, 0x0F	; 15
    2432:	9e 01       	movw	r18, r28
    2434:	2f 57       	subi	r18, 0x7F	; 127
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	f9 01       	movw	r30, r18
    243a:	20 81       	ld	r18, Z
    243c:	22 2f       	mov	r18, r18
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	22 95       	swap	r18
    2442:	32 95       	swap	r19
    2444:	30 7f       	andi	r19, 0xF0	; 240
    2446:	32 27       	eor	r19, r18
    2448:	20 7f       	andi	r18, 0xF0	; 240
    244a:	32 27       	eor	r19, r18
    244c:	24 2b       	or	r18, r20
    244e:	fc 01       	movw	r30, r24
    2450:	20 83       	st	Z, r18
    2452:	9e 01       	movw	r18, r28
    2454:	2f 5b       	subi	r18, 0xBF	; 191
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a0 e8       	ldi	r26, 0x80	; 128
    245e:	bf e3       	ldi	r27, 0x3F	; 63
    2460:	f9 01       	movw	r30, r18
    2462:	80 83       	st	Z, r24
    2464:	91 83       	std	Z+1, r25	; 0x01
    2466:	a2 83       	std	Z+2, r26	; 0x02
    2468:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    246a:	8e 01       	movw	r16, r28
    246c:	0b 5b       	subi	r16, 0xBB	; 187
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	ce 01       	movw	r24, r28
    2472:	8f 5b       	subi	r24, 0xBF	; 191
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	2a ef       	ldi	r18, 0xFA	; 250
    2478:	3d ee       	ldi	r19, 0xED	; 237
    247a:	4b e6       	ldi	r20, 0x6B	; 107
    247c:	50 e4       	ldi	r21, 0x40	; 64
    247e:	fc 01       	movw	r30, r24
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	f8 01       	movw	r30, r16
    2492:	80 83       	st	Z, r24
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	a2 83       	std	Z+2, r26	; 0x02
    2498:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    249a:	8e 01       	movw	r16, r28
    249c:	07 5b       	subi	r16, 0xB7	; 183
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	ce 01       	movw	r24, r28
    24a2:	8f 5b       	subi	r24, 0xBF	; 191
    24a4:	9f 4f       	sbci	r25, 0xFF	; 255
    24a6:	2c e7       	ldi	r18, 0x7C	; 124
    24a8:	32 ef       	ldi	r19, 0xF2	; 242
    24aa:	40 e3       	ldi	r20, 0x30	; 48
    24ac:	50 e4       	ldi	r21, 0x40	; 64
    24ae:	fc 01       	movw	r30, r24
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	f8 01       	movw	r30, r16
    24c2:	80 83       	st	Z, r24
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	a2 83       	std	Z+2, r26	; 0x02
    24c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ca:	ce 01       	movw	r24, r28
    24cc:	8b 5b       	subi	r24, 0xBB	; 187
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	fc 01       	movw	r30, r24
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	3c f4       	brge	.+14     	; 0x24f8 <lcd_write_data+0x53a>
		__ticks = 1;
    24ea:	ce 01       	movw	r24, r28
    24ec:	83 5b       	subi	r24, 0xB3	; 179
    24ee:	9f 4f       	sbci	r25, 0xFF	; 255
    24f0:	21 e0       	ldi	r18, 0x01	; 1
    24f2:	fc 01       	movw	r30, r24
    24f4:	20 83       	st	Z, r18
    24f6:	30 c1       	rjmp	.+608    	; 0x2758 <lcd_write_data+0x79a>
	else if (__tmp2 > 65535)
    24f8:	ce 01       	movw	r24, r28
    24fa:	87 5b       	subi	r24, 0xB7	; 183
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	fc 01       	movw	r30, r24
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    2514:	18 16       	cp	r1, r24
    2516:	0c f0       	brlt	.+2      	; 0x251a <lcd_write_data+0x55c>
    2518:	d1 c0       	rjmp	.+418    	; 0x26bc <lcd_write_data+0x6fe>
	{
		_delay_ms(__us / 1000.0);
    251a:	ce 01       	movw	r24, r28
    251c:	8f 5b       	subi	r24, 0xBF	; 191
    251e:	9f 4f       	sbci	r25, 0xFF	; 255
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a e7       	ldi	r20, 0x7A	; 122
    2526:	54 e4       	ldi	r21, 0x44	; 68
    2528:	fc 01       	movw	r30, r24
    252a:	60 81       	ld	r22, Z
    252c:	71 81       	ldd	r23, Z+1	; 0x01
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	93 81       	ldd	r25, Z+3	; 0x03
    2532:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 01       	movw	r18, r28
    253c:	22 5b       	subi	r18, 0xB2	; 178
    253e:	3f 4f       	sbci	r19, 0xFF	; 255
    2540:	f9 01       	movw	r30, r18
    2542:	80 83       	st	Z, r24
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	a2 83       	std	Z+2, r26	; 0x02
    2548:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    254a:	8e 01       	movw	r16, r28
    254c:	0e 5a       	subi	r16, 0xAE	; 174
    254e:	1f 4f       	sbci	r17, 0xFF	; 255
    2550:	ce 01       	movw	r24, r28
    2552:	82 5b       	subi	r24, 0xB2	; 178
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	2d ec       	ldi	r18, 0xCD	; 205
    2558:	3c ec       	ldi	r19, 0xCC	; 204
    255a:	4c e2       	ldi	r20, 0x2C	; 44
    255c:	55 e4       	ldi	r21, 0x45	; 69
    255e:	fc 01       	movw	r30, r24
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	f8 01       	movw	r30, r16
    2572:	80 83       	st	Z, r24
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	a2 83       	std	Z+2, r26	; 0x02
    2578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    257a:	ce 01       	movw	r24, r28
    257c:	8e 5a       	subi	r24, 0xAE	; 174
    257e:	9f 4f       	sbci	r25, 0xFF	; 255
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e8       	ldi	r20, 0x80	; 128
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	fc 01       	movw	r30, r24
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    2596:	88 23       	and	r24, r24
    2598:	4c f4       	brge	.+18     	; 0x25ac <lcd_write_data+0x5ee>
		__ticks = 1;
    259a:	ce 01       	movw	r24, r28
    259c:	8a 5a       	subi	r24, 0xAA	; 170
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	21 e0       	ldi	r18, 0x01	; 1
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	fc 01       	movw	r30, r24
    25a6:	31 83       	std	Z+1, r19	; 0x01
    25a8:	20 83       	st	Z, r18
    25aa:	6d c0       	rjmp	.+218    	; 0x2686 <lcd_write_data+0x6c8>
	else if (__tmp > 65535)
    25ac:	ce 01       	movw	r24, r28
    25ae:	8e 5a       	subi	r24, 0xAE	; 174
    25b0:	9f 4f       	sbci	r25, 0xFF	; 255
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	fc 01       	movw	r30, r24
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <lcd_write_data+0x610>
    25cc:	4a c0       	rjmp	.+148    	; 0x2662 <lcd_write_data+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	ce 01       	movw	r24, r28
    25d0:	82 5b       	subi	r24, 0xB2	; 178
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	fc 01       	movw	r30, r24
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	8e 01       	movw	r16, r28
    25f0:	0a 5a       	subi	r16, 0xAA	; 170
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	bc 01       	movw	r22, r24
    25f6:	cd 01       	movw	r24, r26
    25f8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	f8 01       	movw	r30, r16
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
    2606:	24 c0       	rjmp	.+72     	; 0x2650 <lcd_write_data+0x692>
    2608:	ce 01       	movw	r24, r28
    260a:	88 5a       	subi	r24, 0xA8	; 168
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	24 e1       	ldi	r18, 0x14	; 20
    2610:	31 e0       	ldi	r19, 0x01	; 1
    2612:	fc 01       	movw	r30, r24
    2614:	31 83       	std	Z+1, r19	; 0x01
    2616:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2618:	ce 01       	movw	r24, r28
    261a:	88 5a       	subi	r24, 0xA8	; 168
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	fc 01       	movw	r30, r24
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <lcd_write_data+0x666>
    2628:	9e 01       	movw	r18, r28
    262a:	28 5a       	subi	r18, 0xA8	; 168
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	f9 01       	movw	r30, r18
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	ce 01       	movw	r24, r28
    2636:	8a 5a       	subi	r24, 0xAA	; 170
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	9e 01       	movw	r18, r28
    263c:	2a 5a       	subi	r18, 0xAA	; 170
    263e:	3f 4f       	sbci	r19, 0xFF	; 255
    2640:	f9 01       	movw	r30, r18
    2642:	20 81       	ld	r18, Z
    2644:	31 81       	ldd	r19, Z+1	; 0x01
    2646:	21 50       	subi	r18, 0x01	; 1
    2648:	31 09       	sbc	r19, r1
    264a:	fc 01       	movw	r30, r24
    264c:	31 83       	std	Z+1, r19	; 0x01
    264e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	ce 01       	movw	r24, r28
    2652:	8a 5a       	subi	r24, 0xAA	; 170
    2654:	9f 4f       	sbci	r25, 0xFF	; 255
    2656:	fc 01       	movw	r30, r24
    2658:	80 81       	ld	r24, Z
    265a:	91 81       	ldd	r25, Z+1	; 0x01
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	a1 f6       	brne	.-88     	; 0x2608 <lcd_write_data+0x64a>
    2660:	7b c0       	rjmp	.+246    	; 0x2758 <lcd_write_data+0x79a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2662:	8e 01       	movw	r16, r28
    2664:	0a 5a       	subi	r16, 0xAA	; 170
    2666:	1f 4f       	sbci	r17, 0xFF	; 255
    2668:	ce 01       	movw	r24, r28
    266a:	8e 5a       	subi	r24, 0xAE	; 174
    266c:	9f 4f       	sbci	r25, 0xFF	; 255
    266e:	fc 01       	movw	r30, r24
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	f8 01       	movw	r30, r16
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
    2686:	ce 01       	movw	r24, r28
    2688:	86 5a       	subi	r24, 0xA6	; 166
    268a:	9f 4f       	sbci	r25, 0xFF	; 255
    268c:	9e 01       	movw	r18, r28
    268e:	2a 5a       	subi	r18, 0xAA	; 170
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	f9 01       	movw	r30, r18
    2694:	20 81       	ld	r18, Z
    2696:	31 81       	ldd	r19, Z+1	; 0x01
    2698:	fc 01       	movw	r30, r24
    269a:	31 83       	std	Z+1, r19	; 0x01
    269c:	20 83       	st	Z, r18
    269e:	ce 01       	movw	r24, r28
    26a0:	86 5a       	subi	r24, 0xA6	; 166
    26a2:	9f 4f       	sbci	r25, 0xFF	; 255
    26a4:	fc 01       	movw	r30, r24
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <lcd_write_data+0x6ec>
    26ae:	9e 01       	movw	r18, r28
    26b0:	26 5a       	subi	r18, 0xA6	; 166
    26b2:	3f 4f       	sbci	r19, 0xFF	; 255
    26b4:	f9 01       	movw	r30, r18
    26b6:	91 83       	std	Z+1, r25	; 0x01
    26b8:	80 83       	st	Z, r24
    26ba:	4e c0       	rjmp	.+156    	; 0x2758 <lcd_write_data+0x79a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    26bc:	ce 01       	movw	r24, r28
    26be:	8b 5b       	subi	r24, 0xBB	; 187
    26c0:	9f 4f       	sbci	r25, 0xFF	; 255
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	53 e4       	ldi	r21, 0x43	; 67
    26ca:	fc 01       	movw	r30, r24
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    26d8:	18 16       	cp	r1, r24
    26da:	6c f5       	brge	.+90     	; 0x2736 <lcd_write_data+0x778>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    26dc:	8e 01       	movw	r16, r28
    26de:	04 5a       	subi	r16, 0xA4	; 164
    26e0:	1f 4f       	sbci	r17, 0xFF	; 255
    26e2:	ce 01       	movw	r24, r28
    26e4:	87 5b       	subi	r24, 0xB7	; 183
    26e6:	9f 4f       	sbci	r25, 0xFF	; 255
    26e8:	fc 01       	movw	r30, r24
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	93 81       	ldd	r25, Z+3	; 0x03
    26f2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	f8 01       	movw	r30, r16
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
    2700:	ce 01       	movw	r24, r28
    2702:	82 5a       	subi	r24, 0xA2	; 162
    2704:	9f 4f       	sbci	r25, 0xFF	; 255
    2706:	9e 01       	movw	r18, r28
    2708:	24 5a       	subi	r18, 0xA4	; 164
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	f9 01       	movw	r30, r18
    270e:	20 81       	ld	r18, Z
    2710:	31 81       	ldd	r19, Z+1	; 0x01
    2712:	fc 01       	movw	r30, r24
    2714:	31 83       	std	Z+1, r19	; 0x01
    2716:	20 83       	st	Z, r18
    2718:	ce 01       	movw	r24, r28
    271a:	82 5a       	subi	r24, 0xA2	; 162
    271c:	9f 4f       	sbci	r25, 0xFF	; 255
    271e:	fc 01       	movw	r30, r24
    2720:	80 81       	ld	r24, Z
    2722:	91 81       	ldd	r25, Z+1	; 0x01
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <lcd_write_data+0x766>
    2728:	9e 01       	movw	r18, r28
    272a:	22 5a       	subi	r18, 0xA2	; 162
    272c:	3f 4f       	sbci	r19, 0xFF	; 255
    272e:	f9 01       	movw	r30, r18
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	28 c0       	rjmp	.+80     	; 0x2786 <lcd_write_data+0x7c8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2736:	8e 01       	movw	r16, r28
    2738:	03 5b       	subi	r16, 0xB3	; 179
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	ce 01       	movw	r24, r28
    273e:	8b 5b       	subi	r24, 0xBB	; 187
    2740:	9f 4f       	sbci	r25, 0xFF	; 255
    2742:	fc 01       	movw	r30, r24
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	80 83       	st	Z, r24
    2758:	ce 01       	movw	r24, r28
    275a:	80 5a       	subi	r24, 0xA0	; 160
    275c:	9f 4f       	sbci	r25, 0xFF	; 255
    275e:	9e 01       	movw	r18, r28
    2760:	23 5b       	subi	r18, 0xB3	; 179
    2762:	3f 4f       	sbci	r19, 0xFF	; 255
    2764:	f9 01       	movw	r30, r18
    2766:	20 81       	ld	r18, Z
    2768:	fc 01       	movw	r30, r24
    276a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    276c:	ce 01       	movw	r24, r28
    276e:	80 5a       	subi	r24, 0xA0	; 160
    2770:	9f 4f       	sbci	r25, 0xFF	; 255
    2772:	fc 01       	movw	r30, r24
    2774:	80 81       	ld	r24, Z
    2776:	28 2f       	mov	r18, r24
    2778:	2a 95       	dec	r18
    277a:	f1 f7       	brne	.-4      	; 0x2778 <lcd_write_data+0x7ba>
    277c:	ce 01       	movw	r24, r28
    277e:	80 5a       	subi	r24, 0xA0	; 160
    2780:	9f 4f       	sbci	r25, 0xFF	; 255
    2782:	fc 01       	movw	r30, r24
    2784:	20 83       	st	Z, r18
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
    2786:	8b e3       	ldi	r24, 0x3B	; 59
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	2b e3       	ldi	r18, 0x3B	; 59
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	f9 01       	movw	r30, r18
    2790:	20 81       	ld	r18, Z
    2792:	27 7f       	andi	r18, 0xF7	; 247
    2794:	fc 01       	movw	r30, r24
    2796:	20 83       	st	Z, r18
    2798:	9e 01       	movw	r18, r28
    279a:	2f 59       	subi	r18, 0x9F	; 159
    279c:	3f 4f       	sbci	r19, 0xFF	; 255
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a8 ec       	ldi	r26, 0xC8	; 200
    27a4:	b2 e4       	ldi	r27, 0x42	; 66
    27a6:	f9 01       	movw	r30, r18
    27a8:	80 83       	st	Z, r24
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	a2 83       	std	Z+2, r26	; 0x02
    27ae:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    27b0:	8e 01       	movw	r16, r28
    27b2:	0b 59       	subi	r16, 0x9B	; 155
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	ce 01       	movw	r24, r28
    27b8:	8f 59       	subi	r24, 0x9F	; 159
    27ba:	9f 4f       	sbci	r25, 0xFF	; 255
    27bc:	2a ef       	ldi	r18, 0xFA	; 250
    27be:	3d ee       	ldi	r19, 0xED	; 237
    27c0:	4b e6       	ldi	r20, 0x6B	; 107
    27c2:	50 e4       	ldi	r21, 0x40	; 64
    27c4:	fc 01       	movw	r30, r24
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	f8 01       	movw	r30, r16
    27d8:	80 83       	st	Z, r24
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	a2 83       	std	Z+2, r26	; 0x02
    27de:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    27e0:	8e 01       	movw	r16, r28
    27e2:	07 59       	subi	r16, 0x97	; 151
    27e4:	1f 4f       	sbci	r17, 0xFF	; 255
    27e6:	ce 01       	movw	r24, r28
    27e8:	8f 59       	subi	r24, 0x9F	; 159
    27ea:	9f 4f       	sbci	r25, 0xFF	; 255
    27ec:	2c e7       	ldi	r18, 0x7C	; 124
    27ee:	32 ef       	ldi	r19, 0xF2	; 242
    27f0:	40 e3       	ldi	r20, 0x30	; 48
    27f2:	50 e4       	ldi	r21, 0x40	; 64
    27f4:	fc 01       	movw	r30, r24
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	f8 01       	movw	r30, r16
    2808:	80 83       	st	Z, r24
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	a2 83       	std	Z+2, r26	; 0x02
    280e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2810:	ce 01       	movw	r24, r28
    2812:	8b 59       	subi	r24, 0x9B	; 155
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e8       	ldi	r20, 0x80	; 128
    281c:	5f e3       	ldi	r21, 0x3F	; 63
    281e:	fc 01       	movw	r30, r24
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    282c:	88 23       	and	r24, r24
    282e:	3c f4       	brge	.+14     	; 0x283e <lcd_write_data+0x880>
		__ticks = 1;
    2830:	ce 01       	movw	r24, r28
    2832:	83 59       	subi	r24, 0x93	; 147
    2834:	9f 4f       	sbci	r25, 0xFF	; 255
    2836:	21 e0       	ldi	r18, 0x01	; 1
    2838:	fc 01       	movw	r30, r24
    283a:	20 83       	st	Z, r18
    283c:	30 c1       	rjmp	.+608    	; 0x2a9e <lcd_write_data+0xae0>
	else if (__tmp2 > 65535)
    283e:	ce 01       	movw	r24, r28
    2840:	87 59       	subi	r24, 0x97	; 151
    2842:	9f 4f       	sbci	r25, 0xFF	; 255
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	fc 01       	movw	r30, r24
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    285a:	18 16       	cp	r1, r24
    285c:	0c f0       	brlt	.+2      	; 0x2860 <lcd_write_data+0x8a2>
    285e:	d1 c0       	rjmp	.+418    	; 0x2a02 <lcd_write_data+0xa44>
	{
		_delay_ms(__us / 1000.0);
    2860:	ce 01       	movw	r24, r28
    2862:	8f 59       	subi	r24, 0x9F	; 159
    2864:	9f 4f       	sbci	r25, 0xFF	; 255
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4a e7       	ldi	r20, 0x7A	; 122
    286c:	54 e4       	ldi	r21, 0x44	; 68
    286e:	fc 01       	movw	r30, r24
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9e 01       	movw	r18, r28
    2882:	22 59       	subi	r18, 0x92	; 146
    2884:	3f 4f       	sbci	r19, 0xFF	; 255
    2886:	f9 01       	movw	r30, r18
    2888:	80 83       	st	Z, r24
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	a2 83       	std	Z+2, r26	; 0x02
    288e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2890:	8e 01       	movw	r16, r28
    2892:	0e 58       	subi	r16, 0x8E	; 142
    2894:	1f 4f       	sbci	r17, 0xFF	; 255
    2896:	ce 01       	movw	r24, r28
    2898:	82 59       	subi	r24, 0x92	; 146
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	2d ec       	ldi	r18, 0xCD	; 205
    289e:	3c ec       	ldi	r19, 0xCC	; 204
    28a0:	4c e2       	ldi	r20, 0x2C	; 44
    28a2:	55 e4       	ldi	r21, 0x45	; 69
    28a4:	fc 01       	movw	r30, r24
    28a6:	60 81       	ld	r22, Z
    28a8:	71 81       	ldd	r23, Z+1	; 0x01
    28aa:	82 81       	ldd	r24, Z+2	; 0x02
    28ac:	93 81       	ldd	r25, Z+3	; 0x03
    28ae:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	f8 01       	movw	r30, r16
    28b8:	80 83       	st	Z, r24
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	a2 83       	std	Z+2, r26	; 0x02
    28be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c0:	ce 01       	movw	r24, r28
    28c2:	8e 58       	subi	r24, 0x8E	; 142
    28c4:	9f 4f       	sbci	r25, 0xFF	; 255
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	fc 01       	movw	r30, r24
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__cmpsf2>
    28dc:	88 23       	and	r24, r24
    28de:	4c f4       	brge	.+18     	; 0x28f2 <lcd_write_data+0x934>
		__ticks = 1;
    28e0:	ce 01       	movw	r24, r28
    28e2:	8a 58       	subi	r24, 0x8A	; 138
    28e4:	9f 4f       	sbci	r25, 0xFF	; 255
    28e6:	21 e0       	ldi	r18, 0x01	; 1
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	fc 01       	movw	r30, r24
    28ec:	31 83       	std	Z+1, r19	; 0x01
    28ee:	20 83       	st	Z, r18
    28f0:	6d c0       	rjmp	.+218    	; 0x29cc <lcd_write_data+0xa0e>
	else if (__tmp > 65535)
    28f2:	ce 01       	movw	r24, r28
    28f4:	8e 58       	subi	r24, 0x8E	; 142
    28f6:	9f 4f       	sbci	r25, 0xFF	; 255
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	3f ef       	ldi	r19, 0xFF	; 255
    28fc:	4f e7       	ldi	r20, 0x7F	; 127
    28fe:	57 e4       	ldi	r21, 0x47	; 71
    2900:	fc 01       	movw	r30, r24
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    290e:	18 16       	cp	r1, r24
    2910:	0c f0       	brlt	.+2      	; 0x2914 <lcd_write_data+0x956>
    2912:	4a c0       	rjmp	.+148    	; 0x29a8 <lcd_write_data+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	ce 01       	movw	r24, r28
    2916:	82 59       	subi	r24, 0x92	; 146
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e2       	ldi	r20, 0x20	; 32
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	fc 01       	movw	r30, r24
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8e 01       	movw	r16, r28
    2936:	0a 58       	subi	r16, 0x8A	; 138
    2938:	1f 4f       	sbci	r17, 0xFF	; 255
    293a:	bc 01       	movw	r22, r24
    293c:	cd 01       	movw	r24, r26
    293e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	f8 01       	movw	r30, r16
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	80 83       	st	Z, r24
    294c:	24 c0       	rjmp	.+72     	; 0x2996 <lcd_write_data+0x9d8>
    294e:	ce 01       	movw	r24, r28
    2950:	88 58       	subi	r24, 0x88	; 136
    2952:	9f 4f       	sbci	r25, 0xFF	; 255
    2954:	24 e1       	ldi	r18, 0x14	; 20
    2956:	31 e0       	ldi	r19, 0x01	; 1
    2958:	fc 01       	movw	r30, r24
    295a:	31 83       	std	Z+1, r19	; 0x01
    295c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    295e:	ce 01       	movw	r24, r28
    2960:	88 58       	subi	r24, 0x88	; 136
    2962:	9f 4f       	sbci	r25, 0xFF	; 255
    2964:	fc 01       	movw	r30, r24
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <lcd_write_data+0x9ac>
    296e:	9e 01       	movw	r18, r28
    2970:	28 58       	subi	r18, 0x88	; 136
    2972:	3f 4f       	sbci	r19, 0xFF	; 255
    2974:	f9 01       	movw	r30, r18
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297a:	ce 01       	movw	r24, r28
    297c:	8a 58       	subi	r24, 0x8A	; 138
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	9e 01       	movw	r18, r28
    2982:	2a 58       	subi	r18, 0x8A	; 138
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	f9 01       	movw	r30, r18
    2988:	20 81       	ld	r18, Z
    298a:	31 81       	ldd	r19, Z+1	; 0x01
    298c:	21 50       	subi	r18, 0x01	; 1
    298e:	31 09       	sbc	r19, r1
    2990:	fc 01       	movw	r30, r24
    2992:	31 83       	std	Z+1, r19	; 0x01
    2994:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2996:	ce 01       	movw	r24, r28
    2998:	8a 58       	subi	r24, 0x8A	; 138
    299a:	9f 4f       	sbci	r25, 0xFF	; 255
    299c:	fc 01       	movw	r30, r24
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	a1 f6       	brne	.-88     	; 0x294e <lcd_write_data+0x990>
    29a6:	7b c0       	rjmp	.+246    	; 0x2a9e <lcd_write_data+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a8:	8e 01       	movw	r16, r28
    29aa:	0a 58       	subi	r16, 0x8A	; 138
    29ac:	1f 4f       	sbci	r17, 0xFF	; 255
    29ae:	ce 01       	movw	r24, r28
    29b0:	8e 58       	subi	r24, 0x8E	; 142
    29b2:	9f 4f       	sbci	r25, 0xFF	; 255
    29b4:	fc 01       	movw	r30, r24
    29b6:	60 81       	ld	r22, Z
    29b8:	71 81       	ldd	r23, Z+1	; 0x01
    29ba:	82 81       	ldd	r24, Z+2	; 0x02
    29bc:	93 81       	ldd	r25, Z+3	; 0x03
    29be:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	f8 01       	movw	r30, r16
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
    29cc:	ce 01       	movw	r24, r28
    29ce:	86 58       	subi	r24, 0x86	; 134
    29d0:	9f 4f       	sbci	r25, 0xFF	; 255
    29d2:	9e 01       	movw	r18, r28
    29d4:	2a 58       	subi	r18, 0x8A	; 138
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	f9 01       	movw	r30, r18
    29da:	20 81       	ld	r18, Z
    29dc:	31 81       	ldd	r19, Z+1	; 0x01
    29de:	fc 01       	movw	r30, r24
    29e0:	31 83       	std	Z+1, r19	; 0x01
    29e2:	20 83       	st	Z, r18
    29e4:	ce 01       	movw	r24, r28
    29e6:	86 58       	subi	r24, 0x86	; 134
    29e8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ea:	fc 01       	movw	r30, r24
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <lcd_write_data+0xa32>
    29f4:	9e 01       	movw	r18, r28
    29f6:	26 58       	subi	r18, 0x86	; 134
    29f8:	3f 4f       	sbci	r19, 0xFF	; 255
    29fa:	f9 01       	movw	r30, r18
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	80 83       	st	Z, r24
    2a00:	4e c0       	rjmp	.+156    	; 0x2a9e <lcd_write_data+0xae0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2a02:	ce 01       	movw	r24, r28
    2a04:	8b 59       	subi	r24, 0x9B	; 155
    2a06:	9f 4f       	sbci	r25, 0xFF	; 255
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	53 e4       	ldi	r21, 0x43	; 67
    2a10:	fc 01       	movw	r30, r24
    2a12:	60 81       	ld	r22, Z
    2a14:	71 81       	ldd	r23, Z+1	; 0x01
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	0e 94 47 19 	call	0x328e	; 0x328e <__gesf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	6c f5       	brge	.+90     	; 0x2a7c <lcd_write_data+0xabe>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2a22:	8e 01       	movw	r16, r28
    2a24:	04 58       	subi	r16, 0x84	; 132
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	ce 01       	movw	r24, r28
    2a2a:	87 59       	subi	r24, 0x97	; 151
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	fc 01       	movw	r30, r24
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	f8 01       	movw	r30, r16
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
    2a46:	ce 01       	movw	r24, r28
    2a48:	82 58       	subi	r24, 0x82	; 130
    2a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4c:	9e 01       	movw	r18, r28
    2a4e:	24 58       	subi	r18, 0x84	; 132
    2a50:	3f 4f       	sbci	r19, 0xFF	; 255
    2a52:	f9 01       	movw	r30, r18
    2a54:	20 81       	ld	r18, Z
    2a56:	31 81       	ldd	r19, Z+1	; 0x01
    2a58:	fc 01       	movw	r30, r24
    2a5a:	31 83       	std	Z+1, r19	; 0x01
    2a5c:	20 83       	st	Z, r18
    2a5e:	ce 01       	movw	r24, r28
    2a60:	82 58       	subi	r24, 0x82	; 130
    2a62:	9f 4f       	sbci	r25, 0xFF	; 255
    2a64:	fc 01       	movw	r30, r24
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <lcd_write_data+0xaac>
    2a6e:	9e 01       	movw	r18, r28
    2a70:	22 58       	subi	r18, 0x82	; 130
    2a72:	3f 4f       	sbci	r19, 0xFF	; 255
    2a74:	f9 01       	movw	r30, r18
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	28 c0       	rjmp	.+80     	; 0x2acc <lcd_write_data+0xb0e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a7c:	8e 01       	movw	r16, r28
    2a7e:	03 59       	subi	r16, 0x93	; 147
    2a80:	1f 4f       	sbci	r17, 0xFF	; 255
    2a82:	ce 01       	movw	r24, r28
    2a84:	8b 59       	subi	r24, 0x9B	; 155
    2a86:	9f 4f       	sbci	r25, 0xFF	; 255
    2a88:	fc 01       	movw	r30, r24
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	80 83       	st	Z, r24
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	80 58       	subi	r24, 0x80	; 128
    2aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa4:	9e 01       	movw	r18, r28
    2aa6:	23 59       	subi	r18, 0x93	; 147
    2aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aaa:	f9 01       	movw	r30, r18
    2aac:	20 81       	ld	r18, Z
    2aae:	fc 01       	movw	r30, r24
    2ab0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	80 58       	subi	r24, 0x80	; 128
    2ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab8:	fc 01       	movw	r30, r24
    2aba:	80 81       	ld	r24, Z
    2abc:	28 2f       	mov	r18, r24
    2abe:	2a 95       	dec	r18
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <lcd_write_data+0xb00>
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	80 58       	subi	r24, 0x80	; 128
    2ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac8:	fc 01       	movw	r30, r24
    2aca:	20 83       	st	Z, r18
	_delay_us(100);
}
    2acc:	cf 57       	subi	r28, 0x7F	; 127
    2ace:	df 4f       	sbci	r29, 0xFF	; 255
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	08 95       	ret

00002ae4 <lcd_set_xy>:

void lcd_set_xy(uint8_t x,uint8_t y)
{
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <lcd_set_xy+0x6>
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	6a 83       	std	Y+2, r22	; 0x02
	lcd_write_instr(0x80+y+0x40*x);
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	98 2f       	mov	r25, r24
    2af6:	92 95       	swap	r25
    2af8:	99 0f       	add	r25, r25
    2afa:	99 0f       	add	r25, r25
    2afc:	90 7c       	andi	r25, 0xC0	; 192
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	89 0f       	add	r24, r25
    2b02:	80 58       	subi	r24, 0x80	; 128
    2b04:	0e 94 4c 0a 	call	0x1498	; 0x1498 <lcd_write_instr>
}
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	08 95       	ret

00002b12 <lcd_write_text_xy>:

void lcd_write_text_xy(uint8_t x,uint8_t y, char* text)
{
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <lcd_write_text_xy+0x6>
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <lcd_write_text_xy+0x8>
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    2b20:	6a 83       	std	Y+2, r22	; 0x02
    2b22:	5c 83       	std	Y+4, r21	; 0x04
    2b24:	4b 83       	std	Y+3, r20	; 0x03
	lcd_set_xy(x,y);
    2b26:	6a 81       	ldd	r22, Y+2	; 0x02
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_set_xy>
	lcd_write_data(text);
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	9c 81       	ldd	r25, Y+4	; 0x04
    2b32:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <lcd_write_data>
}
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	08 95       	ret

00002b44 <lcd_write_text_P>:

void lcd_write_text_P(const char* text)
{
    2b44:	1f 93       	push	r17
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <lcd_write_text_P+0x8>
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <lcd_write_text_P+0xa>
    2b4e:	1f 92       	push	r1
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	9d 83       	std	Y+5, r25	; 0x05
    2b56:	8c 83       	std	Y+4, r24	; 0x04
	register uint8_t ch;
	while( (ch = pgm_read_byte(text++)))
    2b58:	03 c0       	rjmp	.+6      	; 0x2b60 <lcd_write_text_P+0x1c>
		lcd_write_data(ch);
    2b5a:	81 2f       	mov	r24, r17
    2b5c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <lcd_write_data>
}

void lcd_write_text_P(const char* text)
{
	register uint8_t ch;
	while( (ch = pgm_read_byte(text++)))
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	9d 81       	ldd	r25, Y+5	; 0x05
    2b64:	9c 01       	movw	r18, r24
    2b66:	2f 5f       	subi	r18, 0xFF	; 255
    2b68:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6a:	3d 83       	std	Y+5, r19	; 0x05
    2b6c:	2c 83       	std	Y+4, r18	; 0x04
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	fc 01       	movw	r30, r24
    2b78:	84 91       	lpm	r24, Z
    2b7a:	8b 83       	std	Y+3, r24	; 0x03
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	18 2f       	mov	r17, r24
    2b80:	11 23       	and	r17, r17
    2b82:	59 f7       	brne	.-42     	; 0x2b5a <lcd_write_text_P+0x16>
		lcd_write_data(ch);
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	08 95       	ret

00002b96 <uart_putchar>:
volatile uint16_t liczba = 20;
static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <uart_putchar+0x6>
    2b9c:	1f 92       	push	r1
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	7b 83       	std	Y+3, r23	; 0x03
    2ba6:	6a 83       	std	Y+2, r22	; 0x02
lcd_write_data(c);
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <lcd_write_data>
return 0;
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	08 95       	ret

00002bbe <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2bbe:	1f 92       	push	r1
    2bc0:	0f 92       	push	r0
    2bc2:	00 90 5f 00 	lds	r0, 0x005F
    2bc6:	0f 92       	push	r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	2f 93       	push	r18
    2bcc:	3f 93       	push	r19
    2bce:	4f 93       	push	r20
    2bd0:	5f 93       	push	r21
    2bd2:	6f 93       	push	r22
    2bd4:	7f 93       	push	r23
    2bd6:	8f 93       	push	r24
    2bd8:	9f 93       	push	r25
    2bda:	af 93       	push	r26
    2bdc:	bf 93       	push	r27
    2bde:	ef 93       	push	r30
    2be0:	ff 93       	push	r31
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
	SS_ENABLE();
    2bea:	88 e3       	ldi	r24, 0x38	; 56
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	28 e3       	ldi	r18, 0x38	; 56
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	f9 01       	movw	r30, r18
    2bf4:	20 81       	ld	r18, Z
    2bf6:	2f 7e       	andi	r18, 0xEF	; 239
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	20 83       	st	Z, r18
	TransferSPI(1);
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <TransferSPI>
	TransferSPI(0xA0);
    2c02:	80 ea       	ldi	r24, 0xA0	; 160
    2c04:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <TransferSPI>
	liczba = (SPDR & 0x0f)<<8;
    2c08:	8f e2       	ldi	r24, 0x2F	; 47
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	80 81       	ld	r24, Z
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	8f 70       	andi	r24, 0x0F	; 15
    2c16:	99 27       	eor	r25, r25
    2c18:	98 2f       	mov	r25, r24
    2c1a:	88 27       	eor	r24, r24
    2c1c:	90 93 61 00 	sts	0x0061, r25
    2c20:	80 93 60 00 	sts	0x0060, r24
	TransferSPI(0);
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <TransferSPI>
	liczba |= SPDR;
    2c2a:	8f e2       	ldi	r24, 0x2F	; 47
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	fc 01       	movw	r30, r24
    2c30:	80 81       	ld	r24, Z
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	80 91 60 00 	lds	r24, 0x0060
    2c3a:	90 91 61 00 	lds	r25, 0x0061
    2c3e:	82 2b       	or	r24, r18
    2c40:	93 2b       	or	r25, r19
    2c42:	90 93 61 00 	sts	0x0061, r25
    2c46:	80 93 60 00 	sts	0x0060, r24
	SS_DISABLE();
    2c4a:	88 e3       	ldi	r24, 0x38	; 56
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	28 e3       	ldi	r18, 0x38	; 56
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	f9 01       	movw	r30, r18
    2c54:	20 81       	ld	r18, Z
    2c56:	20 61       	ori	r18, 0x10	; 16
    2c58:	fc 01       	movw	r30, r24
    2c5a:	20 83       	st	Z, r18

}
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	ff 91       	pop	r31
    2c62:	ef 91       	pop	r30
    2c64:	bf 91       	pop	r27
    2c66:	af 91       	pop	r26
    2c68:	9f 91       	pop	r25
    2c6a:	8f 91       	pop	r24
    2c6c:	7f 91       	pop	r23
    2c6e:	6f 91       	pop	r22
    2c70:	5f 91       	pop	r21
    2c72:	4f 91       	pop	r20
    2c74:	3f 91       	pop	r19
    2c76:	2f 91       	pop	r18
    2c78:	0f 90       	pop	r0
    2c7a:	00 92 5f 00 	sts	0x005F, r0
    2c7e:	0f 90       	pop	r0
    2c80:	1f 90       	pop	r1
    2c82:	18 95       	reti

00002c84 <main>:


int main()
{
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	e4 97       	sbiw	r28, 0x34	; 52
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61


	stdout = &mystdout;
    2c98:	82 e6       	ldi	r24, 0x62	; 98
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	90 93 81 00 	sts	0x0081, r25
    2ca0:	80 93 80 00 	sts	0x0080, r24
	lcdinit();
    2ca4:	0e 94 45 04 	call	0x88a	; 0x88a <lcdinit>
	InitSPI();
    2ca8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <InitSPI>
	TCCR1B |= (1<<WGM12) | (1<<CS11) | (1<<CS10);
    2cac:	8e e4       	ldi	r24, 0x4E	; 78
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	2e e4       	ldi	r18, 0x4E	; 78
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	f9 01       	movw	r30, r18
    2cb6:	20 81       	ld	r18, Z
    2cb8:	2b 60       	ori	r18, 0x0B	; 11
    2cba:	fc 01       	movw	r30, r24
    2cbc:	20 83       	st	Z, r18
	OCR1A = 17280;
    2cbe:	8a e4       	ldi	r24, 0x4A	; 74
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	20 e8       	ldi	r18, 0x80	; 128
    2cc4:	33 e4       	ldi	r19, 0x43	; 67
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	31 83       	std	Z+1, r19	; 0x01
    2cca:	20 83       	st	Z, r18
	TIMSK |= (1<<OCIE1A);
    2ccc:	89 e5       	ldi	r24, 0x59	; 89
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	29 e5       	ldi	r18, 0x59	; 89
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	f9 01       	movw	r30, r18
    2cd6:	20 81       	ld	r18, Z
    2cd8:	20 61       	ori	r18, 0x10	; 16
    2cda:	fc 01       	movw	r30, r24
    2cdc:	20 83       	st	Z, r18
	sei();
    2cde:	78 94       	sei
	int i = 0;
    2ce0:	1a 82       	std	Y+2, r1	; 0x02
    2ce2:	19 82       	std	Y+1, r1	; 0x01
	double tab[10];
	double srednia;
	while(1)
	{
		lcd_set_xy(0,0);
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_set_xy>
		printf("%d",liczba);
    2cec:	80 91 60 00 	lds	r24, 0x0060
    2cf0:	90 91 61 00 	lds	r25, 0x0061
    2cf4:	29 2f       	mov	r18, r25
    2cf6:	2f 93       	push	r18
    2cf8:	8f 93       	push	r24
    2cfa:	80 e7       	ldi	r24, 0x70	; 112
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	89 2f       	mov	r24, r25
    2d00:	8f 93       	push	r24
    2d02:	80 e7       	ldi	r24, 0x70	; 112
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	8f 93       	push	r24
    2d08:	0e 94 ce 1a 	call	0x359c	; 0x359c <printf>
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
		lcd_set_xy(1,0);
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <lcd_set_xy>
		double v = liczba* 5.0/4095.0;
    2d1c:	80 91 60 00 	lds	r24, 0x0060
    2d20:	90 91 61 00 	lds	r25, 0x0061
    2d24:	cc 01       	movw	r24, r24
    2d26:	a0 e0       	ldi	r26, 0x00	; 0
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 95 18 	call	0x312a	; 0x312a <__floatunsisf>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 ea       	ldi	r20, 0xA0	; 160
    2d3c:	50 e4       	ldi	r21, 0x40	; 64
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	0e 94 4b 19 	call	0x3296	; 0x3296 <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 ef       	ldi	r19, 0xF0	; 240
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	55 e4       	ldi	r21, 0x45	; 69
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	89 87       	std	Y+9, r24	; 0x09
    2d60:	9a 87       	std	Y+10, r25	; 0x0a
    2d62:	ab 87       	std	Y+11, r26	; 0x0b
    2d64:	bc 87       	std	Y+12, r27	; 0x0c
		tab[i] = v;
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	9e 01       	movw	r18, r28
    2d74:	2f 5f       	subi	r18, 0xFF	; 255
    2d76:	3f 4f       	sbci	r19, 0xFF	; 255
    2d78:	82 0f       	add	r24, r18
    2d7a:	93 1f       	adc	r25, r19
    2d7c:	9c 01       	movw	r18, r24
    2d7e:	24 5f       	subi	r18, 0xF4	; 244
    2d80:	3f 4f       	sbci	r19, 0xFF	; 255
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	ab 85       	ldd	r26, Y+11	; 0x0b
    2d88:	bc 85       	ldd	r27, Y+12	; 0x0c
    2d8a:	f9 01       	movw	r30, r18
    2d8c:	80 83       	st	Z, r24
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	a2 83       	std	Z+2, r26	; 0x02
    2d92:	b3 83       	std	Z+3, r27	; 0x03
		srednia = 0;
    2d94:	1b 82       	std	Y+3, r1	; 0x03
    2d96:	1c 82       	std	Y+4, r1	; 0x04
    2d98:	1d 82       	std	Y+5, r1	; 0x05
    2d9a:	1e 82       	std	Y+6, r1	; 0x06
		for(int j =0; j<10; j++)
    2d9c:	18 86       	std	Y+8, r1	; 0x08
    2d9e:	1f 82       	std	Y+7, r1	; 0x07
    2da0:	24 c0       	rjmp	.+72     	; 0x2dea <main+0x166>
		{
			srednia += tab[j];
    2da2:	8f 81       	ldd	r24, Y+7	; 0x07
    2da4:	98 85       	ldd	r25, Y+8	; 0x08
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	88 0f       	add	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	9e 01       	movw	r18, r28
    2db0:	2f 5f       	subi	r18, 0xFF	; 255
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
    2db4:	82 0f       	add	r24, r18
    2db6:	93 1f       	adc	r25, r19
    2db8:	0c 96       	adiw	r24, 0x0c	; 12
    2dba:	fc 01       	movw	r30, r24
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	a2 81       	ldd	r26, Z+2	; 0x02
    2dc2:	b3 81       	ldd	r27, Z+3	; 0x03
    2dc4:	9c 01       	movw	r18, r24
    2dc6:	ad 01       	movw	r20, r26
    2dc8:	6b 81       	ldd	r22, Y+3	; 0x03
    2dca:	7c 81       	ldd	r23, Y+4	; 0x04
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__addsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	8b 83       	std	Y+3, r24	; 0x03
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	ad 83       	std	Y+5, r26	; 0x05
    2dde:	be 83       	std	Y+6, r27	; 0x06
		printf("%d",liczba);
		lcd_set_xy(1,0);
		double v = liczba* 5.0/4095.0;
		tab[i] = v;
		srednia = 0;
		for(int j =0; j<10; j++)
    2de0:	8f 81       	ldd	r24, Y+7	; 0x07
    2de2:	98 85       	ldd	r25, Y+8	; 0x08
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	98 87       	std	Y+8, r25	; 0x08
    2de8:	8f 83       	std	Y+7, r24	; 0x07
    2dea:	8f 81       	ldd	r24, Y+7	; 0x07
    2dec:	98 85       	ldd	r25, Y+8	; 0x08
    2dee:	8a 30       	cpi	r24, 0x0A	; 10
    2df0:	91 05       	cpc	r25, r1
    2df2:	bc f2       	brlt	.-82     	; 0x2da2 <main+0x11e>
		{
			srednia += tab[j];
		}
		srednia /= 10;
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e2       	ldi	r20, 0x20	; 32
    2dfa:	51 e4       	ldi	r21, 0x41	; 65
    2dfc:	6b 81       	ldd	r22, Y+3	; 0x03
    2dfe:	7c 81       	ldd	r23, Y+4	; 0x04
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	0e 94 01 18 	call	0x3002	; 0x3002 <__divsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	ad 83       	std	Y+5, r26	; 0x05
    2e12:	be 83       	std	Y+6, r27	; 0x06
		i++;
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	9a 81       	ldd	r25, Y+2	; 0x02
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	9a 83       	std	Y+2, r25	; 0x02
    2e1c:	89 83       	std	Y+1, r24	; 0x01
		if(i == 10) i = 0;
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	8a 30       	cpi	r24, 0x0A	; 10
    2e24:	91 05       	cpc	r25, r1
    2e26:	11 f4       	brne	.+4      	; 0x2e2c <main+0x1a8>
    2e28:	1a 82       	std	Y+2, r1	; 0x02
    2e2a:	19 82       	std	Y+1, r1	; 0x01
//		printf("U = %.3f  ",v);
		printf("U = %.3f  ",srednia);
    2e2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2e:	8f 93       	push	r24
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	8f 93       	push	r24
    2e34:	8c 81       	ldd	r24, Y+4	; 0x04
    2e36:	8f 93       	push	r24
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	8f 93       	push	r24
    2e3c:	83 e7       	ldi	r24, 0x73	; 115
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	89 2f       	mov	r24, r25
    2e42:	8f 93       	push	r24
    2e44:	83 e7       	ldi	r24, 0x73	; 115
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	8f 93       	push	r24
    2e4a:	0e 94 ce 1a 	call	0x359c	; 0x359c <printf>
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
	}
    2e5a:	44 cf       	rjmp	.-376    	; 0x2ce4 <main+0x60>

00002e5c <InitSPI>:
 *      Author: psm8
 */
#include "spi.h"

void InitSPI (void)
{
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
	// aktywacja SPI, tryb Master, predkosc zegara Fosc/16
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    2e64:	8d e2       	ldi	r24, 0x2D	; 45
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	2d e2       	ldi	r18, 0x2D	; 45
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	f9 01       	movw	r30, r18
    2e6e:	20 81       	ld	r18, Z
    2e70:	21 65       	ori	r18, 0x51	; 81
    2e72:	fc 01       	movw	r30, r24
    2e74:	20 83       	st	Z, r18
	//kierunek wyjscia na MOSI (na MISO nie trzeba bo default, bo tryb master)
	DDRB |= (1<<MOSI) | (1<<SCK)|(1<<SS);
    2e76:	87 e3       	ldi	r24, 0x37	; 55
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	27 e3       	ldi	r18, 0x37	; 55
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	f9 01       	movw	r30, r18
    2e80:	20 81       	ld	r18, Z
    2e82:	20 6b       	ori	r18, 0xB0	; 176
    2e84:	fc 01       	movw	r30, r24
    2e86:	20 83       	st	Z, r18

}
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	08 95       	ret

00002e8e <TransferSPI>:

uint8_t TransferSPI(uint8_t bajt)
{
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	1f 92       	push	r1
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	89 83       	std	Y+1, r24	; 0x01
	SPDR = bajt;
    2e9a:	8f e2       	ldi	r24, 0x2F	; 47
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	29 81       	ldd	r18, Y+1	; 0x01
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	20 83       	st	Z, r18

	// czekamy na ustawienie flagi SPIF po zakończeniu transmisji
	while( !(SPSR & (1<<SPIF)));
    2ea4:	00 00       	nop
    2ea6:	8e e2       	ldi	r24, 0x2E	; 46
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	fc 01       	movw	r30, r24
    2eac:	80 81       	ld	r24, Z
    2eae:	88 23       	and	r24, r24
    2eb0:	d4 f7       	brge	.-12     	; 0x2ea6 <TransferSPI+0x18>

	return SPDR;
    2eb2:	8f e2       	ldi	r24, 0x2F	; 47
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	80 81       	ld	r24, Z
}
    2eba:	0f 90       	pop	r0
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	08 95       	ret

00002ec2 <__prologue_saves__>:
    2ec2:	2f 92       	push	r2
    2ec4:	3f 92       	push	r3
    2ec6:	4f 92       	push	r4
    2ec8:	5f 92       	push	r5
    2eca:	6f 92       	push	r6
    2ecc:	7f 92       	push	r7
    2ece:	8f 92       	push	r8
    2ed0:	9f 92       	push	r9
    2ed2:	af 92       	push	r10
    2ed4:	bf 92       	push	r11
    2ed6:	cf 92       	push	r12
    2ed8:	df 92       	push	r13
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	ca 1b       	sub	r28, r26
    2eec:	db 0b       	sbc	r29, r27
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	09 94       	ijmp

00002efa <__epilogue_restores__>:
    2efa:	2a 88       	ldd	r2, Y+18	; 0x12
    2efc:	39 88       	ldd	r3, Y+17	; 0x11
    2efe:	48 88       	ldd	r4, Y+16	; 0x10
    2f00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2f0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2f10:	df 80       	ldd	r13, Y+7	; 0x07
    2f12:	ee 80       	ldd	r14, Y+6	; 0x06
    2f14:	fd 80       	ldd	r15, Y+5	; 0x05
    2f16:	0c 81       	ldd	r16, Y+4	; 0x04
    2f18:	1b 81       	ldd	r17, Y+3	; 0x03
    2f1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2f1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2f1e:	ce 0f       	add	r28, r30
    2f20:	d1 1d       	adc	r29, r1
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	ed 01       	movw	r28, r26
    2f2e:	08 95       	ret

00002f30 <__subsf3>:
    2f30:	50 58       	subi	r21, 0x80	; 128

00002f32 <__addsf3>:
    2f32:	bb 27       	eor	r27, r27
    2f34:	aa 27       	eor	r26, r26
    2f36:	0e d0       	rcall	.+28     	; 0x2f54 <__addsf3x>
    2f38:	70 c1       	rjmp	.+736    	; 0x321a <__fp_round>
    2f3a:	61 d1       	rcall	.+706    	; 0x31fe <__fp_pscA>
    2f3c:	30 f0       	brcs	.+12     	; 0x2f4a <__addsf3+0x18>
    2f3e:	66 d1       	rcall	.+716    	; 0x320c <__fp_pscB>
    2f40:	20 f0       	brcs	.+8      	; 0x2f4a <__addsf3+0x18>
    2f42:	31 f4       	brne	.+12     	; 0x2f50 <__addsf3+0x1e>
    2f44:	9f 3f       	cpi	r25, 0xFF	; 255
    2f46:	11 f4       	brne	.+4      	; 0x2f4c <__addsf3+0x1a>
    2f48:	1e f4       	brtc	.+6      	; 0x2f50 <__addsf3+0x1e>
    2f4a:	56 c1       	rjmp	.+684    	; 0x31f8 <__fp_nan>
    2f4c:	0e f4       	brtc	.+2      	; 0x2f50 <__addsf3+0x1e>
    2f4e:	e0 95       	com	r30
    2f50:	e7 fb       	bst	r30, 7
    2f52:	4c c1       	rjmp	.+664    	; 0x31ec <__fp_inf>

00002f54 <__addsf3x>:
    2f54:	e9 2f       	mov	r30, r25
    2f56:	72 d1       	rcall	.+740    	; 0x323c <__fp_split3>
    2f58:	80 f3       	brcs	.-32     	; 0x2f3a <__addsf3+0x8>
    2f5a:	ba 17       	cp	r27, r26
    2f5c:	62 07       	cpc	r22, r18
    2f5e:	73 07       	cpc	r23, r19
    2f60:	84 07       	cpc	r24, r20
    2f62:	95 07       	cpc	r25, r21
    2f64:	18 f0       	brcs	.+6      	; 0x2f6c <__addsf3x+0x18>
    2f66:	71 f4       	brne	.+28     	; 0x2f84 <__addsf3x+0x30>
    2f68:	9e f5       	brtc	.+102    	; 0x2fd0 <__addsf3x+0x7c>
    2f6a:	8a c1       	rjmp	.+788    	; 0x3280 <__fp_zero>
    2f6c:	0e f4       	brtc	.+2      	; 0x2f70 <__addsf3x+0x1c>
    2f6e:	e0 95       	com	r30
    2f70:	0b 2e       	mov	r0, r27
    2f72:	ba 2f       	mov	r27, r26
    2f74:	a0 2d       	mov	r26, r0
    2f76:	0b 01       	movw	r0, r22
    2f78:	b9 01       	movw	r22, r18
    2f7a:	90 01       	movw	r18, r0
    2f7c:	0c 01       	movw	r0, r24
    2f7e:	ca 01       	movw	r24, r20
    2f80:	a0 01       	movw	r20, r0
    2f82:	11 24       	eor	r1, r1
    2f84:	ff 27       	eor	r31, r31
    2f86:	59 1b       	sub	r21, r25
    2f88:	99 f0       	breq	.+38     	; 0x2fb0 <__addsf3x+0x5c>
    2f8a:	59 3f       	cpi	r21, 0xF9	; 249
    2f8c:	50 f4       	brcc	.+20     	; 0x2fa2 <__addsf3x+0x4e>
    2f8e:	50 3e       	cpi	r21, 0xE0	; 224
    2f90:	68 f1       	brcs	.+90     	; 0x2fec <__addsf3x+0x98>
    2f92:	1a 16       	cp	r1, r26
    2f94:	f0 40       	sbci	r31, 0x00	; 0
    2f96:	a2 2f       	mov	r26, r18
    2f98:	23 2f       	mov	r18, r19
    2f9a:	34 2f       	mov	r19, r20
    2f9c:	44 27       	eor	r20, r20
    2f9e:	58 5f       	subi	r21, 0xF8	; 248
    2fa0:	f3 cf       	rjmp	.-26     	; 0x2f88 <__addsf3x+0x34>
    2fa2:	46 95       	lsr	r20
    2fa4:	37 95       	ror	r19
    2fa6:	27 95       	ror	r18
    2fa8:	a7 95       	ror	r26
    2faa:	f0 40       	sbci	r31, 0x00	; 0
    2fac:	53 95       	inc	r21
    2fae:	c9 f7       	brne	.-14     	; 0x2fa2 <__addsf3x+0x4e>
    2fb0:	7e f4       	brtc	.+30     	; 0x2fd0 <__addsf3x+0x7c>
    2fb2:	1f 16       	cp	r1, r31
    2fb4:	ba 0b       	sbc	r27, r26
    2fb6:	62 0b       	sbc	r22, r18
    2fb8:	73 0b       	sbc	r23, r19
    2fba:	84 0b       	sbc	r24, r20
    2fbc:	ba f0       	brmi	.+46     	; 0x2fec <__addsf3x+0x98>
    2fbe:	91 50       	subi	r25, 0x01	; 1
    2fc0:	a1 f0       	breq	.+40     	; 0x2fea <__addsf3x+0x96>
    2fc2:	ff 0f       	add	r31, r31
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	66 1f       	adc	r22, r22
    2fc8:	77 1f       	adc	r23, r23
    2fca:	88 1f       	adc	r24, r24
    2fcc:	c2 f7       	brpl	.-16     	; 0x2fbe <__addsf3x+0x6a>
    2fce:	0e c0       	rjmp	.+28     	; 0x2fec <__addsf3x+0x98>
    2fd0:	ba 0f       	add	r27, r26
    2fd2:	62 1f       	adc	r22, r18
    2fd4:	73 1f       	adc	r23, r19
    2fd6:	84 1f       	adc	r24, r20
    2fd8:	48 f4       	brcc	.+18     	; 0x2fec <__addsf3x+0x98>
    2fda:	87 95       	ror	r24
    2fdc:	77 95       	ror	r23
    2fde:	67 95       	ror	r22
    2fe0:	b7 95       	ror	r27
    2fe2:	f7 95       	ror	r31
    2fe4:	9e 3f       	cpi	r25, 0xFE	; 254
    2fe6:	08 f0       	brcs	.+2      	; 0x2fea <__addsf3x+0x96>
    2fe8:	b3 cf       	rjmp	.-154    	; 0x2f50 <__addsf3+0x1e>
    2fea:	93 95       	inc	r25
    2fec:	88 0f       	add	r24, r24
    2fee:	08 f0       	brcs	.+2      	; 0x2ff2 <__addsf3x+0x9e>
    2ff0:	99 27       	eor	r25, r25
    2ff2:	ee 0f       	add	r30, r30
    2ff4:	97 95       	ror	r25
    2ff6:	87 95       	ror	r24
    2ff8:	08 95       	ret

00002ffa <__cmpsf2>:
    2ffa:	d4 d0       	rcall	.+424    	; 0x31a4 <__fp_cmp>
    2ffc:	08 f4       	brcc	.+2      	; 0x3000 <__cmpsf2+0x6>
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	08 95       	ret

00003002 <__divsf3>:
    3002:	0c d0       	rcall	.+24     	; 0x301c <__divsf3x>
    3004:	0a c1       	rjmp	.+532    	; 0x321a <__fp_round>
    3006:	02 d1       	rcall	.+516    	; 0x320c <__fp_pscB>
    3008:	40 f0       	brcs	.+16     	; 0x301a <__divsf3+0x18>
    300a:	f9 d0       	rcall	.+498    	; 0x31fe <__fp_pscA>
    300c:	30 f0       	brcs	.+12     	; 0x301a <__divsf3+0x18>
    300e:	21 f4       	brne	.+8      	; 0x3018 <__divsf3+0x16>
    3010:	5f 3f       	cpi	r21, 0xFF	; 255
    3012:	19 f0       	breq	.+6      	; 0x301a <__divsf3+0x18>
    3014:	eb c0       	rjmp	.+470    	; 0x31ec <__fp_inf>
    3016:	51 11       	cpse	r21, r1
    3018:	34 c1       	rjmp	.+616    	; 0x3282 <__fp_szero>
    301a:	ee c0       	rjmp	.+476    	; 0x31f8 <__fp_nan>

0000301c <__divsf3x>:
    301c:	0f d1       	rcall	.+542    	; 0x323c <__fp_split3>
    301e:	98 f3       	brcs	.-26     	; 0x3006 <__divsf3+0x4>

00003020 <__divsf3_pse>:
    3020:	99 23       	and	r25, r25
    3022:	c9 f3       	breq	.-14     	; 0x3016 <__divsf3+0x14>
    3024:	55 23       	and	r21, r21
    3026:	b1 f3       	breq	.-20     	; 0x3014 <__divsf3+0x12>
    3028:	95 1b       	sub	r25, r21
    302a:	55 0b       	sbc	r21, r21
    302c:	bb 27       	eor	r27, r27
    302e:	aa 27       	eor	r26, r26
    3030:	62 17       	cp	r22, r18
    3032:	73 07       	cpc	r23, r19
    3034:	84 07       	cpc	r24, r20
    3036:	38 f0       	brcs	.+14     	; 0x3046 <__divsf3_pse+0x26>
    3038:	9f 5f       	subi	r25, 0xFF	; 255
    303a:	5f 4f       	sbci	r21, 0xFF	; 255
    303c:	22 0f       	add	r18, r18
    303e:	33 1f       	adc	r19, r19
    3040:	44 1f       	adc	r20, r20
    3042:	aa 1f       	adc	r26, r26
    3044:	a9 f3       	breq	.-22     	; 0x3030 <__divsf3_pse+0x10>
    3046:	33 d0       	rcall	.+102    	; 0x30ae <__divsf3_pse+0x8e>
    3048:	0e 2e       	mov	r0, r30
    304a:	3a f0       	brmi	.+14     	; 0x305a <__divsf3_pse+0x3a>
    304c:	e0 e8       	ldi	r30, 0x80	; 128
    304e:	30 d0       	rcall	.+96     	; 0x30b0 <__divsf3_pse+0x90>
    3050:	91 50       	subi	r25, 0x01	; 1
    3052:	50 40       	sbci	r21, 0x00	; 0
    3054:	e6 95       	lsr	r30
    3056:	00 1c       	adc	r0, r0
    3058:	ca f7       	brpl	.-14     	; 0x304c <__divsf3_pse+0x2c>
    305a:	29 d0       	rcall	.+82     	; 0x30ae <__divsf3_pse+0x8e>
    305c:	fe 2f       	mov	r31, r30
    305e:	27 d0       	rcall	.+78     	; 0x30ae <__divsf3_pse+0x8e>
    3060:	66 0f       	add	r22, r22
    3062:	77 1f       	adc	r23, r23
    3064:	88 1f       	adc	r24, r24
    3066:	bb 1f       	adc	r27, r27
    3068:	26 17       	cp	r18, r22
    306a:	37 07       	cpc	r19, r23
    306c:	48 07       	cpc	r20, r24
    306e:	ab 07       	cpc	r26, r27
    3070:	b0 e8       	ldi	r27, 0x80	; 128
    3072:	09 f0       	breq	.+2      	; 0x3076 <__divsf3_pse+0x56>
    3074:	bb 0b       	sbc	r27, r27
    3076:	80 2d       	mov	r24, r0
    3078:	bf 01       	movw	r22, r30
    307a:	ff 27       	eor	r31, r31
    307c:	93 58       	subi	r25, 0x83	; 131
    307e:	5f 4f       	sbci	r21, 0xFF	; 255
    3080:	2a f0       	brmi	.+10     	; 0x308c <__divsf3_pse+0x6c>
    3082:	9e 3f       	cpi	r25, 0xFE	; 254
    3084:	51 05       	cpc	r21, r1
    3086:	68 f0       	brcs	.+26     	; 0x30a2 <__divsf3_pse+0x82>
    3088:	b1 c0       	rjmp	.+354    	; 0x31ec <__fp_inf>
    308a:	fb c0       	rjmp	.+502    	; 0x3282 <__fp_szero>
    308c:	5f 3f       	cpi	r21, 0xFF	; 255
    308e:	ec f3       	brlt	.-6      	; 0x308a <__divsf3_pse+0x6a>
    3090:	98 3e       	cpi	r25, 0xE8	; 232
    3092:	dc f3       	brlt	.-10     	; 0x308a <__divsf3_pse+0x6a>
    3094:	86 95       	lsr	r24
    3096:	77 95       	ror	r23
    3098:	67 95       	ror	r22
    309a:	b7 95       	ror	r27
    309c:	f7 95       	ror	r31
    309e:	9f 5f       	subi	r25, 0xFF	; 255
    30a0:	c9 f7       	brne	.-14     	; 0x3094 <__divsf3_pse+0x74>
    30a2:	88 0f       	add	r24, r24
    30a4:	91 1d       	adc	r25, r1
    30a6:	96 95       	lsr	r25
    30a8:	87 95       	ror	r24
    30aa:	97 f9       	bld	r25, 7
    30ac:	08 95       	ret
    30ae:	e1 e0       	ldi	r30, 0x01	; 1
    30b0:	66 0f       	add	r22, r22
    30b2:	77 1f       	adc	r23, r23
    30b4:	88 1f       	adc	r24, r24
    30b6:	bb 1f       	adc	r27, r27
    30b8:	62 17       	cp	r22, r18
    30ba:	73 07       	cpc	r23, r19
    30bc:	84 07       	cpc	r24, r20
    30be:	ba 07       	cpc	r27, r26
    30c0:	20 f0       	brcs	.+8      	; 0x30ca <__divsf3_pse+0xaa>
    30c2:	62 1b       	sub	r22, r18
    30c4:	73 0b       	sbc	r23, r19
    30c6:	84 0b       	sbc	r24, r20
    30c8:	ba 0b       	sbc	r27, r26
    30ca:	ee 1f       	adc	r30, r30
    30cc:	88 f7       	brcc	.-30     	; 0x30b0 <__divsf3_pse+0x90>
    30ce:	e0 95       	com	r30
    30d0:	08 95       	ret

000030d2 <__fixunssfsi>:
    30d2:	bc d0       	rcall	.+376    	; 0x324c <__fp_splitA>
    30d4:	88 f0       	brcs	.+34     	; 0x30f8 <__fixunssfsi+0x26>
    30d6:	9f 57       	subi	r25, 0x7F	; 127
    30d8:	90 f0       	brcs	.+36     	; 0x30fe <__fixunssfsi+0x2c>
    30da:	b9 2f       	mov	r27, r25
    30dc:	99 27       	eor	r25, r25
    30de:	b7 51       	subi	r27, 0x17	; 23
    30e0:	a0 f0       	brcs	.+40     	; 0x310a <__fixunssfsi+0x38>
    30e2:	d1 f0       	breq	.+52     	; 0x3118 <__fixunssfsi+0x46>
    30e4:	66 0f       	add	r22, r22
    30e6:	77 1f       	adc	r23, r23
    30e8:	88 1f       	adc	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	1a f0       	brmi	.+6      	; 0x30f4 <__fixunssfsi+0x22>
    30ee:	ba 95       	dec	r27
    30f0:	c9 f7       	brne	.-14     	; 0x30e4 <__fixunssfsi+0x12>
    30f2:	12 c0       	rjmp	.+36     	; 0x3118 <__fixunssfsi+0x46>
    30f4:	b1 30       	cpi	r27, 0x01	; 1
    30f6:	81 f0       	breq	.+32     	; 0x3118 <__fixunssfsi+0x46>
    30f8:	c3 d0       	rcall	.+390    	; 0x3280 <__fp_zero>
    30fa:	b1 e0       	ldi	r27, 0x01	; 1
    30fc:	08 95       	ret
    30fe:	c0 c0       	rjmp	.+384    	; 0x3280 <__fp_zero>
    3100:	67 2f       	mov	r22, r23
    3102:	78 2f       	mov	r23, r24
    3104:	88 27       	eor	r24, r24
    3106:	b8 5f       	subi	r27, 0xF8	; 248
    3108:	39 f0       	breq	.+14     	; 0x3118 <__fixunssfsi+0x46>
    310a:	b9 3f       	cpi	r27, 0xF9	; 249
    310c:	cc f3       	brlt	.-14     	; 0x3100 <__fixunssfsi+0x2e>
    310e:	86 95       	lsr	r24
    3110:	77 95       	ror	r23
    3112:	67 95       	ror	r22
    3114:	b3 95       	inc	r27
    3116:	d9 f7       	brne	.-10     	; 0x310e <__fixunssfsi+0x3c>
    3118:	3e f4       	brtc	.+14     	; 0x3128 <__fixunssfsi+0x56>
    311a:	90 95       	com	r25
    311c:	80 95       	com	r24
    311e:	70 95       	com	r23
    3120:	61 95       	neg	r22
    3122:	7f 4f       	sbci	r23, 0xFF	; 255
    3124:	8f 4f       	sbci	r24, 0xFF	; 255
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	08 95       	ret

0000312a <__floatunsisf>:
    312a:	e8 94       	clt
    312c:	09 c0       	rjmp	.+18     	; 0x3140 <__floatsisf+0x12>

0000312e <__floatsisf>:
    312e:	97 fb       	bst	r25, 7
    3130:	3e f4       	brtc	.+14     	; 0x3140 <__floatsisf+0x12>
    3132:	90 95       	com	r25
    3134:	80 95       	com	r24
    3136:	70 95       	com	r23
    3138:	61 95       	neg	r22
    313a:	7f 4f       	sbci	r23, 0xFF	; 255
    313c:	8f 4f       	sbci	r24, 0xFF	; 255
    313e:	9f 4f       	sbci	r25, 0xFF	; 255
    3140:	99 23       	and	r25, r25
    3142:	a9 f0       	breq	.+42     	; 0x316e <__floatsisf+0x40>
    3144:	f9 2f       	mov	r31, r25
    3146:	96 e9       	ldi	r25, 0x96	; 150
    3148:	bb 27       	eor	r27, r27
    314a:	93 95       	inc	r25
    314c:	f6 95       	lsr	r31
    314e:	87 95       	ror	r24
    3150:	77 95       	ror	r23
    3152:	67 95       	ror	r22
    3154:	b7 95       	ror	r27
    3156:	f1 11       	cpse	r31, r1
    3158:	f8 cf       	rjmp	.-16     	; 0x314a <__floatsisf+0x1c>
    315a:	fa f4       	brpl	.+62     	; 0x319a <__floatsisf+0x6c>
    315c:	bb 0f       	add	r27, r27
    315e:	11 f4       	brne	.+4      	; 0x3164 <__floatsisf+0x36>
    3160:	60 ff       	sbrs	r22, 0
    3162:	1b c0       	rjmp	.+54     	; 0x319a <__floatsisf+0x6c>
    3164:	6f 5f       	subi	r22, 0xFF	; 255
    3166:	7f 4f       	sbci	r23, 0xFF	; 255
    3168:	8f 4f       	sbci	r24, 0xFF	; 255
    316a:	9f 4f       	sbci	r25, 0xFF	; 255
    316c:	16 c0       	rjmp	.+44     	; 0x319a <__floatsisf+0x6c>
    316e:	88 23       	and	r24, r24
    3170:	11 f0       	breq	.+4      	; 0x3176 <__floatsisf+0x48>
    3172:	96 e9       	ldi	r25, 0x96	; 150
    3174:	11 c0       	rjmp	.+34     	; 0x3198 <__floatsisf+0x6a>
    3176:	77 23       	and	r23, r23
    3178:	21 f0       	breq	.+8      	; 0x3182 <__floatsisf+0x54>
    317a:	9e e8       	ldi	r25, 0x8E	; 142
    317c:	87 2f       	mov	r24, r23
    317e:	76 2f       	mov	r23, r22
    3180:	05 c0       	rjmp	.+10     	; 0x318c <__floatsisf+0x5e>
    3182:	66 23       	and	r22, r22
    3184:	71 f0       	breq	.+28     	; 0x31a2 <__floatsisf+0x74>
    3186:	96 e8       	ldi	r25, 0x86	; 134
    3188:	86 2f       	mov	r24, r22
    318a:	70 e0       	ldi	r23, 0x00	; 0
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	2a f0       	brmi	.+10     	; 0x319a <__floatsisf+0x6c>
    3190:	9a 95       	dec	r25
    3192:	66 0f       	add	r22, r22
    3194:	77 1f       	adc	r23, r23
    3196:	88 1f       	adc	r24, r24
    3198:	da f7       	brpl	.-10     	; 0x3190 <__floatsisf+0x62>
    319a:	88 0f       	add	r24, r24
    319c:	96 95       	lsr	r25
    319e:	87 95       	ror	r24
    31a0:	97 f9       	bld	r25, 7
    31a2:	08 95       	ret

000031a4 <__fp_cmp>:
    31a4:	99 0f       	add	r25, r25
    31a6:	00 08       	sbc	r0, r0
    31a8:	55 0f       	add	r21, r21
    31aa:	aa 0b       	sbc	r26, r26
    31ac:	e0 e8       	ldi	r30, 0x80	; 128
    31ae:	fe ef       	ldi	r31, 0xFE	; 254
    31b0:	16 16       	cp	r1, r22
    31b2:	17 06       	cpc	r1, r23
    31b4:	e8 07       	cpc	r30, r24
    31b6:	f9 07       	cpc	r31, r25
    31b8:	c0 f0       	brcs	.+48     	; 0x31ea <__fp_cmp+0x46>
    31ba:	12 16       	cp	r1, r18
    31bc:	13 06       	cpc	r1, r19
    31be:	e4 07       	cpc	r30, r20
    31c0:	f5 07       	cpc	r31, r21
    31c2:	98 f0       	brcs	.+38     	; 0x31ea <__fp_cmp+0x46>
    31c4:	62 1b       	sub	r22, r18
    31c6:	73 0b       	sbc	r23, r19
    31c8:	84 0b       	sbc	r24, r20
    31ca:	95 0b       	sbc	r25, r21
    31cc:	39 f4       	brne	.+14     	; 0x31dc <__fp_cmp+0x38>
    31ce:	0a 26       	eor	r0, r26
    31d0:	61 f0       	breq	.+24     	; 0x31ea <__fp_cmp+0x46>
    31d2:	23 2b       	or	r18, r19
    31d4:	24 2b       	or	r18, r20
    31d6:	25 2b       	or	r18, r21
    31d8:	21 f4       	brne	.+8      	; 0x31e2 <__fp_cmp+0x3e>
    31da:	08 95       	ret
    31dc:	0a 26       	eor	r0, r26
    31de:	09 f4       	brne	.+2      	; 0x31e2 <__fp_cmp+0x3e>
    31e0:	a1 40       	sbci	r26, 0x01	; 1
    31e2:	a6 95       	lsr	r26
    31e4:	8f ef       	ldi	r24, 0xFF	; 255
    31e6:	81 1d       	adc	r24, r1
    31e8:	81 1d       	adc	r24, r1
    31ea:	08 95       	ret

000031ec <__fp_inf>:
    31ec:	97 f9       	bld	r25, 7
    31ee:	9f 67       	ori	r25, 0x7F	; 127
    31f0:	80 e8       	ldi	r24, 0x80	; 128
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	60 e0       	ldi	r22, 0x00	; 0
    31f6:	08 95       	ret

000031f8 <__fp_nan>:
    31f8:	9f ef       	ldi	r25, 0xFF	; 255
    31fa:	80 ec       	ldi	r24, 0xC0	; 192
    31fc:	08 95       	ret

000031fe <__fp_pscA>:
    31fe:	00 24       	eor	r0, r0
    3200:	0a 94       	dec	r0
    3202:	16 16       	cp	r1, r22
    3204:	17 06       	cpc	r1, r23
    3206:	18 06       	cpc	r1, r24
    3208:	09 06       	cpc	r0, r25
    320a:	08 95       	ret

0000320c <__fp_pscB>:
    320c:	00 24       	eor	r0, r0
    320e:	0a 94       	dec	r0
    3210:	12 16       	cp	r1, r18
    3212:	13 06       	cpc	r1, r19
    3214:	14 06       	cpc	r1, r20
    3216:	05 06       	cpc	r0, r21
    3218:	08 95       	ret

0000321a <__fp_round>:
    321a:	09 2e       	mov	r0, r25
    321c:	03 94       	inc	r0
    321e:	00 0c       	add	r0, r0
    3220:	11 f4       	brne	.+4      	; 0x3226 <__fp_round+0xc>
    3222:	88 23       	and	r24, r24
    3224:	52 f0       	brmi	.+20     	; 0x323a <__fp_round+0x20>
    3226:	bb 0f       	add	r27, r27
    3228:	40 f4       	brcc	.+16     	; 0x323a <__fp_round+0x20>
    322a:	bf 2b       	or	r27, r31
    322c:	11 f4       	brne	.+4      	; 0x3232 <__fp_round+0x18>
    322e:	60 ff       	sbrs	r22, 0
    3230:	04 c0       	rjmp	.+8      	; 0x323a <__fp_round+0x20>
    3232:	6f 5f       	subi	r22, 0xFF	; 255
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	8f 4f       	sbci	r24, 0xFF	; 255
    3238:	9f 4f       	sbci	r25, 0xFF	; 255
    323a:	08 95       	ret

0000323c <__fp_split3>:
    323c:	57 fd       	sbrc	r21, 7
    323e:	90 58       	subi	r25, 0x80	; 128
    3240:	44 0f       	add	r20, r20
    3242:	55 1f       	adc	r21, r21
    3244:	59 f0       	breq	.+22     	; 0x325c <__fp_splitA+0x10>
    3246:	5f 3f       	cpi	r21, 0xFF	; 255
    3248:	71 f0       	breq	.+28     	; 0x3266 <__fp_splitA+0x1a>
    324a:	47 95       	ror	r20

0000324c <__fp_splitA>:
    324c:	88 0f       	add	r24, r24
    324e:	97 fb       	bst	r25, 7
    3250:	99 1f       	adc	r25, r25
    3252:	61 f0       	breq	.+24     	; 0x326c <__fp_splitA+0x20>
    3254:	9f 3f       	cpi	r25, 0xFF	; 255
    3256:	79 f0       	breq	.+30     	; 0x3276 <__fp_splitA+0x2a>
    3258:	87 95       	ror	r24
    325a:	08 95       	ret
    325c:	12 16       	cp	r1, r18
    325e:	13 06       	cpc	r1, r19
    3260:	14 06       	cpc	r1, r20
    3262:	55 1f       	adc	r21, r21
    3264:	f2 cf       	rjmp	.-28     	; 0x324a <__fp_split3+0xe>
    3266:	46 95       	lsr	r20
    3268:	f1 df       	rcall	.-30     	; 0x324c <__fp_splitA>
    326a:	08 c0       	rjmp	.+16     	; 0x327c <__fp_splitA+0x30>
    326c:	16 16       	cp	r1, r22
    326e:	17 06       	cpc	r1, r23
    3270:	18 06       	cpc	r1, r24
    3272:	99 1f       	adc	r25, r25
    3274:	f1 cf       	rjmp	.-30     	; 0x3258 <__fp_splitA+0xc>
    3276:	86 95       	lsr	r24
    3278:	71 05       	cpc	r23, r1
    327a:	61 05       	cpc	r22, r1
    327c:	08 94       	sec
    327e:	08 95       	ret

00003280 <__fp_zero>:
    3280:	e8 94       	clt

00003282 <__fp_szero>:
    3282:	bb 27       	eor	r27, r27
    3284:	66 27       	eor	r22, r22
    3286:	77 27       	eor	r23, r23
    3288:	cb 01       	movw	r24, r22
    328a:	97 f9       	bld	r25, 7
    328c:	08 95       	ret

0000328e <__gesf2>:
    328e:	8a df       	rcall	.-236    	; 0x31a4 <__fp_cmp>
    3290:	08 f4       	brcc	.+2      	; 0x3294 <__gesf2+0x6>
    3292:	8f ef       	ldi	r24, 0xFF	; 255
    3294:	08 95       	ret

00003296 <__mulsf3>:
    3296:	0b d0       	rcall	.+22     	; 0x32ae <__mulsf3x>
    3298:	c0 cf       	rjmp	.-128    	; 0x321a <__fp_round>
    329a:	b1 df       	rcall	.-158    	; 0x31fe <__fp_pscA>
    329c:	28 f0       	brcs	.+10     	; 0x32a8 <__mulsf3+0x12>
    329e:	b6 df       	rcall	.-148    	; 0x320c <__fp_pscB>
    32a0:	18 f0       	brcs	.+6      	; 0x32a8 <__mulsf3+0x12>
    32a2:	95 23       	and	r25, r21
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <__mulsf3+0x12>
    32a6:	a2 cf       	rjmp	.-188    	; 0x31ec <__fp_inf>
    32a8:	a7 cf       	rjmp	.-178    	; 0x31f8 <__fp_nan>
    32aa:	11 24       	eor	r1, r1
    32ac:	ea cf       	rjmp	.-44     	; 0x3282 <__fp_szero>

000032ae <__mulsf3x>:
    32ae:	c6 df       	rcall	.-116    	; 0x323c <__fp_split3>
    32b0:	a0 f3       	brcs	.-24     	; 0x329a <__mulsf3+0x4>

000032b2 <__mulsf3_pse>:
    32b2:	95 9f       	mul	r25, r21
    32b4:	d1 f3       	breq	.-12     	; 0x32aa <__mulsf3+0x14>
    32b6:	95 0f       	add	r25, r21
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	55 1f       	adc	r21, r21
    32bc:	62 9f       	mul	r22, r18
    32be:	f0 01       	movw	r30, r0
    32c0:	72 9f       	mul	r23, r18
    32c2:	bb 27       	eor	r27, r27
    32c4:	f0 0d       	add	r31, r0
    32c6:	b1 1d       	adc	r27, r1
    32c8:	63 9f       	mul	r22, r19
    32ca:	aa 27       	eor	r26, r26
    32cc:	f0 0d       	add	r31, r0
    32ce:	b1 1d       	adc	r27, r1
    32d0:	aa 1f       	adc	r26, r26
    32d2:	64 9f       	mul	r22, r20
    32d4:	66 27       	eor	r22, r22
    32d6:	b0 0d       	add	r27, r0
    32d8:	a1 1d       	adc	r26, r1
    32da:	66 1f       	adc	r22, r22
    32dc:	82 9f       	mul	r24, r18
    32de:	22 27       	eor	r18, r18
    32e0:	b0 0d       	add	r27, r0
    32e2:	a1 1d       	adc	r26, r1
    32e4:	62 1f       	adc	r22, r18
    32e6:	73 9f       	mul	r23, r19
    32e8:	b0 0d       	add	r27, r0
    32ea:	a1 1d       	adc	r26, r1
    32ec:	62 1f       	adc	r22, r18
    32ee:	83 9f       	mul	r24, r19
    32f0:	a0 0d       	add	r26, r0
    32f2:	61 1d       	adc	r22, r1
    32f4:	22 1f       	adc	r18, r18
    32f6:	74 9f       	mul	r23, r20
    32f8:	33 27       	eor	r19, r19
    32fa:	a0 0d       	add	r26, r0
    32fc:	61 1d       	adc	r22, r1
    32fe:	23 1f       	adc	r18, r19
    3300:	84 9f       	mul	r24, r20
    3302:	60 0d       	add	r22, r0
    3304:	21 1d       	adc	r18, r1
    3306:	82 2f       	mov	r24, r18
    3308:	76 2f       	mov	r23, r22
    330a:	6a 2f       	mov	r22, r26
    330c:	11 24       	eor	r1, r1
    330e:	9f 57       	subi	r25, 0x7F	; 127
    3310:	50 40       	sbci	r21, 0x00	; 0
    3312:	8a f0       	brmi	.+34     	; 0x3336 <__mulsf3_pse+0x84>
    3314:	e1 f0       	breq	.+56     	; 0x334e <__mulsf3_pse+0x9c>
    3316:	88 23       	and	r24, r24
    3318:	4a f0       	brmi	.+18     	; 0x332c <__mulsf3_pse+0x7a>
    331a:	ee 0f       	add	r30, r30
    331c:	ff 1f       	adc	r31, r31
    331e:	bb 1f       	adc	r27, r27
    3320:	66 1f       	adc	r22, r22
    3322:	77 1f       	adc	r23, r23
    3324:	88 1f       	adc	r24, r24
    3326:	91 50       	subi	r25, 0x01	; 1
    3328:	50 40       	sbci	r21, 0x00	; 0
    332a:	a9 f7       	brne	.-22     	; 0x3316 <__mulsf3_pse+0x64>
    332c:	9e 3f       	cpi	r25, 0xFE	; 254
    332e:	51 05       	cpc	r21, r1
    3330:	70 f0       	brcs	.+28     	; 0x334e <__mulsf3_pse+0x9c>
    3332:	5c cf       	rjmp	.-328    	; 0x31ec <__fp_inf>
    3334:	a6 cf       	rjmp	.-180    	; 0x3282 <__fp_szero>
    3336:	5f 3f       	cpi	r21, 0xFF	; 255
    3338:	ec f3       	brlt	.-6      	; 0x3334 <__mulsf3_pse+0x82>
    333a:	98 3e       	cpi	r25, 0xE8	; 232
    333c:	dc f3       	brlt	.-10     	; 0x3334 <__mulsf3_pse+0x82>
    333e:	86 95       	lsr	r24
    3340:	77 95       	ror	r23
    3342:	67 95       	ror	r22
    3344:	b7 95       	ror	r27
    3346:	f7 95       	ror	r31
    3348:	e7 95       	ror	r30
    334a:	9f 5f       	subi	r25, 0xFF	; 255
    334c:	c1 f7       	brne	.-16     	; 0x333e <__mulsf3_pse+0x8c>
    334e:	fe 2b       	or	r31, r30
    3350:	88 0f       	add	r24, r24
    3352:	91 1d       	adc	r25, r1
    3354:	96 95       	lsr	r25
    3356:	87 95       	ror	r24
    3358:	97 f9       	bld	r25, 7
    335a:	08 95       	ret

0000335c <__ftoa_engine>:
    335c:	28 30       	cpi	r18, 0x08	; 8
    335e:	08 f0       	brcs	.+2      	; 0x3362 <__ftoa_engine+0x6>
    3360:	27 e0       	ldi	r18, 0x07	; 7
    3362:	33 27       	eor	r19, r19
    3364:	da 01       	movw	r26, r20
    3366:	99 0f       	add	r25, r25
    3368:	31 1d       	adc	r19, r1
    336a:	87 fd       	sbrc	r24, 7
    336c:	91 60       	ori	r25, 0x01	; 1
    336e:	00 96       	adiw	r24, 0x00	; 0
    3370:	61 05       	cpc	r22, r1
    3372:	71 05       	cpc	r23, r1
    3374:	39 f4       	brne	.+14     	; 0x3384 <__ftoa_engine+0x28>
    3376:	32 60       	ori	r19, 0x02	; 2
    3378:	2e 5f       	subi	r18, 0xFE	; 254
    337a:	3d 93       	st	X+, r19
    337c:	30 e3       	ldi	r19, 0x30	; 48
    337e:	2a 95       	dec	r18
    3380:	e1 f7       	brne	.-8      	; 0x337a <__ftoa_engine+0x1e>
    3382:	08 95       	ret
    3384:	9f 3f       	cpi	r25, 0xFF	; 255
    3386:	30 f0       	brcs	.+12     	; 0x3394 <__ftoa_engine+0x38>
    3388:	80 38       	cpi	r24, 0x80	; 128
    338a:	71 05       	cpc	r23, r1
    338c:	61 05       	cpc	r22, r1
    338e:	09 f0       	breq	.+2      	; 0x3392 <__ftoa_engine+0x36>
    3390:	3c 5f       	subi	r19, 0xFC	; 252
    3392:	3c 5f       	subi	r19, 0xFC	; 252
    3394:	3d 93       	st	X+, r19
    3396:	91 30       	cpi	r25, 0x01	; 1
    3398:	08 f0       	brcs	.+2      	; 0x339c <__ftoa_engine+0x40>
    339a:	80 68       	ori	r24, 0x80	; 128
    339c:	91 1d       	adc	r25, r1
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	1f 93       	push	r17
    33a4:	0f 93       	push	r16
    33a6:	ff 92       	push	r15
    33a8:	ef 92       	push	r14
    33aa:	19 2f       	mov	r17, r25
    33ac:	98 7f       	andi	r25, 0xF8	; 248
    33ae:	96 95       	lsr	r25
    33b0:	e9 2f       	mov	r30, r25
    33b2:	96 95       	lsr	r25
    33b4:	96 95       	lsr	r25
    33b6:	e9 0f       	add	r30, r25
    33b8:	ff 27       	eor	r31, r31
    33ba:	ea 54       	subi	r30, 0x4A	; 74
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	99 27       	eor	r25, r25
    33c0:	33 27       	eor	r19, r19
    33c2:	ee 24       	eor	r14, r14
    33c4:	ff 24       	eor	r15, r15
    33c6:	a7 01       	movw	r20, r14
    33c8:	e7 01       	movw	r28, r14
    33ca:	05 90       	lpm	r0, Z+
    33cc:	08 94       	sec
    33ce:	07 94       	ror	r0
    33d0:	28 f4       	brcc	.+10     	; 0x33dc <__ftoa_engine+0x80>
    33d2:	36 0f       	add	r19, r22
    33d4:	e7 1e       	adc	r14, r23
    33d6:	f8 1e       	adc	r15, r24
    33d8:	49 1f       	adc	r20, r25
    33da:	51 1d       	adc	r21, r1
    33dc:	66 0f       	add	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	88 1f       	adc	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	06 94       	lsr	r0
    33e6:	a1 f7       	brne	.-24     	; 0x33d0 <__ftoa_engine+0x74>
    33e8:	05 90       	lpm	r0, Z+
    33ea:	07 94       	ror	r0
    33ec:	28 f4       	brcc	.+10     	; 0x33f8 <__ftoa_engine+0x9c>
    33ee:	e7 0e       	add	r14, r23
    33f0:	f8 1e       	adc	r15, r24
    33f2:	49 1f       	adc	r20, r25
    33f4:	56 1f       	adc	r21, r22
    33f6:	c1 1d       	adc	r28, r1
    33f8:	77 0f       	add	r23, r23
    33fa:	88 1f       	adc	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	66 1f       	adc	r22, r22
    3400:	06 94       	lsr	r0
    3402:	a1 f7       	brne	.-24     	; 0x33ec <__ftoa_engine+0x90>
    3404:	05 90       	lpm	r0, Z+
    3406:	07 94       	ror	r0
    3408:	28 f4       	brcc	.+10     	; 0x3414 <__ftoa_engine+0xb8>
    340a:	f8 0e       	add	r15, r24
    340c:	49 1f       	adc	r20, r25
    340e:	56 1f       	adc	r21, r22
    3410:	c7 1f       	adc	r28, r23
    3412:	d1 1d       	adc	r29, r1
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	66 1f       	adc	r22, r22
    341a:	77 1f       	adc	r23, r23
    341c:	06 94       	lsr	r0
    341e:	a1 f7       	brne	.-24     	; 0x3408 <__ftoa_engine+0xac>
    3420:	05 90       	lpm	r0, Z+
    3422:	07 94       	ror	r0
    3424:	20 f4       	brcc	.+8      	; 0x342e <__ftoa_engine+0xd2>
    3426:	49 0f       	add	r20, r25
    3428:	56 1f       	adc	r21, r22
    342a:	c7 1f       	adc	r28, r23
    342c:	d8 1f       	adc	r29, r24
    342e:	99 0f       	add	r25, r25
    3430:	66 1f       	adc	r22, r22
    3432:	77 1f       	adc	r23, r23
    3434:	88 1f       	adc	r24, r24
    3436:	06 94       	lsr	r0
    3438:	a9 f7       	brne	.-22     	; 0x3424 <__ftoa_engine+0xc8>
    343a:	84 91       	lpm	r24, Z
    343c:	10 95       	com	r17
    343e:	17 70       	andi	r17, 0x07	; 7
    3440:	41 f0       	breq	.+16     	; 0x3452 <__ftoa_engine+0xf6>
    3442:	d6 95       	lsr	r29
    3444:	c7 95       	ror	r28
    3446:	57 95       	ror	r21
    3448:	47 95       	ror	r20
    344a:	f7 94       	ror	r15
    344c:	e7 94       	ror	r14
    344e:	1a 95       	dec	r17
    3450:	c1 f7       	brne	.-16     	; 0x3442 <__ftoa_engine+0xe6>
    3452:	ec e5       	ldi	r30, 0x5C	; 92
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	68 94       	set
    3458:	15 90       	lpm	r1, Z+
    345a:	15 91       	lpm	r17, Z+
    345c:	35 91       	lpm	r19, Z+
    345e:	65 91       	lpm	r22, Z+
    3460:	95 91       	lpm	r25, Z+
    3462:	05 90       	lpm	r0, Z+
    3464:	7f e2       	ldi	r23, 0x2F	; 47
    3466:	73 95       	inc	r23
    3468:	e1 18       	sub	r14, r1
    346a:	f1 0a       	sbc	r15, r17
    346c:	43 0b       	sbc	r20, r19
    346e:	56 0b       	sbc	r21, r22
    3470:	c9 0b       	sbc	r28, r25
    3472:	d0 09       	sbc	r29, r0
    3474:	c0 f7       	brcc	.-16     	; 0x3466 <__ftoa_engine+0x10a>
    3476:	e1 0c       	add	r14, r1
    3478:	f1 1e       	adc	r15, r17
    347a:	43 1f       	adc	r20, r19
    347c:	56 1f       	adc	r21, r22
    347e:	c9 1f       	adc	r28, r25
    3480:	d0 1d       	adc	r29, r0
    3482:	7e f4       	brtc	.+30     	; 0x34a2 <__ftoa_engine+0x146>
    3484:	70 33       	cpi	r23, 0x30	; 48
    3486:	11 f4       	brne	.+4      	; 0x348c <__ftoa_engine+0x130>
    3488:	8a 95       	dec	r24
    348a:	e6 cf       	rjmp	.-52     	; 0x3458 <__ftoa_engine+0xfc>
    348c:	e8 94       	clt
    348e:	01 50       	subi	r16, 0x01	; 1
    3490:	30 f0       	brcs	.+12     	; 0x349e <__ftoa_engine+0x142>
    3492:	08 0f       	add	r16, r24
    3494:	0a f4       	brpl	.+2      	; 0x3498 <__ftoa_engine+0x13c>
    3496:	00 27       	eor	r16, r16
    3498:	02 17       	cp	r16, r18
    349a:	08 f4       	brcc	.+2      	; 0x349e <__ftoa_engine+0x142>
    349c:	20 2f       	mov	r18, r16
    349e:	23 95       	inc	r18
    34a0:	02 2f       	mov	r16, r18
    34a2:	7a 33       	cpi	r23, 0x3A	; 58
    34a4:	28 f0       	brcs	.+10     	; 0x34b0 <__ftoa_engine+0x154>
    34a6:	79 e3       	ldi	r23, 0x39	; 57
    34a8:	7d 93       	st	X+, r23
    34aa:	2a 95       	dec	r18
    34ac:	e9 f7       	brne	.-6      	; 0x34a8 <__ftoa_engine+0x14c>
    34ae:	10 c0       	rjmp	.+32     	; 0x34d0 <__ftoa_engine+0x174>
    34b0:	7d 93       	st	X+, r23
    34b2:	2a 95       	dec	r18
    34b4:	89 f6       	brne	.-94     	; 0x3458 <__ftoa_engine+0xfc>
    34b6:	06 94       	lsr	r0
    34b8:	97 95       	ror	r25
    34ba:	67 95       	ror	r22
    34bc:	37 95       	ror	r19
    34be:	17 95       	ror	r17
    34c0:	17 94       	ror	r1
    34c2:	e1 18       	sub	r14, r1
    34c4:	f1 0a       	sbc	r15, r17
    34c6:	43 0b       	sbc	r20, r19
    34c8:	56 0b       	sbc	r21, r22
    34ca:	c9 0b       	sbc	r28, r25
    34cc:	d0 09       	sbc	r29, r0
    34ce:	98 f0       	brcs	.+38     	; 0x34f6 <__ftoa_engine+0x19a>
    34d0:	23 95       	inc	r18
    34d2:	7e 91       	ld	r23, -X
    34d4:	73 95       	inc	r23
    34d6:	7a 33       	cpi	r23, 0x3A	; 58
    34d8:	08 f0       	brcs	.+2      	; 0x34dc <__ftoa_engine+0x180>
    34da:	70 e3       	ldi	r23, 0x30	; 48
    34dc:	7c 93       	st	X, r23
    34de:	20 13       	cpse	r18, r16
    34e0:	b8 f7       	brcc	.-18     	; 0x34d0 <__ftoa_engine+0x174>
    34e2:	7e 91       	ld	r23, -X
    34e4:	70 61       	ori	r23, 0x10	; 16
    34e6:	7d 93       	st	X+, r23
    34e8:	30 f0       	brcs	.+12     	; 0x34f6 <__ftoa_engine+0x19a>
    34ea:	83 95       	inc	r24
    34ec:	71 e3       	ldi	r23, 0x31	; 49
    34ee:	7d 93       	st	X+, r23
    34f0:	70 e3       	ldi	r23, 0x30	; 48
    34f2:	2a 95       	dec	r18
    34f4:	e1 f7       	brne	.-8      	; 0x34ee <__ftoa_engine+0x192>
    34f6:	11 24       	eor	r1, r1
    34f8:	ef 90       	pop	r14
    34fa:	ff 90       	pop	r15
    34fc:	0f 91       	pop	r16
    34fe:	1f 91       	pop	r17
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	99 27       	eor	r25, r25
    3506:	87 fd       	sbrc	r24, 7
    3508:	90 95       	com	r25
    350a:	08 95       	ret

0000350c <strnlen_P>:
    350c:	fc 01       	movw	r30, r24
    350e:	05 90       	lpm	r0, Z+
    3510:	61 50       	subi	r22, 0x01	; 1
    3512:	70 40       	sbci	r23, 0x00	; 0
    3514:	01 10       	cpse	r0, r1
    3516:	d8 f7       	brcc	.-10     	; 0x350e <strnlen_P+0x2>
    3518:	80 95       	com	r24
    351a:	90 95       	com	r25
    351c:	8e 0f       	add	r24, r30
    351e:	9f 1f       	adc	r25, r31
    3520:	08 95       	ret

00003522 <strnlen>:
    3522:	fc 01       	movw	r30, r24
    3524:	61 50       	subi	r22, 0x01	; 1
    3526:	70 40       	sbci	r23, 0x00	; 0
    3528:	01 90       	ld	r0, Z+
    352a:	01 10       	cpse	r0, r1
    352c:	d8 f7       	brcc	.-10     	; 0x3524 <strnlen+0x2>
    352e:	80 95       	com	r24
    3530:	90 95       	com	r25
    3532:	8e 0f       	add	r24, r30
    3534:	9f 1f       	adc	r25, r31
    3536:	08 95       	ret

00003538 <fputc>:
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	18 2f       	mov	r17, r24
    3542:	09 2f       	mov	r16, r25
    3544:	eb 01       	movw	r28, r22
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	81 fd       	sbrc	r24, 1
    354a:	03 c0       	rjmp	.+6      	; 0x3552 <fputc+0x1a>
    354c:	8f ef       	ldi	r24, 0xFF	; 255
    354e:	9f ef       	ldi	r25, 0xFF	; 255
    3550:	20 c0       	rjmp	.+64     	; 0x3592 <fputc+0x5a>
    3552:	82 ff       	sbrs	r24, 2
    3554:	10 c0       	rjmp	.+32     	; 0x3576 <fputc+0x3e>
    3556:	4e 81       	ldd	r20, Y+6	; 0x06
    3558:	5f 81       	ldd	r21, Y+7	; 0x07
    355a:	2c 81       	ldd	r18, Y+4	; 0x04
    355c:	3d 81       	ldd	r19, Y+5	; 0x05
    355e:	42 17       	cp	r20, r18
    3560:	53 07       	cpc	r21, r19
    3562:	7c f4       	brge	.+30     	; 0x3582 <fputc+0x4a>
    3564:	e8 81       	ld	r30, Y
    3566:	f9 81       	ldd	r31, Y+1	; 0x01
    3568:	9f 01       	movw	r18, r30
    356a:	2f 5f       	subi	r18, 0xFF	; 255
    356c:	3f 4f       	sbci	r19, 0xFF	; 255
    356e:	39 83       	std	Y+1, r19	; 0x01
    3570:	28 83       	st	Y, r18
    3572:	10 83       	st	Z, r17
    3574:	06 c0       	rjmp	.+12     	; 0x3582 <fputc+0x4a>
    3576:	e8 85       	ldd	r30, Y+8	; 0x08
    3578:	f9 85       	ldd	r31, Y+9	; 0x09
    357a:	81 2f       	mov	r24, r17
    357c:	09 95       	icall
    357e:	89 2b       	or	r24, r25
    3580:	29 f7       	brne	.-54     	; 0x354c <fputc+0x14>
    3582:	2e 81       	ldd	r18, Y+6	; 0x06
    3584:	3f 81       	ldd	r19, Y+7	; 0x07
    3586:	2f 5f       	subi	r18, 0xFF	; 255
    3588:	3f 4f       	sbci	r19, 0xFF	; 255
    358a:	3f 83       	std	Y+7, r19	; 0x07
    358c:	2e 83       	std	Y+6, r18	; 0x06
    358e:	81 2f       	mov	r24, r17
    3590:	90 2f       	mov	r25, r16
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	08 95       	ret

0000359c <printf>:
    359c:	a0 e0       	ldi	r26, 0x00	; 0
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e4 ed       	ldi	r30, 0xD4	; 212
    35a2:	fa e1       	ldi	r31, 0x1A	; 26
    35a4:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__prologue_saves__+0x20>
    35a8:	fe 01       	movw	r30, r28
    35aa:	35 96       	adiw	r30, 0x05	; 5
    35ac:	61 91       	ld	r22, Z+
    35ae:	71 91       	ld	r23, Z+
    35b0:	af 01       	movw	r20, r30
    35b2:	80 91 80 00 	lds	r24, 0x0080
    35b6:	90 91 81 00 	lds	r25, 0x0081
    35ba:	0e 94 ca 00 	call	0x194	; 0x194 <vfprintf>
    35be:	e2 e0       	ldi	r30, 0x02	; 2
    35c0:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__epilogue_restores__+0x20>

000035c4 <__ultoa_invert>:
    35c4:	fa 01       	movw	r30, r20
    35c6:	aa 27       	eor	r26, r26
    35c8:	28 30       	cpi	r18, 0x08	; 8
    35ca:	51 f1       	breq	.+84     	; 0x3620 <__ultoa_invert+0x5c>
    35cc:	20 31       	cpi	r18, 0x10	; 16
    35ce:	81 f1       	breq	.+96     	; 0x3630 <__ultoa_invert+0x6c>
    35d0:	e8 94       	clt
    35d2:	6f 93       	push	r22
    35d4:	6e 7f       	andi	r22, 0xFE	; 254
    35d6:	6e 5f       	subi	r22, 0xFE	; 254
    35d8:	7f 4f       	sbci	r23, 0xFF	; 255
    35da:	8f 4f       	sbci	r24, 0xFF	; 255
    35dc:	9f 4f       	sbci	r25, 0xFF	; 255
    35de:	af 4f       	sbci	r26, 0xFF	; 255
    35e0:	b1 e0       	ldi	r27, 0x01	; 1
    35e2:	3e d0       	rcall	.+124    	; 0x3660 <__ultoa_invert+0x9c>
    35e4:	b4 e0       	ldi	r27, 0x04	; 4
    35e6:	3c d0       	rcall	.+120    	; 0x3660 <__ultoa_invert+0x9c>
    35e8:	67 0f       	add	r22, r23
    35ea:	78 1f       	adc	r23, r24
    35ec:	89 1f       	adc	r24, r25
    35ee:	9a 1f       	adc	r25, r26
    35f0:	a1 1d       	adc	r26, r1
    35f2:	68 0f       	add	r22, r24
    35f4:	79 1f       	adc	r23, r25
    35f6:	8a 1f       	adc	r24, r26
    35f8:	91 1d       	adc	r25, r1
    35fa:	a1 1d       	adc	r26, r1
    35fc:	6a 0f       	add	r22, r26
    35fe:	71 1d       	adc	r23, r1
    3600:	81 1d       	adc	r24, r1
    3602:	91 1d       	adc	r25, r1
    3604:	a1 1d       	adc	r26, r1
    3606:	20 d0       	rcall	.+64     	; 0x3648 <__ultoa_invert+0x84>
    3608:	09 f4       	brne	.+2      	; 0x360c <__ultoa_invert+0x48>
    360a:	68 94       	set
    360c:	3f 91       	pop	r19
    360e:	2a e0       	ldi	r18, 0x0A	; 10
    3610:	26 9f       	mul	r18, r22
    3612:	11 24       	eor	r1, r1
    3614:	30 19       	sub	r19, r0
    3616:	30 5d       	subi	r19, 0xD0	; 208
    3618:	31 93       	st	Z+, r19
    361a:	de f6       	brtc	.-74     	; 0x35d2 <__ultoa_invert+0xe>
    361c:	cf 01       	movw	r24, r30
    361e:	08 95       	ret
    3620:	46 2f       	mov	r20, r22
    3622:	47 70       	andi	r20, 0x07	; 7
    3624:	40 5d       	subi	r20, 0xD0	; 208
    3626:	41 93       	st	Z+, r20
    3628:	b3 e0       	ldi	r27, 0x03	; 3
    362a:	0f d0       	rcall	.+30     	; 0x364a <__ultoa_invert+0x86>
    362c:	c9 f7       	brne	.-14     	; 0x3620 <__ultoa_invert+0x5c>
    362e:	f6 cf       	rjmp	.-20     	; 0x361c <__ultoa_invert+0x58>
    3630:	46 2f       	mov	r20, r22
    3632:	4f 70       	andi	r20, 0x0F	; 15
    3634:	40 5d       	subi	r20, 0xD0	; 208
    3636:	4a 33       	cpi	r20, 0x3A	; 58
    3638:	18 f0       	brcs	.+6      	; 0x3640 <__ultoa_invert+0x7c>
    363a:	49 5d       	subi	r20, 0xD9	; 217
    363c:	31 fd       	sbrc	r19, 1
    363e:	40 52       	subi	r20, 0x20	; 32
    3640:	41 93       	st	Z+, r20
    3642:	02 d0       	rcall	.+4      	; 0x3648 <__ultoa_invert+0x84>
    3644:	a9 f7       	brne	.-22     	; 0x3630 <__ultoa_invert+0x6c>
    3646:	ea cf       	rjmp	.-44     	; 0x361c <__ultoa_invert+0x58>
    3648:	b4 e0       	ldi	r27, 0x04	; 4
    364a:	a6 95       	lsr	r26
    364c:	97 95       	ror	r25
    364e:	87 95       	ror	r24
    3650:	77 95       	ror	r23
    3652:	67 95       	ror	r22
    3654:	ba 95       	dec	r27
    3656:	c9 f7       	brne	.-14     	; 0x364a <__ultoa_invert+0x86>
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	61 05       	cpc	r22, r1
    365c:	71 05       	cpc	r23, r1
    365e:	08 95       	ret
    3660:	9b 01       	movw	r18, r22
    3662:	ac 01       	movw	r20, r24
    3664:	0a 2e       	mov	r0, r26
    3666:	06 94       	lsr	r0
    3668:	57 95       	ror	r21
    366a:	47 95       	ror	r20
    366c:	37 95       	ror	r19
    366e:	27 95       	ror	r18
    3670:	ba 95       	dec	r27
    3672:	c9 f7       	brne	.-14     	; 0x3666 <__ultoa_invert+0xa2>
    3674:	62 0f       	add	r22, r18
    3676:	73 1f       	adc	r23, r19
    3678:	84 1f       	adc	r24, r20
    367a:	95 1f       	adc	r25, r21
    367c:	a0 1d       	adc	r26, r0
    367e:	08 95       	ret

00003680 <_exit>:
    3680:	f8 94       	cli

00003682 <__stop_program>:
    3682:	ff cf       	rjmp	.-2      	; 0x3682 <__stop_program>
